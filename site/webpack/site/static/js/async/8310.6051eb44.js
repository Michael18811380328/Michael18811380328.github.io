"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["8310"],{132:function(n,e,t){t.r(e),t.d(e,{default:function(){return c}});var r=t(6469),a=t(8809);function s(n){let e=Object.assign({h1:"h1",a:"a",p:"p",code:"code",strong:"strong",h2:"h2",ul:"ul",li:"li",h3:"h3",pre:"pre",img:"img",h4:"h4"},(0,a.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"webpack5-splitchunksplugin-实用指南",children:["webpack5 SplitChunksPlugin 实用指南",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#webpack5-splitchunksplugin-实用指南",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"统计信息：字数 17146  阅读35分钟"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://juejin.cn/user/2172290706715565/posts",target:"_blank",rel:"noopener noreferrer",children:"晓得迷路了"})}),"\n",(0,r.jsx)(e.p,{children:"2018-09-16"}),"\n",(0,r.jsx)(e.p,{children:"25,734阅读8分钟"}),"\n",(0,r.jsx)(e.p,{children:"提到前端打包工具，毫无疑问想先到的是 webpack。但是前端发展地很快，时不时会有新东西出现，打包工具这边之前也出现 parcel 和 rollup。各种工具的碰撞，相互汲取优点，促进技术的发展。"}),"\n",(0,r.jsxs)(e.p,{children:["webpack 从 4.x 开始支持了零配置的特性，同时对块打包也做了优化，",(0,r.jsx)(e.code,{children:"CommonsChunkPlugin"}),"已经被移除了，现在是使用",(0,r.jsx)(e.code,{children:"optimization.splitChunks"}),"代替。（",(0,r.jsx)(e.strong,{children:"webpack5 splitChunks 配置和 webpack4 大体上一样"}),"）"]}),"\n",(0,r.jsx)(e.p,{children:"本文基于 webpack@5.74.0 实践。下面就开始介绍 splitChunks 的内容。"}),"\n",(0,r.jsxs)(e.h2,{id:"默认情况",children:["默认情况",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#默认情况",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"SplitChunksPlugin"})," 默认配置适用大部分场景。"]}),"\n",(0,r.jsx)(e.p,{children:"打包默认情况下只会影响按需加载模块，因为对初始块也进行优化打包会影响 HTML 中的 script 标签数，增加请求数。"}),"\n",(0,r.jsx)(e.p,{children:"默认情况（webpack 的默认配置）下 webpack 会根据下述条件自动进行代码块分割："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"共享模块（至少被引用 2次）或者 node_modules 模块"}),"\n",(0,r.jsx)(e.li,{children:"新代码块大于 20kb（min+gziped之前的体积）"}),"\n",(0,r.jsx)(e.li,{children:"按需加载块时的最大并行请求数将低于或等于 30"}),"\n",(0,r.jsx)(e.li,{children:"初始页面加载时的最大并行请求数将低于或等于 30"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["记住，默认情况下只有",(0,r.jsx)(e.strong,{children:"按需加载"}),"模块会根据上方条件进行打包优化。"]}),"\n",(0,r.jsx)(e.p,{children:"接下来看些例子来理解默认情况的打包。"}),"\n",(0,r.jsxs)(e.h3,{id:"模块全部是同步引入",children:["模块全部是同步引入",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#模块全部是同步引入",children:"#"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"jsx\n\n复制代码// 示例 1.1\n// App.jsx\nimport React from 'react'\nimport { createRoot } from 'react-dom/client'\nimport { sum } from 'lodash'\nimport './app.css'\n\nconsole.log(sum)\n\nconst container = document.getElementById('app');\nconst root = createRoot(container);\nroot.render(<div>SplitChunks</div>)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fae150398f19402d954c2a36dcfd3343~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?",alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"默认情况只会影响按需加载模块，所以所有内容全部被打包到一起了。"}),"\n",(0,r.jsxs)(e.h3,{id:"有模块动态导入",children:["有模块动态导入",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#有模块动态导入",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["这里首先使用符合 ",(0,r.jsx)(e.a,{href:"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Ftc39%2Fproposal-dynamic-import",target:"_blank",rel:"noopener noreferrer",children:"ECMAScript 提案"})," 的 import() 语法"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"jsx\n\n复制代码// 示例 1.2\n// App.jsx\nimport React from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './app.css'\nimport(/* webpackChunkName: \"async-lodash\" */ 'lodash').then(component => {\n  console.log(component)\n})\n\nconst container = document.getElementById('app');\nconst root = createRoot(container);\nroot.render(<div>SplitChunks</div>)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b6ff507e71074b0a840f02b50d7f525b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?",alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"这里 lodash 使用动态导入，打包结果中可以看到 lodash 被单独打包了，因为默认情况下异步模块会被单独打包。"}),"\n",(0,r.jsxs)(e.h3,{id:"react-按需加载",children:["react 按需加载",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#react-按需加载",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"同样的我们试要 react 按需加载，使用 React.lazy 来实现按需加载"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"jsx\n\n复制代码// 示例 1.3\n// Page1.jsx\nimport React from 'react'\nimport { sum } from 'lodash'\n\nexport default function() {\n  return <div>{sum([1, 2])}</div>\n}\n\n// App.jsx\nimport React from 'react'\nimport { createRoot } from 'react-dom/client'\nimport {\n  HashRouter,\n  Routes,\n  Route,\n} from 'react-router-dom'\n\nconst Page1 = React.lazy(() => import(\"./component/Page1\"))\n\nconst container = document.getElementById('app');\nconst root = createRoot(container);\nroot.render((\n  <HashRouter>\n    <React.Suspense fallback=\"loading\">\n      <Routes>\n        <Route path=\"/\" element={<Page1 />} />\n      </Routes>\n    </React.Suspense>\n  </HashRouter>\n))\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0264de5c4667469fa93712a7526e0c5e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?",alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"打包结果分析：生成了三个 JS 文件，main.js 显然对应 App.jsx，Page1 是异步引入的，单独打包，这边为啥生成了两个包。因为默认情况下 webpack 会对异步模块进行打包优化，lodash 又符合上述提到默认的 4 个条件，所以 lodash 也被单独打包了。"}),"\n",(0,r.jsxs)(e.h3,{id:"lodash-按需加载",children:["lodash 按需加载",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#lodash-按需加载",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"我们调整下 lodash 的引入，只引入 sum 模块。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"javascript\n\n复制代码// Page1.jsx\n// 示例 1.4\nimport React from 'react'\nimport sum from 'lodash/sum'\n\nexport default function() {\n  return <div>{sum([1, 2])}</div>\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f6360858241415abe0829821bf35fcf~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?",alt:"image.png"})}),"\n",(0,r.jsxs)(e.p,{children:["可以看到此时就两个文件，因为 ",(0,r.jsx)(e.code,{children:"lodash/sum"})," 的文件大小小于 20kb，不会被单独打包。"]}),"\n",(0,r.jsxs)(e.h3,{id:"共享模块打包",children:["共享模块打包",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#共享模块打包",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"除了 node_modules 满足条件会被单独打包，共享模块也会，我们看下面例子："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"javascript\n\n复制代码// Button2.jsx 保证文件大小大于 20kb\nimport React from 'react'\nimport { Button } from 'antd'\nexport default function() {\n  return (\n    <Button>111...</Button>\n  )\n}\n\n// Page1.jsx\nimport React from 'react'\nimport Button2 from './Button'\nimport { sum } from 'lodash'\n\nexport default function() {\n  return (\n    <div>{sum([1, 2])}<Button2>1</Button2></div>\n  )\n}\n\n// Page2.jsx\nimport React from 'react'\nimport Button2 from './Button'\nimport { sum } from 'lodash'\n\nexport default function(){\n  console.log(sum([1, 2]))\n  return (\n    <div>\n      <Button2 />\n    </div>\n  )\n}\n\n// App.jsx\nimport React from 'react'\nimport { createRoot } from 'react-dom/client'\nimport {\n  HashRouter,\n  Routes,\n  Route,\n} from 'react-router-dom'\n\nconst Page1 = React.lazy(() => import(\"./component/Page1\"))\nconst Page2 = React.lazy(() => import(\"./component/Page2\"))\n\nconst container = document.getElementById('app');\nconst root = createRoot(container);\nroot.render((\n  <HashRouter>\n    <React.Suspense fallback=\"loading\">\n      <Routes>\n        <Route path=\"/\" element={<Page1 />} />\n        <Route path=\"/page2\" element={<Page2 />} />\n      </Routes>\n    </React.Suspense>\n  </HashRouter>\n))\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b1eb49eba13545a3be01e0244d9d5588~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?",alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"打包分析：main、Page1、Page2 各一个 JS 文件，共享模块 Button2 一个包，第三方库一个包。至于为啥共享模块和第三方库是分开打包的，是和 webpack 的默认配置有关，后面我们就可以看到默认配置。"}),"\n",(0,r.jsxs)(e.h3,{id:"初始和异步模块的公共库",children:["初始和异步模块的公共库",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#初始和异步模块的公共库",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"最后在看一个场景，如果 App.jsx 中也使用到 lodash，此时会是什么情况。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"jsx\n\n复制代码// 示例 1.6\n// Page1.jsx\nimport React from 'react'\nimport { sum } from 'lodash'\n\nexport default function() {\n  return <div>{sum([1, 2])}</div>\n}\n\n// App.jsx\nimport React from 'react'\nimport { createRoot } from 'react-dom/client'\nimport {\n  HashRouter,\n  Routes,\n  Route,\n} from 'react-router-dom'\nimport { sum } from 'lodash'\n\nconsole.log(sum)\nconst Page1 = React.lazy(() => import(\"./component/Page1\"))\n\nconst container = document.getElementById('app');\nconst root = createRoot(container);\nroot.render((\n  <HashRouter>\n    <React.Suspense fallback=\"loading\">\n      <Routes>\n        <Route path=\"/\" element={<Page1 />} />\n      </Routes>\n    </React.Suspense>\n  </HashRouter>\n))\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6dc1b6d3da4c45d1ae1f010ec5362357~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?",alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"可以看到 lodash 被打包到 main.js 中去了，异步模块和初始块都有的第三方库，会被打包在初始模块中。原因也很简单，Page1 加载前肯定会加载 App 模块，App 模块中有了 lodash，Page1 就直接可以使用 App 模块中的 lodash 了。"}),"\n",(0,r.jsx)(e.p,{children:"讲完了 webpack 默认情况下对打包块的优化，接下来看 splitChunks 配置项。"}),"\n",(0,r.jsxs)(e.h2,{id:"配置项",children:["配置项",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#配置项",children:"#"})]}),"\n",(0,r.jsxs)(e.h3,{id:"默认配置",children:["默认配置",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#默认配置",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"webpack 5 splitChunks 默认配置如下，上面提到的默认情况下打包的条件（按需加载 + 满足 4 个默认打包条件）在下方配置中就可以体现。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"js\n\n复制代码module.exports = {\n  //...\n  optimization: {\n    splitChunks: {\n      chunks: 'async',\n      minSize: 20000,\n      minRemainingSize: 0,\n      minChunks: 1,\n      maxAsyncRequests: 30,\n      maxInitialRequests: 30,\n      enforceSizeThreshold: 50000,\n      cacheGroups: {\n        defaultVendors: {\n          test: /[\\/]node_modules[\\/]/,\n          priority: -10,\n          reuseExistingChunk: true,\n        },\n        default: {\n          minChunks: 2,\n          priority: -20,\n          reuseExistingChunk: true,\n        },\n      },\n    },\n  },\n};\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"chunks: 表示哪些代码需要优化，有三个可选值：initial(初始块)、async(按需加载块)、all(全部块)，默认为 async"}),"\n",(0,r.jsx)(e.li,{children:"minSize: 表示在压缩前的最小模块大小，默认为 20000"}),"\n",(0,r.jsx)(e.li,{children:"minChunks: 表示被引用次数，默认为 1"}),"\n",(0,r.jsx)(e.li,{children:"maxAsyncRequests: 按需加载时候最大的并行请求数，默认为 30"}),"\n",(0,r.jsx)(e.li,{children:"maxInitialRequests: 一个入口最大的并行请求数，默认为 30"}),"\n",(0,r.jsx)(e.li,{children:"enforceSizeThreshold：强制执行拆分的体积阈值"}),"\n",(0,r.jsxs)(e.li,{children:["cacheGroups: 缓存组。缓存组的属性除上面所有属性外，还有 test, priority, reuseExistingChunk","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"test: 用于控制哪些模块被这个缓存组匹配到"}),"\n",(0,r.jsx)(e.li,{children:"priority: 缓存组打包的先后优先级"}),"\n",(0,r.jsx)(e.li,{children:"reuseExistingChunk: 如果当前代码块包含的模块已经有了，就不在产生一个新的代码块"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["默认配置项基本就上面这些，其他还有如块名称 name，块名称连接符 automaticNameDelimiter 等配置，更多可查看",(0,r.jsx)(e.a,{href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.docschina.org%2Fplugins%2Fsplit-chunks-plugin%2F%23optimizationsplitchunks",target:"_blank",rel:"noopener noreferrer",children:"官网"})]}),"\n",(0,r.jsx)(e.p,{children:"我们重点来看下 chunks 和 cacheGroups。"}),"\n",(0,r.jsxs)(e.h3,{id:"chunks",children:["chunks",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#chunks",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"chunks 的取值是有 initial, async, all。默认情况下是 async，在本文第一部分已经介绍了它的表现，所以现在来看下其它两个的表现。"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"initial 模块下只优化初始模块，也就是说 webpack 只会对初始模块做打包优化。"}),"\n",(0,r.jsx)(e.li,{children:"all 模块下同时对初始模块和异步模块做打包优化。"}),"\n"]}),"\n",(0,r.jsxs)(e.h4,{id:"initial",children:["initial",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#initial",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"我们先来看下 initial 的打包表现，可对比上方示例 1.3 做对比"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"jsx\n\n复制代码// 示例 2.1\n// Page1.jsx\nimport React from 'react'\nimport { sum } from 'lodash'\n\nexport default function() {\n  return <div>{sum([1, 2])}</div>\n}\n\n// App.jsx\nimport React from 'react'\nimport { createRoot } from 'react-dom/client'\nimport {\n  HashRouter,\n  Routes,\n  Route,\n} from 'react-router-dom'\n\nconst Page1 = React.lazy(() => import(\"./component/Page1\"))\n\nconst container = document.getElementById('app');\nconst root = createRoot(container);\nroot.render((\n  <HashRouter>\n    <React.Suspense fallback=\"loading\">\n      <Routes>\n        <Route path=\"/\" element={<Page1 />} />\n      </Routes>\n    </React.Suspense>\n  </HashRouter>\n))\n\n// webpack.config.js\nsplitChunks: {\n  chunks: 'initial'\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/787fed6287514b408ff0a6fd8113b113~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?",alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"打包分析：可以看到异步模块单独打成了一个包，初始模块打成了两个包：main 和 vendor，initial 模式下打包优化只在初始模块中作用。"}),"\n",(0,r.jsx)(e.p,{children:"在这边我们也可以试下 initial 共享模块的打包，单页面应用的初始模块只有一个，我们需要配置多入口才行。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"javascript\n\n复制代码// 示例 2.2\n// Button2.jsx 保证文件大小大于 20kb\nimport React from 'react'\nimport { Button } from 'antd'\nexport default function() {\n  return (\n    <Button>111...</Button>\n  )\n}\n\n// Page3.jsx\nimport React from 'react'\nimport Button2 from './Button'\n\nexport default function() {\n  return (\n    <Button2>Page3</Button2>\n  )\n}\n\n// Page4.jsx\nimport React from 'react'\nimport Button2 from './Button'\n\nexport default function() {\n  return (\n    <Button2>Page4</Button2>\n  )\n}\n\n// App2.jsx\nimport React from 'react'\nimport { createRoot } from 'react-dom/client'\nimport {\n  HashRouter,\n  Routes,\n  Route,\n} from 'react-router-dom'\nimport Page3 from './component/Page3.jsx'\n\nconst container = document.getElementById('app');\nconst root = createRoot(container);\nroot.render((\n  <HashRouter>\n    <React.Suspense fallback=\"loading\">\n      <Routes>\n        <Route path=\"/\" element={<Page3 />} />\n      </Routes>\n    </React.Suspense>\n  </HashRouter>\n))\n\n// App2.jsx 同 App.jsx，把 Page3 换成 Page4\n\n// webpack.config.js\nmodule.exports = {\n    entry: {\n       app1: './App.jsx',\n       app2: './App2.jsx',\n    },\n    ...,\n    optimization: {\n      splitChunks: {\n         chunks: 'initial', \n      }\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6da51fc4e1b2486d8707a74e0e3c00ed~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?",alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"可以看到共享模块 Button2 被单独打包了。"}),"\n",(0,r.jsx)(e.p,{children:"我们也可以通过配置 optimization.splitChunks.cacheGroups.default: false 禁用 default 缓存组。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"js\n\n复制代码// 示例 2.3\n// webpack.config.js\nsplitChunks: {\n  chunks: 'initial',\n  cacheGroups: {\n    default: false\n  }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f2e341273de4065a9d2d7675bd284b5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?",alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"我们可以看到默认配置中共享模块打包优化被禁用后，就有没有了 Button2 的单独打包。"}),"\n",(0,r.jsx)(e.p,{children:"讲完了 initial 模式下打包，最后讲下 all 模式下打包。"}),"\n",(0,r.jsxs)(e.h4,{id:"all",children:["all",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#all",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"all 模式下初始块和异步模块都会按照配置做优化。举个例子，可对比上方示例 1.3、2.1 做对比"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"jsx\n\n复制代码// 示例 2.4\n// Page1.jsx\nimport React from 'react'\nimport { sum } from 'lodash'\n\nexport default function() {\n  return <div>{sum([1, 2])}</div>\n}\n\n// App.jsx\nimport React from 'react'\nimport { createRoot } from 'react-dom/client'\nimport {\n  HashRouter,\n  Routes,\n  Route,\n} from 'react-router-dom'\n\nconst Page1 = React.lazy(() => import(\"./component/Page1\"))\n\nconst container = document.getElementById('app');\nconst root = createRoot(container);\nroot.render((\n  <HashRouter>\n    <React.Suspense fallback=\"loading\">\n      <Routes>\n        <Route path=\"/\" element={<Page1 />} />\n      </Routes>\n    </React.Suspense>\n  </HashRouter>\n))\n\n// webpack.config.js\nsplitChunks: {\n  chunks: 'all'\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afeb1fea304a445da1d8027edba61d0f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?",alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"可以看到打包成了 4 个文件，初始模块的第三方库被单独打包了，异步模块的 lodash 也单独打包了。打包优化作用到了初始和异步模块。"}),"\n",(0,r.jsxs)(e.h3,{id:"cachegroups",children:["cacheGroups",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#cachegroups",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"使用 cacheGroups 可以自定义配置打包块。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-jsx",children:"jsx\n\n复制代码// 示例 2.5\n\n// 其他文件同示例 2.4\n\n// webpack.config.js\noptimization: {\n    chunks: 'all'\n    splitChunks: {\n      cacheGroups: {\n        react: {\n          test: /react-dom/\n        }\n      }\n    }\n  }\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f46d0fb2cc264b6ea103ce16f598bf88~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?",alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"对比示例 2.4，可以看到 react-dom 被单独打成包了，其他第三方在一个包。自定义打包块的默认优先级是 0，所有优先处理自定义打包。"}),"\n",(0,r.jsxs)(e.h2,{id:"提取第三方库",children:["提取第三方库",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#提取第三方库",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"最后看下之前 CommonsChunkPlugin 常用的分离部分第三方库功能。这边你可以想一下怎么操作。"}),"\n",(0,r.jsxs)(e.p,{children:["上面已经提到了设置 ",(0,r.jsx)(e.code,{children:"chunks: initial || all"})," 都可以提取出第三方库。但是它是把所有第三库提取出来，所以我们在只提取 react 和 react-dom 的情况下，需要自定义一个 cacheGroup。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"js\n\n复制代码// 示例 2.6\n// webpack.config.js\noptimization: {\n  splitChunks: {\n    chunks: 'all',\n    cacheGroups: {\n      react: {\n          name: 'react',\n          test: /[\\\\/]node_modules[\\\\/](react|react-dom)[\\\\/]/,\n      }\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/890cf11736c54a618ca4487b4be42365~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?",alt:"image.png"})}),"\n",(0,r.jsx)(e.p,{children:"可以看到我们新增了一个缓存组，只匹配 react 和 react-dom，所以达到了之前 CommonsChunkPlugin 的功能。"}),"\n",(0,r.jsxs)(e.h2,{id:"optimizationruntimechunk",children:["optimization.runtimeChunk",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#optimizationruntimechunk",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["最后提一下 runtimeChunk，通过",(0,r.jsx)(e.code,{children:"optimization.runtimeChunk: true"}),"选项，webpack 会添加一个只包含运行时 (runtime) 额外代码块到每一个入口。（译注：这个需要看场景使用，会导致每个入口都加载多一份运行时代码）"]}),"\n",(0,r.jsxs)(e.h2,{id:"总结",children:["总结",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"webpack5 默认情况下只对异步模块做打包优化，额外的打包必须满足 4 个条件（webpack 的默认配置，可修改）。根据需求可调整为只对初始模块做打包优化，或者初始和异步模块一起优化。同时可配置自己的打包规则。"}),"\n",(0,r.jsx)(e.p,{children:"简而言之：chunks 控制打包作用范围，其他控制打包规则。"}),"\n",(0,r.jsx)(e.p,{children:"webpack5 的 splitChunks 功能是比较强大的，不过推荐还是使用默认模式，或者提取一下第三方库。"}),"\n",(0,r.jsxs)(e.h2,{id:"参考材料",children:["参考材料",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#参考材料",children:"#"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://link.juejin.cn/?target=https%3A%2F%2Fwebpack.docschina.org%2Fplugins%2Fsplit-chunks-plugin%2F%23splitchunkscachegroups",target:"_blank",rel:"noopener noreferrer",children:"SplitChunksPlugin"})}),"\n"]})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(s,{...n})}):s(n)}let c=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["webpack%2F13-webpack5%20SplitChunksPlugin%20%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97.md"]={toc:[{text:"默认情况",id:"默认情况",depth:2},{text:"模块全部是同步引入",id:"模块全部是同步引入",depth:3},{text:"有模块动态导入",id:"有模块动态导入",depth:3},{text:"react 按需加载",id:"react-按需加载",depth:3},{text:"lodash 按需加载",id:"lodash-按需加载",depth:3},{text:"共享模块打包",id:"共享模块打包",depth:3},{text:"初始和异步模块的公共库",id:"初始和异步模块的公共库",depth:3},{text:"配置项",id:"配置项",depth:2},{text:"默认配置",id:"默认配置",depth:3},{text:"chunks",id:"chunks",depth:3},{text:"initial",id:"initial",depth:4},{text:"all",id:"all",depth:4},{text:"cacheGroups",id:"cachegroups",depth:3},{text:"提取第三方库",id:"提取第三方库",depth:2},{text:"optimization.runtimeChunk",id:"optimizationruntimechunk",depth:2},{text:"总结",id:"总结",depth:2},{text:"参考材料",id:"参考材料",depth:2}],title:"webpack5 SplitChunksPlugin 实用指南",frontmatter:{}}}}]);