"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["2867"],{8533:function(n,e,l){l.r(e),l.d(e,{default:function(){return o}});var r=l(6469),s=l(8809);function i(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",strong:"strong",blockquote:"blockquote",ul:"ul",li:"li",ol:"ol",pre:"pre",code:"code"},(0,s.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"rollup打包工具基础配置使用详解",children:["rollup打包工具基础配置使用详解",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#rollup打包工具基础配置使用详解",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"统计信息：字数 16753  阅读34分钟"}),"\n",(0,r.jsxs)(e.h2,{id:"使用详解",children:["使用详解",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#使用详解",children:"#"})]}),"\n",(0,r.jsxs)(e.h3,{id:"前言",children:["前言",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Rollup官方解析："})," Rollup 是一个 JavaScript 模块打包器，可以将小块代码编译成大块复杂的代码，例如 library（库） 或应用程序"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"webpack官方解析："})," webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。(webpack存在大量引导代码和模块函数)"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"vue框架源码是使用Rollup进行打包的，而且rollup和webpack相比更适用于框架的开发，打包后的代码可读性更高。"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"使用Rollup的开源项目："})," - vue - vuex - vue-router"]}),"\n",(0,r.jsx)(e.p,{children:"使用webpack的项目： - ElementUI - mint-ui - vue-cli"}),"\n",(0,r.jsx)(e.p,{children:"从上面使用场景可以大概分析出，Rollup 偏向应用于js库，webpack 偏向应用于前端工程，UI 库。"}),"\n",(0,r.jsx)(e.p,{children:"如果你的应用场景中只是 js 代码，希望做 ES 转换，模块解析，可以使用 Rollup。 如果你的场景中涉及到 css、html，涉及到复杂的代码拆分合并，建议使用 webpack。"}),"\n",(0,r.jsxs)(e.h3,{id:"介绍",children:["介绍",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#介绍",children:"#"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"esModule打包器"}),"\n",(0,r.jsx)(e.li,{children:"将项目中散落的小模块打包成整块的代码，让划分的小模块可以更好地运行在浏览器环境和nodejs环境"}),"\n",(0,r.jsx)(e.li,{children:"作用： 与webpack非常类似"}),"\n",(0,r.jsx)(e.li,{children:"对比： Rollup相对于webpack更小巧，webpack可以完成项目中各种工程化的需求，而Rollup仅仅是一款ESM（ESmodule）打包器，没有任何其它的功能。 例如，webpack中有HMR（热替换功能），Rollup中没有"}),"\n",(0,r.jsx)(e.li,{children:"Rollup的意义： 提供一个充分利用ESM各项特性的高效打包器。利用ESmodule的各种特性构建出结构比较扁平，性能比较出众的类库。"}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"注意点",children:["注意点",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#注意点",children:"#"})]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"type字段的产生用于定义package.json文件和该文件所在目录根目录中.js文件和无拓展名文件的处理方式。值为'module'则当作es模块处理；值为'commonjs'则被当作commonJs模块处理。"}),"\n",(0,r.jsx)(e.li,{children:"目前node默认的是如果pacakage.json没有定义type字段，则按照commonJs规范处理。"}),"\n",(0,r.jsx)(e.li,{children:"node官方建议包的开发者明确指定package.json中type字段的值。"}),"\n",(0,r.jsx)(e.li,{children:"无论package.json中的type字段为何值，.mjs的文件都按照es模块来处理，.cjs的文件都按照commonJs模块来处理。"}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"执行build的时候，因为rollup.config.js使用的是es模块语法，package.json不声明type值为module，会报错，或者把rollup.config.js改成rollup.config.mjs再执行。"}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"安装",children:["安装",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#安装",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"初始化项目包：npm init"}),"\n",(0,r.jsx)(e.p,{children:"安装 rollup：npm i rollup -D"}),"\n",(0,r.jsx)(e.p,{children:"创建 rollup 配置文件：rollup.config.js"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'// rollup.config.js\nexport default {\n  input: "", // 入口\n  output: {}, // 出口\n  external: [], // 外部依赖的配置\n  plugins: [], // 各种插件使用的配置\n  global: {}, // 全局变量的配置\n};\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"使用",children:["使用",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#使用",children:"#"})]}),"\n",(0,r.jsxs)(e.h3,{id:"input",children:["input",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#input",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"入口的配置字段为 input"}),"\n",(0,r.jsxs)(e.h3,{id:"单入口配置",children:["单入口配置",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#单入口配置",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"单个入口的配置只需要为 input 指定一个入口文件即可"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"export default {\n  input:'./src/main.js', // 入口文件\n  output:{\n    file:'./dist/bundle.js', // 输出文件\n    format: 'es', // 输出格式 amd / es / cjs / iife / umd / system\n    name:'func',  // 当format为iife和umd时必须提供，将作为全局变量挂在window(浏览器环境)下：window.A=...\n    sourcemap:true  // 生成bundle.js.map文件，方便调试\n  }\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"多入口配置",children:["多入口配置",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#多入口配置",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"多个入口配置需要将导出的配置设置为数组，数组的项为一个对象，每一个对象都可以单独配置。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"export default [\n  {\n    input:'./src/main.js', // 入口文件\n    output:{\n      file:'./dist/bundle.js', // 输出文件\n      format: 'es', // 输出格式 amd / es / cjs / iife / umd\n      name:'func',  // 当format为iife和umd时必须提供，将作为全局变量挂在window(浏览器环境)下：window.A=...\n      sourcemap:true  // 生成bundle.js.map文件，方便调试\n    }\n  },\n  {\n    input:'./src/main2.js',\n    output:{\n      file:'./dist/bundle2.js',\n      format: 'es',\n      name:'func',\n      sourcemap:true\n    }\n  },\n]\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"output",children:["output",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#output",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"出口的配置字段为 output，一个出口时output使用对象形式，多个出口使用数组形式。"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"file：出口的地址以及打包的名字"}),"\n",(0,r.jsx)(e.li,{children:"format：打包的格式，格式分为五种分别为：amd / es / cjs / iife / umd"}),"\n",(0,r.jsx)(e.li,{children:"name：当 format 为 iife 和 umd 时必须提供，将作为全局变量挂在window(浏览器环境)下"}),"\n",(0,r.jsx)(e.li,{children:"sourcemap：生成 main.map.js 文件，方便调试"}),"\n",(0,r.jsx)(e.li,{children:"banner：为打包好的文件添加注释，注释的位置在整个文件的首行"}),"\n",(0,r.jsx)(e.li,{children:"footer：为打包好的文件添加注释，注释的位置在整个文件的尾行"}),"\n",(0,r.jsx)(e.li,{children:"intro：为打包好的文件添加注释，注释的位置在打包数据内容的头部"}),"\n",(0,r.jsx)(e.li,{children:"outro：为打包好的文件添加注释，注释的位置在打包数据内容的末尾"}),"\n"]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"banner、footer、intro、outro 可以不用配置在出口中。"}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"单出口配置",children:["单出口配置",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#单出口配置",children:"#"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"export default {\n  input:'./src/main.js', // 入口\n  output: {\n    file:'./dist/bundle.js', // 出口\n    format: 'es',\n    name:'func',\n    sourcemap:true,\n    banner: '// qqqqq',\n  },\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"多出口配置",children:["多出口配置",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#多出口配置",children:"#"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"export default {\n  input:'./src/main.js', // 入口\n  output: [\n    {\n      file:'./dist/bundle.js', // 出口\n      format: 'es',\n      name:'func',\n      sourcemap:true,\n      banner: '// qqqqq',\n    },\n    {\n      file:'./dist/bundle2.js', // 出口\n      format: 'es',\n      name:'func',\n      sourcemap:true,\n      banner: '// cccc',\n    },\n  ]\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"external",children:["external",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#external",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"需要保持某些库外部引用状态，这时需要使用 external 属告诉 rollup.js 哪些是外部的类库，不需要将这些外部类库进行打包。"}),"\n",(0,r.jsx)(e.p,{children:"确保外部化处理不想打包进库的依赖。"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"import resolve from \"@rollup/plugin-node-resolve\";\n\nexport default {\n  input:'./src/main.js', // 入口\n  output: {\n    file:'./dist/bundle.js', // 出口\n    format: 'es',\n    name:'func',\n    sourcemap:true,\n    banner: '// qqqqq',\n  },\n  plugins: [resolve()],\n  external: [\"the-answer\"],\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"main.js 源文件代码"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"import answer from 'the-answer';\n\nconsole.log('answer', answer)\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"未保持外部引入打包后代码"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"var index = 42;\n\nconsole.log('answer', index);\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"保持外部引入打包后代码"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"import answer from 'the-answer';\n\nconsole.log('answer', answer);\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"plugins",children:["plugins",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#plugins",children:"#"})]}),"\n",(0,r.jsxs)(e.h3,{id:"node模块的引用",children:["node模块的引用",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#node模块的引用",children:"#"})]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"在某些时候，项目可能取决于从NPM安装到node_modules文件夹中的软件包。 与Webpack和Browserify等其他捆绑软件不同，Rollup不知道如何开箱即用、如何处理这些依赖项，因此需要添加一些插件配置。\nrollup.js编译源码中的模块引用默认只支持 ES6+的模块方式import/export。然而大量的npm模块是基于CommonJS模块方式，这就导致了大量 npm 模块不能直接编译使用，导致打包报错。所以辅助rollup.js编译支持 npm模块和CommonJS模块方式的插件就应运而生。"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-text",children:"npm install @rollup/plugin-node-resolve @rollup/plugin-commonjs @rollup/plugin-json --save-dev\n"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"@rollup/plugin-node-resolve 插件允许我们加载第三方模块"}),"\n",(0,r.jsx)(e.li,{children:"@rollup/plugin-commonjs 插件将它们转换为ES6版本"}),"\n",(0,r.jsx)(e.li,{children:"@rollup/plugin-json 支持导入json，没有 json 插件的支持我们在导入 json 文件时会报错"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"// rollup.config.js 配置\nimport resolve from \"@rollup/plugin-node-resolve\";\nimport commonjs from '@rollup/plugin-commonjs';\nimport json from '@rollup/plugin-json';\n\nexport default {\n  input:'./src/main.js', // 入口\n  output: {\n    file:'./dist/bundle.js', // 出口\n    format: 'es',\n  },\n  plugins: [\n    commonjs({\n      include: /node_modules/\n    }),\n    json(),\n    resolve()\n  ],\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"使用第三方库 lodash"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"// npm install lodash\n\n// main.js引入lodash\nimport _ from 'lodash';\n\nconsole.log(_.concat([1, 2], 3, [4, 5]));\n"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"执行npm run build 后会看到打包后的文件多了很多内容，这些代码就是ladash的代码，被打包整合进来了。"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"补充"})}),"\n",(0,r.jsxs)(e.p,{children:["如果不想第三方库被打包进来，而可以在外面引入，配合使用的话，可以在",(0,r.jsx)(e.code,{children:"rollup.config.js"}),"中配置 ",(0,r.jsx)(e.code,{children:"external: ['lodash']"}),"。"]}),"\n",(0,r.jsxs)(e.h3,{id:"支持别名",children:["支持别名",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#支持别名",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["安装",(0,r.jsx)(e.code,{children:"@rollup/plugin-alias"}),"插件，插件提供了为模块起别名的功能。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"npm i @rollup/plugin-alias --save-dev\n// rollup.config.js 配置\n\nimport resolve from \"@rollup/plugin-node-resolve\";\nimport commonjs from '@rollup/plugin-commonjs';\nimport json from '@rollup/plugin-json';\nimport alias from \"@rollup/plugin-alias\";\nimport path from 'path'\nimport { fileURLToPath } from 'url';\n\n// __filename包含当前模块文件的绝对路径\nconst __filename = fileURLToPath(import.meta.url);\n\n/**\n内部变量:\n\nES6 模块应该是通用的，同一个模块不用修改，就可以用在浏览器环境和服务器环境。为了达到这个目标，Node.js 规定 ES6 模块之中不能使用 CommonJS 模块的特有的一些内部变量。\n\n首先，就是this关键字。ES6 模块之中，顶层的this指向undefined；CommonJS 模块的顶层this指向当前模块，这是两者的一个重大差异。\n\n其次，以下这些顶层变量在 ES6 模块之中都是不存在的。\n\narguments\nrequire\nmodule\nexports\n__filename\n__dirname\n\n* 通过使用某些函数创建一个自定义__dirname变量来修复“__dirname is not defined in ES module scope”错误。\n* 该变量就像全局变量一样工作，直接包含文件当前工作的完整路径。\n* __dirname包含当前模块文件目录的绝对路径。\n*/\nconst __dirname = path.dirname(__filename);\n\nconst pathResolve = (p) => path.resolve(__dirname, p);\n\nexport default {\n  input:'./src/main.js', // 入口\n  output: {\n    file:'./dist/bundle.js', // 出口\n    format: 'es',\n    name:'func',\n  },\n  plugins: [\n    commonjs({\n      include: /node_modules/\n    }),\n    json(),\n    resolve(),\n    alias({\n      resolve: [\".jsx\", \".js\"], // 可选，默认情况下这只会查找 .js 文件或文件夹\n      entries: {\n        \"@\": pathResolve(\"src\"),\n        _: __dirname,\n      },\n    }),\n  ],\n  external: ['lodash', 'jquery'],\n}\n// main.js中使用别名\n\nimport { name } from '@/modules/myModule';\nconsole.log('hello ' + name);\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"代码压缩",children:["代码压缩",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码压缩",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["使用",(0,r.jsx)(e.code,{children:"@rollup/plugin-terser"}),"进行打包代码压缩。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"npm i @rollup/plugin-terser --save-dev\n// rollup.config.js 配置\nimport terser from '@rollup/plugin-terser';\n\nexport default {\n  plugins: [\n    terser(),\n  ],\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"开启本地服务器--热更新",children:["开启本地服务器 & 热更新",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#开启本地服务器--热更新",children:"#"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"rollup-plugin-serve"})," 开启本地服务器"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"rollup-plugin-livereload"})," 开启热更新，实时刷新页面"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'npm i rollup-plugin-serve rollup-plugin-livereload --save-dev\n// rollup.config.js 配置\nimport serve from "rollup-plugin-serve";\nimport livereload from "rollup-plugin-livereload";\n\nexport default {\n  plugins: [\n    serve({ \n      open: true, // 是否打开浏览器\n      contentBase: "./", // 入口 html 文件位置\n      historyApiFallback: true, // 设置为 true 返回 index.html 而不是 404\n      host: "localhost", // \n      port: 3000 // 端口号\n    }),\n    livereload(),\n  ],\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"package.json"}),"文件配置启动脚本命令"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'{\n  "scripts": {\n    "dev": "rollup -cw"\n  },\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"index.html"}),"文件中引入",(0,r.jsx)(e.code,{children:"bundle.js"}),"打包文件"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-html",children:'<script src="./dist/bundle.js"><\/script>\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"eslint",children:["eslint",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#eslint",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"@rollup/plugin-eslint"})," 使用代码检查功能"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-text",children:"npm i @rollup/plugin-eslint --save-dev\n"})}),"\n",(0,r.jsxs)(e.p,{children:["需要创建",(0,r.jsx)(e.code,{children:".eslintrc"}),"文件配置 eslint 规则"]}),"\n",(0,r.jsxs)(e.p,{children:["1、使用",(0,r.jsx)(e.code,{children:".eslintrc.js"}),"文件格式，如果",(0,r.jsx)(e.code,{children:"package.json"}),"中配置",(0,r.jsx)(e.code,{children:'"type": "module"'}),"，则需要更改文件后缀名为",(0,r.jsx)(e.code,{children:".eslintrc.cjs"}),"。"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'// .eslintrc.cjs\nmodule.exports = {\n  "root": true,\n  "parserOptions": {\n    "ecmaVersion": 6,       // 支持es6\n    "sourceType": "module"  // 使用 es6 模块化\n  },\n  "env": { // 设置环境\n    "browser": true,   // 支持浏览器环境： 能够使用window上的全局变量\n    "node": true       // 支持服务器环境:  能够使用node上global的全局变量\n  },\n  "extends": "eslint:recommended", // 使用 eslint 推荐的默认规则 https://cn.eslint.org/docs/rules/\n  "globals": {  // 声明使用的全局变量, 这样即使没有定义也不会报错了\n    "$": "readonly" // $ 只读变量\n  },\n  "rules": {  // eslint检查的规则  0 忽略 1 警告 2 错误\n    "no-console": 0,    // 不检查 console\n    "eqeqeq": 1,    // 用 == 而不用 === 就警告\n    "no-alert": 2 // 不能使用 alert\n  }\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["2、使用",(0,r.jsx)(e.code,{children:".eslintrc.json"}),"文件格式"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-text",children:'// .eslintrc.json\n{\n  "root": true,\n  "parserOptions": {\n    "ecmaVersion": 6,       // 支持es6\n    "sourceType": "module"  // 使用 es6 模块化\n  },\n  "env": { // 设置环境\n    "browser": true,   // 支持浏览器环境： 能够使用window上的全局变量\n    "node": true       // 支持服务器环境:  能够使用node上global的全局变量\n  },\n  "extends": "eslint:recommended", // 使用 eslint 推荐的默认规则 https://cn.eslint.org/docs/rules/\n  "globals": {  // 声明使用的全局变量, 这样即使没有定义也不会报错了\n    "$": "readonly" // $ 只读变量\n  },\n  "rules": {  // eslint检查的规则  0 忽略 1 警告 2 错误\n    "no-console": 0,    // 不检查 console\n    "eqeqeq": 1,    // 用 == 而不用 === 就警告\n    "no-alert": 2 // 不能使用 alert\n  }\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["在",(0,r.jsx)(e.code,{children:"rollup.config.js"}),"中配置eslint插件"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"// rollup.config.js\nimport eslint from \"@rollup/plugin-eslint\";\n\nexport default {\n  plugins: [\n    eslint({\n      include: ['src/**/*.js'] // 需要检查的部分\n    })\n  ],\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"ESLint 支持几种格式的配置文件："}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"JavaScript - 使用 .eslintrc.js 然后输出一个配置对象。"}),"\n",(0,r.jsx)(e.li,{children:"YAML - 使用 .eslintrc.yaml 或 .eslintrc.yml 去定义配置的结构。"}),"\n",(0,r.jsx)(e.li,{children:"JSON - 使用 .eslintrc.json 去定义配置的结构，ESLint 的 JSON 文件允许 JavaScript 风格的注释。"}),"\n",(0,r.jsx)(e.li,{children:"(弃用) - 使用 .eslintrc，可以使 JSON 也可以是 YAML。"}),"\n",(0,r.jsx)(e.li,{children:"package.json - 在 package.json 里创建一个 eslintConfig属性，在那里定义你的配置。"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"如果同一个目录下有多个配置文件，ESLint 只会使用一个。优先级顺序如下："}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:".eslintrc.js"}),"\n",(0,r.jsx)(e.li,{children:".eslintrc.yaml"}),"\n",(0,r.jsx)(e.li,{children:".eslintrc.yml"}),"\n",(0,r.jsx)(e.li,{children:".eslintrc.json"}),"\n",(0,r.jsx)(e.li,{children:".eslintrc"}),"\n",(0,r.jsx)(e.li,{children:"package.json"}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"tree-shaking",children:["tree-shaking",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#tree-shaking",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"tree shaking是rollup提出的，这也是rollup一个非常重要的feature，那什么是tree shaking，rollup的解释是在构建代码时，在使用ES6模块化的代码中，会对你的代码进行静态分析，只打包使用到的代码。这样的好处是减少代码的体积。"}),"\n",(0,r.jsx)(e.p,{children:"与 Webpack 不同的是，Rollup 不仅仅针对模块进行依赖分析，它的分析流程如下："}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"从入口文件开始，组织依赖关系，并按文件生成 Module"}),"\n",(0,r.jsx)(e.li,{children:"生成抽象语法树（Acorn），建立语句间的关联关系"}),"\n",(0,r.jsx)(e.li,{children:"为每个节点打标，标记是否被使用"}),"\n",(0,r.jsx)(e.li,{children:"生成代码（MagicString+ position）去除无用代码"}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"设置环境变量node_env",children:["设置环境变量NODE_ENV",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#设置环境变量node_env",children:"#"})]}),"\n",(0,r.jsxs)(e.h3,{id:"windows",children:["windows",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#windows",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"set NODE_ENV=production"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'"scripts": {\n    "build": "set NODE_ENV=production && rollup -c",\n    "dev": "set NODE_ENV=development && rollup -wc",\n}\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"linux--mac",children:["linux & mac",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#linux--mac",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"export NODE_ENV=production"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'"scripts": {\n    "dev": "NODE_ENV=development rollup -wc",\n    "build": "NODE_ENV=production rollup -c",\n}\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"跨平台设置",children:["跨平台设置",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#跨平台设置",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"依赖 cross-env 模块"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'npm install -D cross-env\n"scripts": {\n    "dev": "cross-env NODE_ENV=development rollup -wc",\n    "build": "cross-env NODE_ENV=production rollup -c",\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"根据环境配置插件"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'const NODE_ENV = process.env.NODE_ENV; // 环境变量\nconst isProd = NODE_ENV === \'production\';\n\nlet envPlugins = []\nif (isProd) {\n  envPlugins = [\n    terser(),\n  ]\n} else {\n  envPlugins = [\n    serve({ \n      open: true, // 是否打开浏览器\n      contentBase: "./", // 入口 html 文件位置\n      historyApiFallback: true, // 设置为 true 返回 index.html 而不是 404\n      host: "localhost", // \n      port: 3000 // 端口号\n    }),\n    livereload(),\n  ]\n}\n\nexport default {\n  plugins: [\n    ...envPlugins,\n  ],\n}\n'})}),"\n",(0,r.jsxs)(e.h3,{id:"参考链接",children:["参考链接",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#参考链接",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://zhuanlan.zhihu.com/p/608457915",target:"_blank",rel:"noopener noreferrer",children:"https://zhuanlan.zhihu.com/p/608457915"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://zhuanlan.zhihu.com/p/340255085",target:"_blank",rel:"noopener noreferrer",children:"https://zhuanlan.zhihu.com/p/340255085"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://juejin.cn/post/6968839519353176077",target:"_blank",rel:"noopener noreferrer",children:"https://juejin.cn/post/6968839519353176077"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://juejin.cn/post/6844903596970999815",target:"_blank",rel:"noopener noreferrer",children:"https://juejin.cn/post/6844903596970999815"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://link.zhihu.com/?target=http%3A//huangxuan.me/js-module-7day/%23/",target:"_blank",rel:"noopener noreferrer",children:"模块化规范"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://link.zhihu.com/?target=https%3A//www.qiufeng.blue/webpack/module.html%23es-modules",target:"_blank",rel:"noopener noreferrer",children:"模块化系列"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://link.zhihu.com/?target=https%3A//github.com/seajs/seajs/issues/588",target:"_blank",rel:"noopener noreferrer",children:"seajs-模块化历史讨论"})})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(i,{...n})}):i(n)}let o=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["rollup%2F29-rollup%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3.md"]={toc:[{text:"使用详解",id:"使用详解",depth:2},{text:"前言",id:"前言",depth:3},{text:"介绍",id:"介绍",depth:3},{text:"注意点",id:"注意点",depth:3},{text:"安装",id:"安装",depth:3},{text:"使用",id:"使用",depth:3},{text:"input",id:"input",depth:3},{text:"单入口配置",id:"单入口配置",depth:3},{text:"多入口配置",id:"多入口配置",depth:3},{text:"output",id:"output",depth:3},{text:"单出口配置",id:"单出口配置",depth:3},{text:"多出口配置",id:"多出口配置",depth:3},{text:"external",id:"external",depth:3},{text:"plugins",id:"plugins",depth:3},{text:"node模块的引用",id:"node模块的引用",depth:3},{text:"支持别名",id:"支持别名",depth:3},{text:"代码压缩",id:"代码压缩",depth:3},{text:"开启本地服务器 & 热更新",id:"开启本地服务器--热更新",depth:3},{text:"eslint",id:"eslint",depth:3},{text:"tree-shaking",id:"tree-shaking",depth:3},{text:"设置环境变量NODE_ENV",id:"设置环境变量node_env",depth:3},{text:"windows",id:"windows",depth:3},{text:"linux & mac",id:"linux--mac",depth:3},{text:"跨平台设置",id:"跨平台设置",depth:3},{text:"参考链接",id:"参考链接",depth:3}],title:"rollup打包工具基础配置使用详解",frontmatter:{}}}}]);