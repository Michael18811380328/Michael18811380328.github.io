"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["1397"],{3913:function(e,n,s){s.r(n),s.d(n,{default:function(){return i}});var c=s(6469),d=s(8809);function r(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h3:"h3",ul:"ul",li:"li",pre:"pre",h4:"h4",img:"img",strong:"strong",blockquote:"blockquote"},(0,d.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"带你深度解锁webpack系列基础篇-01",children:["带你深度解锁Webpack系列(基础篇) 01",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#带你深度解锁webpack系列基础篇-01",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"统计信息：字数 33009  阅读67分钟"}),"\n",(0,c.jsx)(n.p,{children:"create time 2024-04-12"}),"\n",(0,c.jsx)(n.p,{children:"last modify time 2024-04-12"}),"\n",(0,c.jsx)(n.p,{children:"掘金"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.a,{href:"https://juejin.cn/user/3368559358523944/posts",target:"_blank",rel:"noopener noreferrer",children:"无名之苝"})}),"\n",(0,c.jsx)(n.p,{children:"2020-03-0947,221阅读15分钟"}),"\n",(0,c.jsxs)(n.p,{children:["三篇长文带你解锁 ",(0,c.jsx)(n.code,{children:"Webpack"})," ，希望读完这三篇文章，你能够对 ",(0,c.jsx)(n.code,{children:"webpack"})," 的各项配置有一个更为清晰的认识。"]}),"\n",(0,c.jsxs)(n.h3,{id:"1webpack-是什么",children:["1.webpack 是什么？",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1webpack-是什么",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"webpack"})," 是一个现代 ",(0,c.jsx)(n.code,{children:"JavaScript"})," 应用程序的静态模块打包器，当 ",(0,c.jsx)(n.code,{children:"webpack"})," 处理应用程序时，会递归构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将这些模块打包成一个或多个 ",(0,c.jsx)(n.code,{children:"bundle"}),"。"]}),"\n",(0,c.jsxs)(n.h3,{id:"2webpack-的核心概念",children:["2.webpack 的核心概念",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2webpack-的核心概念",children:"#"})]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"entry: 入口"}),"\n",(0,c.jsx)(n.li,{children:"output: 输出"}),"\n",(0,c.jsx)(n.li,{children:"loader: 模块转换器，用于把模块原内容按照需求转换成新内容"}),"\n",(0,c.jsx)(n.li,{children:"插件(plugins): 扩展插件，在webpack构建流程中的特定时机注入扩展逻辑来改变构建结果或做你想要做的事情"}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"3初始化项目",children:["3.初始化项目",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3初始化项目",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["新建一个文件夹，如: ",(0,c.jsx)(n.code,{children:"webpack-first"})," (当然，你可以使用任意一个你喜欢的项目名)。推荐大家参考本文一步一步进行配置，不要总是在网上找什么最佳配置，你掌握了",(0,c.jsx)(n.code,{children:"webpack"}),"之后，根据自己的需求配置出来的，就是最佳配置。"]}),"\n",(0,c.jsxs)(n.p,{children:["本篇文章对应的项目地址(编写本文时使用): ",(0,c.jsx)(n.a,{href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FYvetteLau%2Fwebpack%2Ftree%2Fmaster%2Fwebpack-first",target:"_blank",rel:"noopener noreferrer",children:"github.com/YvetteLau/w…"})]}),"\n",(0,c.jsxs)(n.p,{children:["使用 ",(0,c.jsx)(n.code,{children:"npm init -y"})," 进行初始化(也可以使用 ",(0,c.jsx)(n.code,{children:"yarn"}),")。"]}),"\n",(0,c.jsxs)(n.p,{children:["要使用 ",(0,c.jsx)(n.code,{children:"webpack"}),"，那么必然需要安装 ",(0,c.jsx)(n.code,{children:"webpack"}),"、",(0,c.jsx)(n.code,{children:"webpack-cli"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm install webpack webpack-cli -D\n"})}),"\n",(0,c.jsxs)(n.p,{children:["鉴于前端技术变更迅速，祭出本篇文章基于 ",(0,c.jsx)(n.code,{children:"webpack"})," 的版本号:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"├── webpack@4.41.5 \n└── webpack-cli@3.3.10 \n"})}),"\n",(0,c.jsxs)(n.p,{children:["从 ",(0,c.jsx)(n.code,{children:"wepack V4.0.0"})," 开始， ",(0,c.jsx)(n.code,{children:"webpack"})," 是开箱即用的，在不引入任何配置文件的情况下就可以使用。"]}),"\n",(0,c.jsxs)(n.p,{children:["新建 ",(0,c.jsx)(n.code,{children:"src/index.js"})," 文件，我们在文件中随便写点什么:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"//index.js\nclass Animal {\n    constructor(name) {\n        this.name = name;\n    }\n    getName() {\n        return this.name;\n    }\n}\n\nconst dog = new Animal('dog');\n"})}),"\n",(0,c.jsxs)(n.p,{children:["使用 ",(0,c.jsx)(n.code,{children:"npx webpack --mode=development"})," 进行构建，默认是 ",(0,c.jsx)(n.code,{children:"production"})," 模式，我们为了更清楚得查看打包后的代码，使用 ",(0,c.jsx)(n.code,{children:"development"})," 模式。"]}),"\n",(0,c.jsxs)(n.p,{children:["可以看到项目下多了个 ",(0,c.jsx)(n.code,{children:"dist"})," 目录，里面有一个打包出来的文件 ",(0,c.jsx)(n.code,{children:"main.js"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"webpack"})," 有默认的配置，如默认的入口文件是 ",(0,c.jsx)(n.code,{children:"./src"}),"，默认打包到",(0,c.jsx)(n.code,{children:"dist/main.js"}),"。更多的默认配置可以查看: ",(0,c.jsx)(n.code,{children:"node_modules/webpack/lib/WebpackOptionsDefaulter.js"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["查看 ",(0,c.jsx)(n.code,{children:"dist/main.js"})," 文件，可以看到，",(0,c.jsx)(n.code,{children:"src/index.js"})," 并没有被转义为低版本的代码，这显然不是我们想要的。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'{\n    "./src/index.js":\n        (function (module, exports) {\n\n            eval("class Animal {\\n    constructor(name) {\\n        this.name = name;\\n    }\\n    getName() {\\n        return this.name;\\n    }\\n}\\n\\nconst dog = new Animal(\'dog\');\\n\\n//# sourceURL=webpack:///./src/index.js?");\n\n        })\n}\n'})}),"\n",(0,c.jsxs)(n.h3,{id:"4将js转义为低版本",children:["4.将JS转义为低版本",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4将js转义为低版本",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["前面我们说了 ",(0,c.jsx)(n.code,{children:"webpack"})," 的四个核心概念，其中之一就是 ",(0,c.jsx)(n.code,{children:"loader"}),"，",(0,c.jsx)(n.code,{children:"loader"})," 用于对源代码进行转换，这正是我们现在所需要的。"]}),"\n",(0,c.jsxs)(n.p,{children:["将JS代码向低版本转换，我们需要使用 ",(0,c.jsx)(n.code,{children:"babel-loader"}),"。"]}),"\n",(0,c.jsxs)(n.h4,{id:"babel-loader",children:["babel-loader",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#babel-loader",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["首先安装一下 ",(0,c.jsx)(n.code,{children:"babel-loader"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm install babel-loader -D\n"})}),"\n",(0,c.jsxs)(n.p,{children:["此外，我们还需要配置 ",(0,c.jsx)(n.code,{children:"babel"}),"，为此我们安装一下以下依赖:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm install @babel/core @babel/preset-env @babel/plugin-transform-runtime -D\n\nnpm install @babel/runtime @babel/runtime-corejs3\n"})}),"\n",(0,c.jsxs)(n.p,{children:["对babel7配置不熟悉的小伙伴，可以阅读一下这篇文章: ",(0,c.jsx)(n.a,{href:"https://juejin.cn/post/6844904008679686152",target:"_blank",rel:"noopener noreferrer",children:"不可错过的 Babel7 知识"})]}),"\n",(0,c.jsxs)(n.p,{children:["新建 ",(0,c.jsx)(n.code,{children:"webpack.config.js"}),"，如下:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"//webpack.config.js\nmodule.exports = {\n    module: {\n        rules: [\n            {\n                test: /\\.jsx?$/,\n                use: ['babel-loader'],\n                exclude: /node_modules/ //排除 node_modules 目录\n            }\n        ]\n    }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["建议给 ",(0,c.jsx)(n.code,{children:"loader"})," 指定 ",(0,c.jsx)(n.code,{children:"include"})," 或是 ",(0,c.jsx)(n.code,{children:"exclude"}),"，指定其中一个即可，因为 ",(0,c.jsx)(n.code,{children:"node_modules"})," 目录通常不需要我们去编译，排除后，有效提升编译效率。"]}),"\n",(0,c.jsxs)(n.p,{children:["这里，我们可以在 ",(0,c.jsx)(n.code,{children:".babelrc"})," 中编写 ",(0,c.jsx)(n.code,{children:"babel"})," 的配置，也可以在 ",(0,c.jsx)(n.code,{children:"webpack.config.js"})," 中进行配置。"]}),"\n",(0,c.jsxs)(n.h4,{id:"创建一个-babelrc",children:["创建一个 .babelrc",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建一个-babelrc",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"配置如下："}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'{\n    "presets": ["@babel/preset-env"],\n    "plugins": [\n        [\n            "@babel/plugin-transform-runtime",\n            {\n                "corejs": 3\n            }\n        ]\n    ]\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["现在，我们重新执行  ",(0,c.jsx)(n.code,{children:"npx webpack --mode=development"}),"，查看 ",(0,c.jsx)(n.code,{children:"dist/main.js"}),"，会发现已经被编译成了低版本的JS代码。"]}),"\n",(0,c.jsxs)(n.h4,{id:"在webpack中配置-babel",children:["在webpack中配置 babel",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#在webpack中配置-babel",children:"#"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'//webpack.config.js\nmodule.exports = {\n    // mode: \'development\',\n    module: {\n        rules: [\n            {\n                test: /\\.jsx?$/,\n                use: {\n                    loader: \'babel-loader\',\n                    options: {\n                        presets: ["@babel/preset-env"],\n                        plugins: [\n                            [\n                                "@babel/plugin-transform-runtime",\n                                {\n                                    "corejs": 3\n                                }\n                            ]\n                        ]\n                    }\n                },\n                exclude: /node_modules/\n            }\n        ]\n    }\n}\n'})}),"\n",(0,c.jsx)(n.p,{children:"这里有几点需要说明："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"loader"})," 需要配置在 ",(0,c.jsx)(n.code,{children:"module.rules"})," 中，",(0,c.jsx)(n.code,{children:"rules"})," 是一个数组。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"loader"})," 的格式为:"]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"{\n    test: /\\.jsx?$/,//匹配规则\n    use: 'babel-loader'\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"或者也可以像下面这样:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"//适用于只有一个 loader 的情况\n{\n    test: /\\.jsx?$/,\n    loader: 'babel-loader',\n    options: {\n        //...\n    }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"test"})," 字段是匹配规则，针对符合规则的文件进行处理。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"use"})," 字段有几种写法"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["可以是一个字符串，例如上面的 ",(0,c.jsx)(n.code,{children:"use: 'babel-loader'"})]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"use"})," 字段可以是一个数组，例如处理CSS文件是，",(0,c.jsx)(n.code,{children:"use: ['style-loader', 'css-loader']"})]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"use"})," 数组的每一项既可以是字符串也可以是一个对象，当我们需要在",(0,c.jsx)(n.code,{children:"webpack"})," 的配置文件中对 ",(0,c.jsx)(n.code,{children:"loader"})," 进行配置，就需要将其编写为一个对象，并且在此对象的 ",(0,c.jsx)(n.code,{children:"options"})," 字段中进行配置，如："]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"rules: [\n    {\n        test: /\\.jsx?$/,\n        use: {\n            loader: 'babel-loader',\n            options: {\n                presets: [\"@babel/preset-env\"]\n            }\n        },\n        exclude: /node_modules/\n    }\n]\n"})}),"\n",(0,c.jsxs)(n.p,{children:["上面我们说了如何将JS的代码编译成向下兼容的代码，当然你可以还需要一些其它的 ",(0,c.jsx)(n.code,{children:"babel"})," 的插件和预设，例如 ",(0,c.jsx)(n.code,{children:"@babel/preset-react"}),"，",(0,c.jsx)(n.code,{children:"@babel/plugin-proposal-optional-chaining"})," 等，不过，",(0,c.jsx)(n.code,{children:"babel"})," 的配置并非本文的重点，我们继续往下。"]}),"\n",(0,c.jsxs)(n.p,{children:["不要说细心的小伙伴了，即使是粗心的小伙伴肯定也发现了，我们在使用 ",(0,c.jsx)(n.code,{children:"webpack"})," 进行打包的时候，一直运行的都是 ",(0,c.jsx)(n.code,{children:"npx webpack --mode=development"})," 是否可以将 ",(0,c.jsx)(n.code,{children:"mode"})," 配置在 ",(0,c.jsx)(n.code,{children:"webpack.config.js"})," 中呢？显然是可以的。"]}),"\n",(0,c.jsxs)(n.h3,{id:"5mode",children:["5.mode",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5mode",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["将 ",(0,c.jsx)(n.code,{children:"mode"})," 增加到 ",(0,c.jsx)(n.code,{children:"webpack.config.js"})," 中:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'module.exports = {\n    //....\n    mode: "development",\n    module: {\n        //...\n    }\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"mode"})," 配置项，告知 ",(0,c.jsx)(n.code,{children:"webpack"})," 使用相应模式的内置优化。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"mode"})," 配置项，支持以下两个配置:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"development"}),"：将 ",(0,c.jsx)(n.code,{children:"process.env.NODE_ENV"})," 的值设置为 ",(0,c.jsx)(n.code,{children:"development"}),"，启用 ",(0,c.jsx)(n.code,{children:"NamedChunksPlugin"})," 和 ",(0,c.jsx)(n.code,{children:"NamedModulesPlugin"})]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"production"}),"：将 ",(0,c.jsx)(n.code,{children:"process.env.NODE_ENV"})," 的值设置为 ",(0,c.jsx)(n.code,{children:"production"}),"，启用 ",(0,c.jsx)(n.code,{children:"FlagDependencyUsagePlugin"}),", ",(0,c.jsx)(n.code,{children:"FlagIncludedChunksPlugin"}),", ",(0,c.jsx)(n.code,{children:"ModuleConcatenationPlugin"}),", ",(0,c.jsx)(n.code,{children:"NoEmitOnErrorsPlugin"}),", ",(0,c.jsx)(n.code,{children:"OccurrenceOrderPlugin"}),", ",(0,c.jsx)(n.code,{children:"SideEffectsFlagPlugin"})," 和 ",(0,c.jsx)(n.code,{children:"UglifyJsPlugin"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["现在，我们直接使用 ",(0,c.jsx)(n.code,{children:"npx webpack"})," 进行编译即可。"]}),"\n",(0,c.jsxs)(n.h3,{id:"6在浏览器中查看页面",children:["6.在浏览器中查看页面",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6在浏览器中查看页面",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"搞了这么久，还不能在浏览器中查看页面，这显然不能忍！"}),"\n",(0,c.jsxs)(n.p,{children:["查看页面，难免就需要 ",(0,c.jsx)(n.code,{children:"html"})," 文件，有小伙伴可能知道，有时我们会指定打包文件中带有 ",(0,c.jsx)(n.code,{children:"hash"}),"，那么每次生成的 ",(0,c.jsx)(n.code,{children:"js"})," 文件名会有所不同，总不能让我们每次都人工去修改 ",(0,c.jsx)(n.code,{children:"html"}),"，这样不是显得我们很蠢嘛~"]}),"\n",(0,c.jsxs)(n.p,{children:["我们可以使用 ",(0,c.jsx)(n.code,{children:"html-webpack-plugin"})," 插件来帮助我们完成这些事情。"]}),"\n",(0,c.jsx)(n.p,{children:"首先，安装一下插件:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm install html-webpack-plugin -D \n"})}),"\n",(0,c.jsxs)(n.p,{children:["新建 ",(0,c.jsx)(n.code,{children:"public"})," 目录，并在其中新建一个 ",(0,c.jsx)(n.code,{children:"index.html"})," 文件( 文件内容使用 ",(0,c.jsx)(n.code,{children:"html:5"})," 快捷生成即可)"]}),"\n",(0,c.jsxs)(n.p,{children:["修改 ",(0,c.jsx)(n.code,{children:"webpack.config.js"})," 文件。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"//首先引入插件\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n    //...\n    plugins: [\n        //数组 放着所有的webpack插件\n        new HtmlWebpackPlugin({\n            template: './public/index.html',\n            filename: 'index.html', //打包后的文件名\n            minify: {\n                removeAttributeQuotes: false, //是否删除属性的双引号\n                collapseWhitespace: false, //是否折叠空白\n            },\n            // hash: true //是否加上hash，默认是 false\n        })\n    ]\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["此时执行 ",(0,c.jsx)(n.code,{children:"npx webpack"}),"，可以看到 ",(0,c.jsx)(n.code,{children:"dist"})," 目录下新增了 ",(0,c.jsx)(n.code,{children:"index.html"})," 文件，并且其中自动插入了 ",(0,c.jsx)(n.code,{children:"<script>"})," 脚本，引入的是我们打包之后的 js 文件。"]}),"\n",(0,c.jsxs)(n.p,{children:["这里要多说一点点东西，",(0,c.jsx)(n.code,{children:"HtmlWebpackPlugin"})," 还为我们提供了一个 ",(0,c.jsx)(n.code,{children:"config"})," 的配置，这个配置可以说是非常有用了。"]}),"\n",(0,c.jsxs)(n.h4,{id:"html-webpack-plugin-的-config-的妙用",children:["html-webpack-plugin 的 config 的妙用",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#html-webpack-plugin-的-config-的妙用",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["有时候，我们的脚手架不仅仅给自己使用，也许还提供给其它业务使用，",(0,c.jsx)(n.code,{children:"html"})," 文件的可配置性可能很重要，比如：你公司有专门的部门提供M页的公共头部/公共尾部，埋点jssdk以及分享的jssdk等等，但是不是每个业务都需要这些内容。"]}),"\n",(0,c.jsxs)(n.p,{children:["一个功能可能对应多个 ",(0,c.jsx)(n.code,{children:"js"})," 或者是 ",(0,c.jsx)(n.code,{children:"css"})," 文件，如果每次都是业务自行修改 ",(0,c.jsx)(n.code,{children:"public/index.html"})," 文件，也挺麻烦的。首先他们得搞清楚每个功能需要引入的文件，然后才能对 ",(0,c.jsx)(n.code,{children:"index.html"})," 进行修改。"]}),"\n",(0,c.jsxs)(n.p,{children:["此时我们可以增加一个配置文件，业务通过设置 ",(0,c.jsx)(n.code,{children:"true"})," 或 ",(0,c.jsx)(n.code,{children:"false"})," 来选出自己需要的功能，我们再根据配置文件的内容，为每个业务生成相应的 ",(0,c.jsx)(n.code,{children:"html"})," 文件，岂不是美美的。"]}),"\n",(0,c.jsx)(n.p,{children:"Let's Go!"}),"\n",(0,c.jsxs)(n.p,{children:["首先，我们在 ",(0,c.jsx)(n.code,{children:"public"})," 目录下新增一个 ",(0,c.jsx)(n.code,{children:"config.js"})," ( 文件名你喜欢叫什么就叫什么 )，将其内容设置为:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"//public/config.js 除了以下的配置之外，这里面还可以有许多其他配置，例如,pulicPath 的路径等等\nmodule.exports = {\n    dev: {\n        template: {\n            title: '你好',\n            header: false,\n            footer: false\n        }\n    },\n    build: {\n        template: {\n            title: '你好才怪',\n            header: true,\n            footer: false\n        }\n    }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["现在，我们修改下我们的 ",(0,c.jsx)(n.code,{children:"webpack.config.js"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"//webpack.config.js\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst isDev = process.env.NODE_ENV === 'development';\nconst config = require('./public/config')[isDev ? 'dev' : 'build'];\n\nmodue.exports = {\n    //...\n    mode: isDev ? 'development' : 'production'\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './public/index.html',\n            filename: 'index.html', //打包后的文件名\n            config: config.template\n        })\n    ]\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["相应的，我们需要修改下我们的 ",(0,c.jsx)(n.code,{children:"public/index.html"})," 文件(嵌入的js和css并不存在，仅作为示意)："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <meta http-equiv="X-UA-Compatible" content="ie=edge">\n    <% if(htmlWebpackPlugin.options.config.header) { %>\n    <link rel="stylesheet" type="text/css" href="//common/css/header.css">\n    <% } %>\n    <title><%= (htmlWebpackPlugin.options.config.title) %></title>\n</head>\n\n<body>\n</body> \n<% if(htmlWebpackPlugin.options.config.header) { %>\n<script src="//common/header.min.js" type="text/javascript"><\/script> \n<% } %>\n</html>\n'})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"process.env"})," 中默认并没有 ",(0,c.jsx)(n.code,{children:"NODE_ENV"}),"，这里配置下我们的 ",(0,c.jsx)(n.code,{children:"package.json"})," 的 ",(0,c.jsx)(n.code,{children:"scripts"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["为了兼容Windows和Mac，我们先安装一下 ",(0,c.jsx)(n.code,{children:"cross-env"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'npm install cross-env -D\n{\n    "scripts": {\n        "dev": "cross-env NODE_ENV=development webpack",\n        "build": "cross-env NODE_ENV=production webpack"\n    }\n}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["然后我们运行 ",(0,c.jsx)(n.code,{children:"npm run dev"})," 和 运行 ",(0,c.jsx)(n.code,{children:"npm run build"})," ，对比下 ",(0,c.jsx)(n.code,{children:"dist/index.html"})," ，可以看到 ",(0,c.jsx)(n.code,{children:"npm run build"}),"，生成的 ",(0,c.jsx)(n.code,{children:"index.html"})," 文件中引入了对应的 ",(0,c.jsx)(n.code,{children:"css"})," 和 ",(0,c.jsx)(n.code,{children:"js"}),"。并且对应的 ",(0,c.jsx)(n.code,{children:"title"})," 内容也不一样。"]}),"\n",(0,c.jsxs)(n.p,{children:["你说这里是不是非得是用 ",(0,c.jsx)(n.code,{children:"NODE_ENV"})," 去判断？当然不是咯，你写 ",(0,c.jsx)(n.code,{children:"aaa=1"})," ，",(0,c.jsx)(n.code,{children:"aaa=2"})," 都行（当然啦，",(0,c.jsx)(n.code,{children:"webpack.config.js"})," 和 ",(0,c.jsx)(n.code,{children:"scripts"})," 都需要进行相应修改），但是可能会被后面接手的人打死。"]}),"\n",(0,c.jsxs)(n.p,{children:["更多",(0,c.jsx)(n.a,{href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fjantimon%2Fhtml-webpack-plugin%23configuration",target:"_blank",rel:"noopener noreferrer",children:"html-webpack-plugin配置项"})]}),"\n",(0,c.jsxs)(n.h4,{id:"如何在浏览器中实时展示效果",children:["如何在浏览器中实时展示效果",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#如何在浏览器中实时展示效果",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"说了这么多，到现在还没能在浏览器中实时查看效果，是不是已经有点捉急了，先看一下如何实时查看效果吧，不然都不知道自己配得对不对。"}),"\n",(0,c.jsx)(n.p,{children:"话不多说，先装依赖:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm install webpack-dev-server -D\n"})}),"\n",(0,c.jsxs)(n.p,{children:["修改下咱们的 ",(0,c.jsx)(n.code,{children:"package.json"})," 文件的 ",(0,c.jsx)(n.code,{children:"scripts"}),"："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'"scripts": {\n    "dev": "cross-env NODE_ENV=development webpack-dev-server",\n    "build": "cross-env NODE_ENV=production webpack"\n},\n'})}),"\n",(0,c.jsxs)(n.p,{children:["在控制台执行 ",(0,c.jsx)(n.code,{children:"npm run dev"}),"，启动正常，页面上啥也没有，修改下我们的JS代码，往页面中增加点内容，正常刷新(也就是说不需要进行任何配置就可以使用了)。"]}),"\n",(0,c.jsxs)(n.p,{children:["Excuse me。怪我平时不认真咯，每次都乖乖的配个 ",(0,c.jsx)(n.code,{children:"contentBase"}),"，原来根本不需要配，带着疑问，我又去搜寻了一番。"]}),"\n",(0,c.jsxs)(n.p,{children:["原来在配置了 ",(0,c.jsx)(n.code,{children:"html-webpack-plugin"})," 的情况下， ",(0,c.jsx)(n.code,{children:"contentBase"})," 不会起任何作用，也就是说我以前都是白配了，这是一个悲伤的故事。"]}),"\n",(0,c.jsxs)(n.p,{children:["不过呢，我们还是可以在 ",(0,c.jsx)(n.code,{children:"webpack.config.js"})," 中进行 ",(0,c.jsx)(n.code,{children:"webpack-dev-server"})," 的其它配置，例如指定端口号，设置浏览器控制台消息，是否压缩等等:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'//webpack.config.js\nmodule.exports = {\n    //...\n    devServer: {\n        port: \'3000\', //默认是8080\n        quiet: false, //默认不启用\n        inline: true, //默认开启 inline 模式，如果设置为false,开启 iframe 模式\n        stats: "errors-only", //终端仅打印 error\n        overlay: false, //默认不启用\n        clientLogLevel: "silent", //日志等级\n        compress: true //是否启用 gzip 压缩\n    }\n}\n'})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["启用 ",(0,c.jsx)(n.code,{children:"quiet"})," 后，除了初始启动信息之外的任何内容都不会被打印到控制台。这也意味着来自 ",(0,c.jsx)(n.code,{children:"webpack"})," 的错误或警告在控制台不可见 ———— 我是不会开启这个的，看不到错误日志，还搞个锤子"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"stats"}),': "errors-only" ， 终端中仅打印出 ',(0,c.jsx)(n.code,{children:"error"}),"，注意当启用了 ",(0,c.jsx)(n.code,{children:"quiet"})," 或者是 ",(0,c.jsx)(n.code,{children:"noInfo"})," 时，此属性不起作用。 ————— 这个属性个人觉得很有用，尤其是我们启用了 ",(0,c.jsx)(n.code,{children:"eslint"})," 或者使用 ",(0,c.jsx)(n.code,{children:"TS"}),"进行开发的时候，太多的编译信息在终端中，会干扰到我们。"]}),"\n"]}),"\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:["启用 ",(0,c.jsx)(n.code,{children:"overlay"})," 后，当编译出错时，会在浏览器窗口全屏输出错误，默认是关闭的。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.img,{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/2/17098ee5021b37bd~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp",alt:"img"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"clientLogLevel"}),": 当使用内联模式时，在浏览器的控制台将显示消息，如：在重新加载之前，在一个错误之前，或者模块热替换启用时。如果你不喜欢看这些信息，可以将其设置为 ",(0,c.jsx)(n.code,{children:"silent"})," (",(0,c.jsx)(n.code,{children:"none"})," 即将被移除)。"]}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.img,{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/2/17098ee5021f55a7~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp",alt:"img"})}),"\n",(0,c.jsxs)(n.p,{children:["本篇文章不是为了细说 ",(0,c.jsx)(n.code,{children:"webpack-dev-server"})," 的配置，所以这里就不多说了。关于 ",(0,c.jsx)(n.code,{children:"webpack-dev-server"})," 更多的配置可以",(0,c.jsx)(n.a,{href:"https://link.juejin.cn?target=https%3A%2F%2Fwebpack.js.org%2Fconfiguration%2Fdev-server%2F",target:"_blank",rel:"noopener noreferrer",children:"点击查看"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["细心的小伙伴可能发现了一个小问题，我们在",(0,c.jsx)(n.code,{children:"src/index.js"}),"中增加一句 ",(0,c.jsx)(n.code,{children:"console.log('aaa')"}),"："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"class Animal {\n    constructor(name) {\n        this.name = name;\n    }\n    getName() {\n        return this.name;\n    }\n}\n\nconst dog = new Animal('dog');\nconsole.log('aaa');\n"})}),"\n",(0,c.jsxs)(n.p,{children:["然后通过 ",(0,c.jsx)(n.code,{children:"npm run dev"})," 查看效果，会发现："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.img,{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/2/17098ee5022db15f~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp",alt:"img"})}),"\n",(0,c.jsx)(n.p,{children:"这显然不是我们源码中对应的行号，点进去的话，会发现代码是被编译后的，我当前的代码非常简单，还能看出来，项目代码复杂后，“亲妈”看编译后都费劲，这不利于我们开发调试，不是我们想要的，我们肯定还是希望能够直接对应到源码的。"}),"\n",(0,c.jsxs)(n.h3,{id:"7devtool",children:["7.devtool",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7devtool",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"devtool"})," 中的一些设置，可以帮助我们将编译后的代码映射回原始源代码。不同的值会明显影响到构建和重新构建的速度。"]}),"\n",(0,c.jsxs)(n.p,{children:["对我而言，能够定位到源码的行即可，因此，综合构建速度，在开发模式下，我设置的 ",(0,c.jsx)(n.code,{children:"devtool"})," 的值是 ",(0,c.jsx)(n.code,{children:"cheap-module-eval-source-map"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"//webpack.config.js\nmodule.exports = {\n    devtool: 'cheap-module-eval-source-map' //开发环境下使用\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["生产环境可以使用 ",(0,c.jsx)(n.code,{children:"none"})," 或者是 ",(0,c.jsx)(n.code,{children:"source-map"}),"，使用 ",(0,c.jsx)(n.code,{children:"source-map"})," 最终会单独打包出一个 ",(0,c.jsx)(n.code,{children:".map"})," 文件，我们可以根据报错信息和此 ",(0,c.jsx)(n.code,{children:"map"})," 文件，进行错误解析，定位到源代码。"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"source-map"})," 和 ",(0,c.jsx)(n.code,{children:"hidden-source-map"})," 都会打包生成单独的 ",(0,c.jsx)(n.code,{children:".map"})," 文件，区别在于，",(0,c.jsx)(n.code,{children:"source-map"})," 会在打包出的js文件中增加一个引用注释，以便开发工具知道在哪里可以找到它。",(0,c.jsx)(n.code,{children:"hidden-source-map"})," 则不会在打包的js中增加引用注释。"]}),"\n",(0,c.jsxs)(n.p,{children:["但是我们一般不会直接将 ",(0,c.jsx)(n.code,{children:".map"})," 文件部署到CDN，因为会直接映射到源码，更希望将",(0,c.jsx)(n.code,{children:".map"})," 文件传到错误解析系统，然后根据上报的错误信息，直接解析到出错的源码位置。"]}),"\n",(0,c.jsxs)(n.p,{children:["还可以设置其他的",(0,c.jsx)(n.a,{href:"https://link.juejin.cn?target=http%3A%2F%2Fwebpack.html.cn%2Fconfiguration%2Fdevtool.html",target:"_blank",rel:"noopener noreferrer",children:"devtool值"}),"，你可以使用不同的值，构建对比差异。"]}),"\n",(0,c.jsxs)(n.p,{children:["现在我们已经说了 ",(0,c.jsx)(n.code,{children:"html"}),"、",(0,c.jsx)(n.code,{children:"js"})," 了，并且也可以在浏览器中实时看到效果了，现在就不得不说页面开发三巨头之一的 ",(0,c.jsx)(n.code,{children:"css"})," 。"]}),"\n",(0,c.jsxs)(n.h3,{id:"8如何处理样式文件呢",children:["8.如何处理样式文件呢",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8如何处理样式文件呢",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"webpack"})," 不能直接处理 ",(0,c.jsx)(n.code,{children:"css"}),"，需要借助 ",(0,c.jsx)(n.code,{children:"loader"}),"。如果是 ",(0,c.jsx)(n.code,{children:".css"}),"，我们需要的 ",(0,c.jsx)(n.code,{children:"loader"})," 通常有： ",(0,c.jsx)(n.code,{children:"style-loader"}),"、",(0,c.jsx)(n.code,{children:"css-loader"}),"，考虑到兼容性问题，还需要 ",(0,c.jsx)(n.code,{children:"postcss-loader"}),"，而如果是 ",(0,c.jsx)(n.code,{children:"less"})," 或者是 ",(0,c.jsx)(n.code,{children:"sass"})," 的话，还需要 ",(0,c.jsx)(n.code,{children:"less-loader"})," 和 ",(0,c.jsx)(n.code,{children:"sass-loader"}),"，这里配置一下 ",(0,c.jsx)(n.code,{children:"less"})," 和 ",(0,c.jsx)(n.code,{children:"css"})," 文件(",(0,c.jsx)(n.code,{children:"sass"})," 的话，使用 ",(0,c.jsx)(n.code,{children:"sass-loader"}),"即可):"]}),"\n",(0,c.jsx)(n.p,{children:"先安装一下需要使用的依赖:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm install style-loader less-loader css-loader postcss-loader autoprefixer less -D\n//webpack.config.js\nmodule.exports = {\n    //...\n    module: {\n        rules: [\n            {\n                test: /\\.(le|c)ss$/,\n                use: ['style-loader', 'css-loader', {\n                    loader: 'postcss-loader',\n                    options: {\n                        plugins: function () {\n                            return [\n                                require('autoprefixer')({\n                                    \"overrideBrowserslist\": [\n                                        \">0.25%\",\n                                        \"not dead\"\n                                    ]\n                                })\n                            ]\n                        }\n                    }\n                }, 'less-loader'],\n                exclude: /node_modules/\n            }\n        ]\n    }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["测试一下，新建一个 ",(0,c.jsx)(n.code,{children:"less"})," 文件，",(0,c.jsx)(n.code,{children:"src/index.less"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"//src/index.less\n@color: red;\nbody{\n    background: @color;\n    transition: all 2s;\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["再在入口文件中引入此 ",(0,c.jsx)(n.code,{children:"less"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"//src/index.js\nimport './index.less';\n"})}),"\n",(0,c.jsxs)(n.p,{children:["我们修改了配置文件，重新启动一下服务: ",(0,c.jsx)(n.code,{children:"npm run dev"}),"。可以看到页面的背景色变成了红色。"]}),"\n",(0,c.jsx)(n.p,{children:"OK，我们简单说一下上面的配置："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"style-loader"})," 动态创建 ",(0,c.jsx)(n.code,{children:"style"})," 标签，将 ",(0,c.jsx)(n.code,{children:"css"})," 插入到 ",(0,c.jsx)(n.code,{children:"head"})," 中."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"css-loader"})," 负责处理 ",(0,c.jsx)(n.code,{children:"@import"})," 等语句。"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"postcss-loader"})," 和 ",(0,c.jsx)(n.code,{children:"autoprefixer"}),"，自动生成浏览器兼容性前缀 —— 2020了，应该没人去自己徒手去写浏览器前缀了吧"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"less-loader"})," 负责处理编译 ",(0,c.jsx)(n.code,{children:".less"})," 文件,将其转为 ",(0,c.jsx)(n.code,{children:"css"})]}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["这里，我们之间在 ",(0,c.jsx)(n.code,{children:"webpack.config.js"})," 写了 ",(0,c.jsx)(n.code,{children:"autoprefixer"})," 需要兼容的浏览器，仅是为了方便展示。推荐大家在根目录下创建 ",(0,c.jsx)(n.code,{children:".browserslistrc"}),"，将对应的规则写在此文件中，除了 ",(0,c.jsx)(n.code,{children:"autoprefixer"})," 使用外，",(0,c.jsx)(n.code,{children:"@babel/preset-env"}),"、",(0,c.jsx)(n.code,{children:"stylelint"}),"、",(0,c.jsx)(n.code,{children:"eslint-plugin-conmpat"})," 等都可以共用。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"注意："})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"loader` 的执行顺序是从右向左执行的，也就是后面的 `loader` 先执行，上面 `loader` 的执行顺序为: `less-loader` ---\x3e `postcss-loader` ---\x3e `css-loader` ---\x3e `style-loader\n"})}),"\n",(0,c.jsxs)(n.p,{children:["当然，",(0,c.jsx)(n.code,{children:"loader"})," 其实还有一个参数，可以修改优先级，",(0,c.jsx)(n.code,{children:"enforce"})," 参数，其值可以为: ",(0,c.jsx)(n.code,{children:"pre"}),"(优先执行) 或 ",(0,c.jsx)(n.code,{children:"post"})," (滞后执行)。"]}),"\n",(0,c.jsxs)(n.p,{children:["现在，我们已经可以处理 ",(0,c.jsx)(n.code,{children:".less"})," 文件啦，",(0,c.jsx)(n.code,{children:".css"})," 文件只需要修改匹配规则，删除 ",(0,c.jsx)(n.code,{children:"less-loader"})," 即可。"]}),"\n",(0,c.jsx)(n.p,{children:"现在的一切看起来都很完美，但是假设我们的文件中使用了本地的图片，例如:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"body{\n    background: url('../images/thor.png');\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["你就会发现，报错啦啦啦，那么我们要怎么处理图片或是本地的一些其它资源文件呢。不用想，肯定又需要 ",(0,c.jsx)(n.code,{children:"loader"})," 出马了。"]}),"\n",(0,c.jsxs)(n.h3,{id:"9图片字体文件处理",children:["9.图片/字体文件处理",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#9图片字体文件处理",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["我们可以使用 ",(0,c.jsx)(n.code,{children:"url-loader"})," 或者 ",(0,c.jsx)(n.code,{children:"file-loader"})," 来处理本地的资源文件。",(0,c.jsx)(n.code,{children:"url-loader"})," 和 ",(0,c.jsx)(n.code,{children:"file-loader"})," 的功能类似，但是 ",(0,c.jsx)(n.code,{children:"url-loader"})," 可以指定在文件大小小于指定的限制时，返回 ",(0,c.jsx)(n.code,{children:"DataURL"}),"，因此，个人会优先选择使用 ",(0,c.jsx)(n.code,{children:"url-loader"}),"。"]}),"\n",(0,c.jsx)(n.p,{children:"首先安装依赖:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm install url-loader -D\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.img,{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/2/17098ee506dad2eb~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp",alt:"img"})}),"\n",(0,c.jsxs)(n.p,{children:["安装 ",(0,c.jsx)(n.code,{children:"url-loader"})," 的时候，控制台会提示你，还需要安装下 ",(0,c.jsx)(n.code,{children:"file-loader"}),"，听人家的话安装下就行(新版 ",(0,c.jsx)(n.code,{children:"npm"})," 不会自动安装 ",(0,c.jsx)(n.code,{children:"peerDependencies"}),")："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm install file-loader -D\n"})}),"\n",(0,c.jsxs)(n.p,{children:["在 ",(0,c.jsx)(n.code,{children:"webpack.config.js"})," 中进行配置："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"//webpack.config.js\nmodule.exports = {\n    //...\n    modules: {\n        rules: [\n            {\n                test: /\\.(png|jpg|gif|jpeg|webp|svg|eot|ttf|woff|woff2)$/,\n                use: [\n                    {\n                        loader: 'url-loader',\n                        options: {\n                            limit: 10240, //10K\n                            esModule: false \n                        }\n                    }\n                ],\n                exclude: /node_modules/\n            }\n        ]\n    }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["此处设置 ",(0,c.jsx)(n.code,{children:"limit"})," 的值大小为 10240，即资源大小小于 ",(0,c.jsx)(n.code,{children:"10K"})," 时，将资源转换为 ",(0,c.jsx)(n.code,{children:"base64"}),"，超过 10K，将图片拷贝到 ",(0,c.jsx)(n.code,{children:"dist"})," 目录。",(0,c.jsx)(n.code,{children:"esModule"})," 设置为 ",(0,c.jsx)(n.code,{children:"false"}),"，否则，",(0,c.jsx)(n.code,{children:"<img src={require('XXX.jpg')} />"})," 会出现 ",(0,c.jsx)(n.code,{children:"<img src=[Module Object] />"})]}),"\n",(0,c.jsxs)(n.p,{children:["将资源转换为 ",(0,c.jsx)(n.code,{children:"base64"})," 可以减少网络请求次数，但是 ",(0,c.jsx)(n.code,{children:"base64"})," 数据较大，如果太多的资源是 ",(0,c.jsx)(n.code,{children:"base64"}),"，会导致加载变慢，因此设置 ",(0,c.jsx)(n.code,{children:"limit"})," 值时，需要二者兼顾。"]}),"\n",(0,c.jsxs)(n.p,{children:["默认情况下，生成的文件的文件名就是文件内容的 ",(0,c.jsx)(n.code,{children:"MD5"})," 哈希值并会保留所引用资源的原始扩展名，例如我上面的图片(thor.jpeg)对应的文件名如下："]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.img,{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/2/17098ee50ad69750~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp",alt:"img"})}),"\n",(0,c.jsxs)(n.p,{children:["当然，你也可以通过 ",(0,c.jsx)(n.code,{children:"options"})," 参数进行修改。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"//....\nuse: [\n    {\n        loader: 'url-loader',\n        options: {\n            limit: 10240, //10K\n            esModule: false,\n            name: '[name]_[hash:6].[ext]'\n        }\n    }\n]\n"})}),"\n",(0,c.jsxs)(n.p,{children:["重新编译，在浏览器中审查元素，可以看到图片名变成了: ",(0,c.jsx)(n.code,{children:"thor_a5f7c0.jpeg"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["当本地资源较多时，我们有时会希望它们能打包在一个文件夹下，这也很简单，我们只需要在 ",(0,c.jsx)(n.code,{children:"url-loader"})," 的 ",(0,c.jsx)(n.code,{children:"options"})," 中指定 ",(0,c.jsx)(n.code,{children:"outpath"}),"，如: ",(0,c.jsx)(n.code,{children:"outputPath: 'assets'"}),"，构建出的目录如下:"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.img,{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/2/17098ee50d59a0cf~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp",alt:"img"})}),"\n",(0,c.jsxs)(n.p,{children:["更多的 ",(0,c.jsx)(n.code,{children:"url-loader"})," 配置可以",(0,c.jsx)(n.a,{href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.webpackjs.com%2Floaders%2Furl-loader%2F",target:"_blank",rel:"noopener noreferrer",children:"查看"})]}),"\n",(0,c.jsxs)(n.p,{children:["到了这里，有点",(0,c.jsx)(n.strong,{children:"岁月静好"}),"的感觉了。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.img,{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/2/17098ee545e78629~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp",alt:"img"})}),"\n",(0,c.jsxs)(n.p,{children:["不过还没完，如果你在 ",(0,c.jsx)(n.code,{children:"public/index.html"})," 文件中，使用本地的图片，例如，我们修改一下 ",(0,c.jsx)(n.code,{children:"public/index.html"}),"："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'<img src="./a.jpg" />\n'})}),"\n",(0,c.jsx)(n.p,{children:"重启本地服务，虽然，控制台不会报错，但是你会发现，浏览器中根本加载不出这张图片，Why？因为构建之后，通过相对路径压根找不着这张图片呀。"}),"\n",(0,c.jsx)(n.p,{children:"How？怎么解决呢？"}),"\n",(0,c.jsxs)(n.h3,{id:"10处理-html-中的本地图片",children:["10.处理 html 中的本地图片",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#10处理-html-中的本地图片",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["安装 ",(0,c.jsx)(n.code,{children:"html-withimg-loader"})," 来解决咯。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm install html-withimg-loader -D\n"})}),"\n",(0,c.jsxs)(n.p,{children:["修改 ",(0,c.jsx)(n.code,{children:"webpack.config.js"}),"："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"module.exports = {\n    //...\n    module: {\n        rules: [\n            {\n                test: /.html$/,\n                use: 'html-withimg-loader'\n            }\n        ]\n    }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["然后在我们的 ",(0,c.jsx)(n.code,{children:"html"})," 中引入一张文件测试一下（图片地址自己写咯，这里只是示意）:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'\x3c!-- index.html --\x3e\n<img src="./thor.jpeg" />\n'})}),"\n",(0,c.jsxs)(n.p,{children:["重启本地服务，图片并没能加载，审查元素的话，会发现图片的地址显示的是 ",(0,c.jsx)(n.code,{children:'{"default":"assets/thor_a5f7c0.jpeg"}'}),"。"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.img,{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/2/17098ee552daf18d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp",alt:"img"})}),"\n",(0,c.jsxs)(n.p,{children:["我当前 ",(0,c.jsx)(n.code,{children:"file-loader"})," 的版本是 5.0.2，5版本之后，需要增加 ",(0,c.jsx)(n.code,{children:"esModule"})," 属性："]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"//webpack.config.js\nmodule.exports = {\n    //...\n    modules: {\n        rules: [\n            {\n                test: /\\.(png|jpg|gif|jpeg|webp|svg|eot|ttf|woff|woff2)$/,\n                use: [\n                    {\n                        loader: 'url-loader',\n                        options: {\n                            limit: 10240, //10K\n                            esModule: false\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n}\n"})}),"\n",(0,c.jsx)(n.p,{children:"再重启本地服务，就搞定啦。"}),"\n",(0,c.jsxs)(n.p,{children:["话说使用 ",(0,c.jsx)(n.code,{children:"html-withimg-loader"})," 处理图片之后，",(0,c.jsx)(n.code,{children:"html"})," 中就不能使用 ",(0,c.jsx)(n.code,{children:"vm"}),", ",(0,c.jsx)(n.code,{children:"ejs"})," 的模板了，如果想继续在 ",(0,c.jsx)(n.code,{children:"html"})," 中使用 ",(0,c.jsx)(n.code,{children:"<% if(htmlWebpackPlugin.options.config.header) { %>"})," 这样的语法，但是呢，又希望能使用本地图片，可不可以？鱼和熊掌都想要，虽然很多时候，能吃个鱼就不错了，但是这里是可以的哦，像下面这样编写图片的地址，并且删除",(0,c.jsx)(n.code,{children:"html-withimg-loader"}),"的配置即可。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"\x3c!-- index.html --\x3e\n<img src=\"<%= require('./thor.jpeg') %>\" />\n"})}),"\n",(0,c.jsxs)(n.p,{children:["图片加载OK啦，并且 ",(0,c.jsx)(n.code,{children:"<% %>"})," 语法也可以正常使用，吼吼吼~~~"]}),"\n",(0,c.jsxs)(n.p,{children:["虽然，",(0,c.jsx)(n.code,{children:"webpack"})," 的默认配置很好用，但是有的时候，我们会有一些其它需要啦，例如，我们不止一个入口文件，这时候，该怎么办呢？"]}),"\n",(0,c.jsxs)(n.h3,{id:"11入口配置",children:["11.入口配置",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#11入口配置",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["入口的字段为: ",(0,c.jsx)(n.code,{children:"entry"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"//webpack.config.js\nmodule.exports = {\n    entry: './src/index.js' //webpack的默认配置\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"entry"})," 的值可以是一个字符串，一个数组或是一个对象。"]}),"\n",(0,c.jsx)(n.p,{children:"字符串的情况无需多说，就是以对应的文件为入口。"}),"\n",(0,c.jsx)(n.p,{children:"为数组时，表示有“多个主入口”，想要多个依赖文件一起注入时，会这样配置。例如:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"entry: [\n    './src/polyfills.js',\n    './src/index.js'\n]\n"})}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"polyfills.js"})," 文件中可能只是简单的引入了一些 ",(0,c.jsx)(n.code,{children:"polyfill"}),"，例如 ",(0,c.jsx)(n.code,{children:"babel-polyfill"}),"，",(0,c.jsx)(n.code,{children:"whatwg-fetch"})," 等，需要在最前面被引入（我在 webpack2 时这样配置过）。"]}),"\n",(0,c.jsx)(n.p,{children:"那什么时候是对象呢？不要捉急，后面将多页配置的时候，会说到。"}),"\n",(0,c.jsxs)(n.h3,{id:"12出口配置",children:["12.出口配置",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#12出口配置",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["配置 ",(0,c.jsx)(n.code,{children:"output"})," 选项可以控制 ",(0,c.jsx)(n.code,{children:"webpack"})," 如何输出编译文件。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"const path = require('path');\nmodule.exports = {\n    entry: './src/index.js',\n    output: {\n        path: path.resolve(__dirname, 'dist'), //必须是绝对路径\n        filename: 'bundle.js',\n        publicPath: '/' //通常是CDN地址\n    }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["例如，你最终编译出来的代码部署在 CDN 上，资源的地址为: '",(0,c.jsx)(n.a,{href:"https://link.juejin.cn?target=https%3A%2F%2FAAA%2FBBB%2FYourProject%2FXXX",target:"_blank",rel:"noopener noreferrer",children:(0,c.jsx)(n.a,{href:"https://AAA/BBB/YourProject/XXX",target:"_blank",rel:"noopener noreferrer",children:"https://AAA/BBB/YourProject/XXX"})}),"'，那么可以将生产的 ",(0,c.jsx)(n.code,{children:"publicPath"})," 配置为: ",(0,c.jsx)(n.code,{children:"//AAA/BBB/"}),"。"]}),"\n",(0,c.jsxs)(n.p,{children:["编译时，可以不配置，或者配置为 ",(0,c.jsx)(n.code,{children:"/"}),"。可以在我们之前提及的 ",(0,c.jsx)(n.code,{children:"config.js"})," 中指定 ",(0,c.jsx)(n.code,{children:"publicPath"}),"（",(0,c.jsx)(n.code,{children:"config.js"})," 中区分了 ",(0,c.jsx)(n.code,{children:"dev"})," 和 ",(0,c.jsx)(n.code,{children:"public"}),"）， 当然还可以区分不同的环境指定配置文件来设置，或者是根据 ",(0,c.jsx)(n.code,{children:"isDev"})," 字段来设置。"]}),"\n",(0,c.jsxs)(n.p,{children:["除此之外呢，考虑到CDN缓存的问题，我们一般会给文件名加上 ",(0,c.jsx)(n.code,{children:"hash"}),"."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"//webpack.config.js\nmodule.exports = {\n    output: {\n        path: path.resolve(__dirname, 'dist'), //必须是绝对路径\n        filename: 'bundle.[hash].js',\n        publicPath: '/' //通常是CDN地址\n    }\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["如果你觉得 ",(0,c.jsx)(n.code,{children:"hash"})," 串太长的话，还可以指定长度，例如 ",(0,c.jsx)(n.code,{children:"bundle.[hash:6].js"}),"。使用 ",(0,c.jsx)(n.code,{children:"npm run build"})," 打包看看吧。"]}),"\n",(0,c.jsxs)(n.p,{children:["问题出现啦，每次文件修改后，重新打包，导致 ",(0,c.jsx)(n.code,{children:"dist"})," 目录下的文件越来越多。要是每次打包前，都先清空一下目录就好啦。可不可以做到呢？必须可以！"]}),"\n",(0,c.jsxs)(n.h3,{id:"13每次打包前清空dist目录",children:["13.每次打包前清空dist目录",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#13每次打包前清空dist目录",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["反正我是懒得手动去清理的，只要你足够懒，你总是会找到好办法的，懒人推动科技进步。这里，我们需要插件: ",(0,c.jsx)(n.code,{children:"clean-webpack-plugin"})]}),"\n",(0,c.jsx)(n.p,{children:"安装依赖:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"npm install clean-webpack-plugin -D\n"})}),"\n",(0,c.jsxs)(n.p,{children:["以前，",(0,c.jsx)(n.code,{children:"clean-webpack-plugin"})," 是默认导出的，现在不是，所以引用的时候，需要注意一下。另外，现在构造函数接受的参数是一个对象，可缺省。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"//webpack.config.js\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\n\nmodule.exports = {\n    //...\n    plugins: [\n        //不需要传参数喔，它可以找到 outputPath\n        new CleanWebpackPlugin() \n    ]\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["现在你再修改文件，重现构建，生成的hash值和之前dist中的不一样，但是因为每次 ",(0,c.jsx)(n.code,{children:"clean-webpack-plugin"})," 都会帮我们先清空一波 ",(0,c.jsx)(n.code,{children:"dist"})," 目录，所以不会出现太多文件，傻傻分不清楚究竟哪个是新生成文件的情况。"]}),"\n",(0,c.jsxs)(n.h4,{id:"希望dist目录下某个文件夹不被清空",children:["希望dist目录下某个文件夹不被清空",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#希望dist目录下某个文件夹不被清空",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:["不过呢，有些时候，我们并不希望整个 ",(0,c.jsx)(n.code,{children:"dist"})," 目录都被清空，比如，我们不希望，每次打包的时候，都删除 ",(0,c.jsx)(n.code,{children:"dll"})," 目录，以及 ",(0,c.jsx)(n.code,{children:"dll"})," 目录下的文件或子目录，该怎么办呢？"]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"clean-webpack-plugin"})," 为我们提供了参数 ",(0,c.jsx)(n.code,{children:"cleanOnceBeforeBuildPatterns"}),"。"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"//webpack.config.js\nmodule.exports = {\n    //...\n    plugins: [\n        new CleanWebpackPlugin({\n            cleanOnceBeforeBuildPatterns:['**/*', '!dll', '!dll/**'] //不删除dll目录下的文件\n        })\n    ]\n}\n"})}),"\n",(0,c.jsxs)(n.p,{children:["此外，",(0,c.jsx)(n.code,{children:"clean-webpack-plugin"})," 还有一些其它的配置，不过我使用的不多，大家可以查看",(0,c.jsx)(n.a,{href:"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fjohnagan%2Fclean-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"clean-webpack-plugin"})]}),"\n",(0,c.jsxs)(n.p,{children:["至此，我们算是完成了一个基础配置。但是这不够完美，或者说有些时候，我们还会有一些其它的需求。下一篇关于",(0,c.jsx)(n.code,{children:"webpack"}),"配置的文章会介绍一些其它的情况。"]}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"参考资料"}),"\n"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"https://link.juejin.cn?target=https%3A%2F%2Fnodejs.org%2Fen%2Fblog%2Fnpm%2Fpeer-dependencies%2F",target:"_blank",rel:"noopener noreferrer",children:"Peer Dependencies"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Fhtml-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"html-webpack-plugin"})}),"\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.webpackjs.com%2Fconcepts%2F",target:"_blank",rel:"noopener noreferrer",children:"webpack中文文档"})}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"最后",children:["最后",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#最后",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"如果本文对你有帮助的话，给本文点个赞吧r"}),"\n",(0,c.jsx)(n.p,{children:"看得不过瘾？"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.a,{href:"https://juejin.cn/post/6844904084927938567",target:"_blank",rel:"noopener noreferrer",children:"带你深度解锁Webpack系列(进阶篇)"})," ",(0,c.jsx)(n.a,{href:"https://juejin.cn/post/6844904093463347208",target:"_blank",rel:"noopener noreferrer",children:"带你深度解锁Webpack系列(优化篇)"})]}),"\n",(0,c.jsxs)(n.p,{children:["作者：无名之苝\n链接：",(0,c.jsx)(n.a,{href:"https://juejin.cn/post/6844904079219490830",target:"_blank",rel:"noopener noreferrer",children:"https://juejin.cn/post/6844904079219490830"}),"\n来源：稀土掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(r,{...e})}):r(e)}let i=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["webpack%2F10-%E6%B7%B1%E5%BA%A6%E8%A7%A3%E9%94%81Webpack%E7%B3%BB%E5%88%97(%E5%9F%BA%E7%A1%80%E7%AF%87)%2001.md"]={toc:[{text:"1.webpack 是什么？",id:"1webpack-是什么",depth:3},{text:"2.webpack 的核心概念",id:"2webpack-的核心概念",depth:3},{text:"3.初始化项目",id:"3初始化项目",depth:3},{text:"4.将JS转义为低版本",id:"4将js转义为低版本",depth:3},{text:"babel-loader",id:"babel-loader",depth:4},{text:"创建一个 .babelrc",id:"创建一个-babelrc",depth:4},{text:"在webpack中配置 babel",id:"在webpack中配置-babel",depth:4},{text:"5.mode",id:"5mode",depth:3},{text:"6.在浏览器中查看页面",id:"6在浏览器中查看页面",depth:3},{text:"html-webpack-plugin 的 config 的妙用",id:"html-webpack-plugin-的-config-的妙用",depth:4},{text:"如何在浏览器中实时展示效果",id:"如何在浏览器中实时展示效果",depth:4},{text:"7.devtool",id:"7devtool",depth:3},{text:"8.如何处理样式文件呢",id:"8如何处理样式文件呢",depth:3},{text:"9.图片/字体文件处理",id:"9图片字体文件处理",depth:3},{text:"10.处理 html 中的本地图片",id:"10处理-html-中的本地图片",depth:3},{text:"11.入口配置",id:"11入口配置",depth:3},{text:"12.出口配置",id:"12出口配置",depth:3},{text:"13.每次打包前清空dist目录",id:"13每次打包前清空dist目录",depth:3},{text:"希望dist目录下某个文件夹不被清空",id:"希望dist目录下某个文件夹不被清空",depth:4},{text:"最后",id:"最后",depth:3}],title:"带你深度解锁Webpack系列(基础篇) 01",frontmatter:{}}}}]);