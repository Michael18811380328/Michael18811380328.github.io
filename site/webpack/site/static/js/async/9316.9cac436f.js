"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["9316"],{1825:function(e,n,r){r.r(n),r.d(n,{default:function(){return l}});var i=r(6469),s=r(8809);function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",strong:"strong",ul:"ul",li:"li",h2:"h2",h3:"h3",blockquote:"blockquote",img:"img",em:"em",pre:"pre",hr:"hr",h4:"h4",h5:"h5"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"第一部分",children:["第一部分",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第一部分",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"统计信息：字数 66849  阅读134分钟"}),"\n",(0,i.jsx)(n.p,{children:"参考文档："}),"\n",(0,i.jsx)(n.p,{children:"原文的图片无法加载，可以自己写出来"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://juejin.im/post/5b5d6d6f6fb9a04fea58aabc",target:"_blank",rel:"noopener noreferrer",children:"https://juejin.im/post/5b5d6d6f6fb9a04fea58aabc"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://juejin.im/post/5b56909a518825195f499806",target:"_blank",rel:"noopener noreferrer",children:"https://juejin.im/post/5b56909a518825195f499806"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/webpack-contrib/uglifyjs-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/webpack-contrib/uglifyjs-webpack-plugin"})}),"\n",(0,i.jsxs)(n.p,{children:["正好我也在使用一个文档生成工具 ",(0,i.jsx)(n.a,{href:"https://github.com/pedronauck/docz",target:"_blank",rel:"noopener noreferrer",children:"docz"}),"(安利一波) 也最低需要",(0,i.jsx)(n.code,{children:"webpack 4+"}),"，新版",(0,i.jsx)(n.code,{children:"webpack"}),"性能提高了不少，而且",(0,i.jsx)(n.code,{children:"webpack 4"})," 都已经发布五个多月了，想必应该已经没什么坑了，应该可以安心的按照别人写的升级攻略升级了。之前一直迟迟不升级完全是被去年被 ",(0,i.jsx)(n.code,{children:"webpack 3"})," 坑怕了。它在 ",(0,i.jsx)(n.code,{children:"code splitting"})," 的情况下 ",(0,i.jsx)(n.code,{children:"CommonsChunkPlugin"}),"会完全失效。过了好一段时间才修复，欲哭无泪。"]}),"\n",(0,i.jsxs)(n.p,{children:["所以这次我等了快大半年才准备升级到",(0,i.jsx)(n.code,{children:"webpack 4"})," ",(0,i.jsx)(n.strong,{children:"但万万没想到还是遇到了不少的问题！"})," 有很多之前遗留的问题还是没有很好地解决。但最主要的问题还是它的文档有所欠缺，已经废除了的东西如",(0,i.jsx)(n.code,{children:"commonsChunkPlugin"}),"还在官方文档中到处出现，很多重要的东西却一笔带过，甚至没写，需要用户自己去看源码才能解决。"]}),"\n",(0,i.jsxs)(n.p,{children:["还比如在",(0,i.jsx)(n.code,{children:"v4.16.0"}),"版本中废除了",(0,i.jsx)(n.code,{children:"optimization.occurrenceOrder"}),"、",(0,i.jsx)(n.code,{children:"optimization.namedChunks"}),"、",(0,i.jsx)(n.code,{children:"optimization.hashedModuleIds"}),"、",(0,i.jsx)(n.code,{children:"optimization.namedModules"})," 这几个配置项，替换成了",(0,i.jsx)(n.code,{children:"optimization.moduleIds"})," 和 ",(0,i.jsx)(n.code,{children:"optimization.chunkIds"}),"，但文档完中全没有任何体现，所以你在新版本中还按照文档那样配置其实是没有任何效果的。"]}),"\n",(0,i.jsxs)(n.p,{children:["最新最完整的文档还是看他项目的配置",(0,i.jsx)(n.a,{href:"https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json",target:"_blank",rel:"noopener noreferrer",children:"WebpackOptions.json"}),"，强烈建议遇到不清楚的配置项可以看这个，因为它一定保证是和最新代码同步的。"]}),"\n",(0,i.jsx)(n.p,{children:"吐槽了这么多，我们言归正传。由于本次手摸手篇幅有些长，所以拆解成了上下两篇文章："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["上篇 -- 就是普通的在",(0,i.jsx)(n.code,{children:"webpack 3"}),"的基础上升级，要做哪些操作和遇到了哪些坑"]}),"\n",(0,i.jsxs)(n.li,{children:["下篇 -- 是在",(0,i.jsx)(n.code,{children:"webpack 4"}),"下怎么合理的打包和拆包，并且如何最大化利用 ",(0,i.jsx)(n.code,{children:"long term caching"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"本文章不是手摸手从零教你 webpack 配置，所以并不会讲太多很基础的配置问题"}),"。比如如何处理 css 文件，如何配置 webpack-dev-server，讲述 file-loader 和 url-loader 之间的区别等等，有需求的推荐看 ",(0,i.jsx)(n.a,{href:"https://webpack.js.org/concepts/",target:"_blank",rel:"noopener noreferrer",children:"官方文档"})," 或者 ",(0,i.jsx)(n.a,{href:"https://survivejs.com/webpack/developing/webpack-dev-server/",target:"_blank",rel:"noopener noreferrer",children:"survivejs"})," 出的一个系列教程。或者推荐看我司的另一篇 wbepack 入门文章，已同步到 webpack4 ",(0,i.jsx)(n.a,{href:"https://github.com/wallstreetcn/webpack-and-spa-guide",target:"_blank",rel:"noopener noreferrer",children:"传送门"}),"。"]}),"\n",(0,i.jsxs)(n.h2,{id:"升级篇",children:["升级篇",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#升级篇",children:"#"})]}),"\n",(0,i.jsxs)(n.h3,{id:"前言",children:["前言",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["我一直认为模仿和借鉴是学习一个新东西最高效的方法。所以我建议还是通过借鉴一些成熟的 webpack 配置比较好。比如你项目是基于 react 生态圈的话可以借鉴 ",(0,i.jsx)(n.a,{href:"https://github.com/facebook/create-react-app",target:"_blank",rel:"noopener noreferrer",children:"create-react-app"})," ，下载之后",(0,i.jsx)(n.code,{children:"npm run eject"})," 就可以看到它详细的 webpack 配置了。vue 的话由于新版",(0,i.jsx)(n.code,{children:"vue cli"}),"不支持 ",(0,i.jsx)(n.code,{children:"eject"}),"了，而且改用 ",(0,i.jsx)(n.a,{href:"https://github.com/mozilla-neutrino/webpack-chain",target:"_blank",rel:"noopener noreferrer",children:"webpack-chain"}),"来配置，所以借鉴起来可能会不太方便，主要配置 ",(0,i.jsx)(n.a,{href:"https://github.com/vuejs/vue-cli/tree/dev/packages/@vue/cli-service/lib/config",target:"_blank",rel:"noopener noreferrer",children:"地址"}),"。觉得麻烦的话你可以直接借鉴 ",(0,i.jsx)(n.code,{children:"vue-element-admin"})," 的 ",(0,i.jsx)(n.a,{href:"https://github.com/PanJiaChen/vue-element-admin/pull/889",target:"_blank",rel:"noopener noreferrer",children:"配置"}),"。或者你想自己发挥，你可以借鉴 webpack 官方的各种 ",(0,i.jsx)(n.a,{href:"https://github.com/webpack/webpack/tree/master/examples",target:"_blank",rel:"noopener noreferrer",children:"examples"}),"，来组合你的配置。"]}),"\n",(0,i.jsxs)(n.h3,{id:"升级-webpack",children:["升级 webpack",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#升级-webpack",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["首先将 webpack 升级到 4 之后，直接运行",(0,i.jsx)(n.code,{children:"webpack --xxx"}),"是不行的，因为新版本将命令行相关的东西单独拆了出去封装成了",(0,i.jsx)(n.code,{children:"webpack-cli"}),"。会报如下错误："]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["The CLI moved into a separate package: webpack-cli. Please install ",(0,i.jsx)(n.code,{children:"webpack-cli"})," in addition to webpack itself to use the CLI."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["所有你需要安装",(0,i.jsx)(n.code,{children:"npm install webpack-cli -D -S"}),"。你也可将它安装在全局。"]}),"\n",(0,i.jsxs)(n.p,{children:["同时新版 webpack 需要",(0,i.jsx)(n.code,{children:"Node.js 的最低支持版本为 6.11.5"}),"不要忘了升级。如果还需要维护老项目可以使用 ",(0,i.jsx)(n.a,{href:"https://github.com/creationix/nvm",target:"_blank",rel:"noopener noreferrer",children:"nvm"})," 来做一下 node 版本管理。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"升级所有依赖"})}),"\n",(0,i.jsxs)(n.p,{children:["因为",(0,i.jsx)(n.code,{children:"webpack4"}),"改了 它的",(0,i.jsx)(n.code,{children:"hook"})," api ，所以所有的",(0,i.jsx)(n.code,{children:"loaders"}),"、",(0,i.jsx)(n.code,{children:"plugins"}),"都需要升级才能够适配。"]}),"\n",(0,i.jsxs)(n.p,{children:["可以使用命令行 ",(0,i.jsx)(n.code,{children:"npm outdated"}),"，列出所以可以更新的包。免得再一个个去",(0,i.jsx)(n.code,{children:"npm"}),"找相对于的可用版本了。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/27/164da832e18a97ef?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"})}),"\n",(0,i.jsxs)(n.p,{children:["反正把",(0,i.jsx)(n.code,{children:"devDependencies"}),"的依赖都升级一下，总归不会有错。"]}),"\n",(0,i.jsxs)(n.h3,{id:"带来的变化",children:["带来的变化",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#带来的变化",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["其实这次升级带来了不少改变，但大部分其实对于普通用户来说是不需要关注的，比如这次升级带来的功能",(0,i.jsx)(n.code,{children:"SideEffects"}),"、",(0,i.jsx)(n.code,{children:"Module Type’s Introduced"}),"、",(0,i.jsx)(n.code,{children:"WebAssembly Support"}),"，基本平时是用不到的。我们主要关注那些对我们影响比较大的改动如：",(0,i.jsx)(n.code,{children:"optimization.splitChunks"}),"代替原有的",(0,i.jsx)(n.code,{children:"CommonsChunkPlugin"}),"(下篇文章会着重介绍)，和",(0,i.jsx)(n.code,{children:"Better Defaults-mode"}),"更好的默认配置，这是大家稍微需要关注一下的。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/8/7/16513e81dfa85cbc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["如果想进一步了解 ",(0,i.jsx)(n.code,{children:"Tree Shaking"}),"和",(0,i.jsx)(n.code,{children:"SideEffects"}),"的可见文末拓展阅读。 ",(0,i.jsxs)(n.em,{children:["上图参考 ",(0,i.jsx)(n.a,{href:"https://zhuanlan.zhihu.com/p/35407642",target:"_blank",rel:"noopener noreferrer",children:"Webpack 4 进阶"})]})]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"默认配置",children:["默认配置",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#默认配置",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["webpack 4 引入了",(0,i.jsx)(n.code,{children:"零配置"}),"的概念，被 ",(0,i.jsx)(n.a,{href:"https://github.com/parcel-bundler/parcel",target:"_blank",rel:"noopener noreferrer",children:"parcel"})," 刺激到了。 不管效果怎样，这改变还是值得称赞的。"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["最近又新出了 ",(0,i.jsx)(n.a,{href:"http://fastpack.io/",target:"_blank",rel:"noopener noreferrer",children:"Fastpack"})," 可以关注一下。"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"言归正题，我们来看看 webpack 默认帮我们做了些什么?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"development"})," 模式下，默认开启了",(0,i.jsx)(n.code,{children:"NamedChunksPlugin"})," 和",(0,i.jsx)(n.code,{children:"NamedModulesPlugin"}),"方便调试，提供了更完整的错误信息，更快的重新编译的速度。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n+ mode: 'development'\n- devtool: 'eval',\n- plugins: [\n-   new webpack.NamedModulesPlugin(),\n-   new webpack.NamedChunksPlugin(),\n-   new webpack.DefinePlugin({ \"process.env.NODE_ENV\": JSON.stringify(\"development\") }),\n- ]\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"production"})," 模式下，由于提供了",(0,i.jsx)(n.code,{children:"splitChunks"}),"和",(0,i.jsx)(n.code,{children:"minimize"}),"，所以基本零配置，代码就会自动分割、压缩、优化，同时 webpack 也会自动帮你 ",(0,i.jsx)(n.code,{children:"Scope hoisting"})," 和 ",(0,i.jsx)(n.code,{children:"Tree-shaking"}),"。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'module.exports = {\n+  mode: \'production\',\n-  plugins: [\n-    new UglifyJsPlugin(/* ... */),\n-    new webpack.DefinePlugin({ "process.env.NODE_ENV": JSON.stringify("production") }),\n-    new webpack.optimize.ModuleConcatenationPlugin(),\n-    new webpack.NoEmitOnErrorsPlugin()\n-  ]\n}\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["webpack 一直以来最饱受诟病的就是其配置门槛极高，配置内容极其复杂和繁琐，容易让人从入门到放弃，而它的后起之秀如 rollup、parcel 等均在配置流程上做了极大的优化，做到开箱即用，所以",(0,i.jsx)(n.code,{children:"webpack 4"})," 也从中借鉴了不少经验来提升自身的配置效率。",(0,i.jsx)(n.strong,{children:"愿世间再也不需要 webpack 配置工程师"}),"。"]}),"\n",(0,i.jsxs)(n.h2,{id:"html-webpack-plugin",children:["html-webpack-plugin",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#html-webpack-plugin",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["用最新版本的的 ",(0,i.jsx)(n.code,{children:"html-webpack-plugin"}),"你可能还会遇到如下的错误："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"throw new Error('Cyclic dependency' + nodeRep)\n"})}),"\n",(0,i.jsx)(n.p,{children:"产生这个 bug 的原因是循环引用依赖，如果你没有这个问题可以忽略。"}),"\n",(0,i.jsxs)(n.p,{children:["目前解决方案可以使用 Alpha 版本，",(0,i.jsx)(n.code,{children:"npm i --save-dev html-webpack-plugin@next"})]}),"\n",(0,i.jsxs)(n.p,{children:["或者加入",(0,i.jsx)(n.code,{children:"chunksSortMode: 'none'"}),"就可以了。"]}),"\n",(0,i.jsxs)(n.p,{children:["但仔细查看文档发现设置成",(0,i.jsx)(n.code,{children:"chunksSortMode: 'none'"}),"这样是会有问题的。"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Allows to control how chunks should be sorted before they are included to the HTML."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["这属性会决定你 chunks 的加载顺序，如果设置为",(0,i.jsx)(n.code,{children:"none"}),"，你的 chunk 加载在页面中加载的顺序就不能够保证了，可能会出现样式被覆盖的情况。比如我在",(0,i.jsx)(n.code,{children:"app.css"}),"里面修改了一个第三方库",(0,i.jsx)(n.code,{children:"element-ui"}),"的样式，通过加载顺序的先后来覆盖它，但由于设置为了",(0,i.jsx)(n.code,{children:"none"}),"，打包出来的结果变成了这样："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<link href="/app.8945fbfc.css" rel="stylesheet">\n<link href="/chunk-elementUI.2db88087.css" rel="stylesheet">\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"app.css"}),"被先加载了，之前写的样式覆盖就失效了，除非你使用",(0,i.jsx)(n.code,{children:"important"}),"或者其它 css 权重的方式覆盖它，但这明显是不太合理的。 ",(0,i.jsx)(n.code,{children:"vue-cli"}),"正好也有这个相关 ",(0,i.jsx)(n.a,{href:"https://github.com/vuejs/vue-cli/issues/1978#issuecomment-409267484",target:"_blank",rel:"noopener noreferrer",children:"issue"}),"，尤雨溪也在不使用",(0,i.jsx)(n.code,{children:"@next"}),"版本的基础上 hack 了它，有兴趣的可以自己研究一下，本人在项目中直接使用了",(0,i.jsx)(n.code,{children:"@next"}),"版本，也没遇到其它什么问题（除了不兼容 webpack 的 ",(0,i.jsx)(n.code,{children:"prefetch/preload"})," 相关 ",(0,i.jsx)(n.a,{href:"https://github.com/jantimon/html-webpack-plugin/issues/934",target:"_blank",rel:"noopener noreferrer",children:"issue"}),"）。两种方案都可以，自行选择。"]}),"\n",(0,i.jsxs)(n.p,{children:["其它 ",(0,i.jsx)(n.code,{children:"html-webpack-plugin"})," 的配置和之前使用没有什么区别。"]}),"\n",(0,i.jsxs)(n.h2,{id:"mini-css-extract-plugin",children:["mini-css-extract-plugin",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#mini-css-extract-plugin",children:"#"})]}),"\n",(0,i.jsxs)(n.h3,{id:"与-extract-text-webpack-plugin-区别",children:["与 extract-text-webpack-plugin 区别",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#与-extract-text-webpack-plugin-区别",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["由于",(0,i.jsx)(n.code,{children:"webpack4"}),"对 css 模块支持的完善以及在处理 css 文件提取的方式上也做了些调整，所以之前我们一直使用的",(0,i.jsx)(n.code,{children:"extract-text-webpack-plugin"}),"也完成了它的历史使命，将让位于",(0,i.jsx)(n.code,{children:"mini-css-extract-plugin"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:["使用方式也很简单，大家看着 ",(0,i.jsx)(n.a,{href:"https://github.com/webpack-contrib/mini-css-extract-plugin#minimal-example",target:"_blank",rel:"noopener noreferrer",children:"文档"})," 抄就可以了。"]}),"\n",(0,i.jsxs)(n.p,{children:["它与",(0,i.jsx)(n.code,{children:"extract-text-webpack-plugin"}),"最大的区别是：它在",(0,i.jsx)(n.code,{children:"code spliting"}),"的时候会将原先内联写在每一个 js ",(0,i.jsx)(n.code,{children:"chunk bundle"}),"的 css，单独拆成了一个个 css 文件。"]}),"\n",(0,i.jsx)(n.p,{children:"原先 css 是这样内联在 js 文件里的："}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/24/164cb85b234d224a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"})}),"\n",(0,i.jsxs)(n.p,{children:["将 css 独立拆包最大的好处就是 js 和 css 的改动，不会影响对方。比如我改了 js 文件并不会导致 css 文件的缓存失效。而且现在它自动会配合",(0,i.jsx)(n.code,{children:"optimization.splitChunks"}),"的配置，可以自定义拆分 css 文件，比如我单独配置了",(0,i.jsx)(n.code,{children:"element-ui"}),"作为单独一个",(0,i.jsx)(n.code,{children:"bundle"}),",它会自动也将它的样式单独打包成一个 css 文件，不会像以前默认将第三方的 css 全部打包成一个几十甚至上百 KB 的",(0,i.jsx)(n.code,{children:"app.xxx.css"}),"文件了。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/24/164cbd49dc148656?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"})}),"\n",(0,i.jsxs)(n.h3,{id:"压缩与优化",children:["压缩与优化",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#压缩与优化",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["打包 css 之后查看源码，我们发现它并没有帮我们做代码压缩，这时候需要使用 ",(0,i.jsx)(n.a,{href:"https://github.com/NMFR/optimize-css-assets-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"optimize-css-assets-webpack-plugin"})," 这个插件，它不仅能帮你压缩 css 还能优化你的代码。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"//配置\noptimization: {\n  minimizer: [new OptimizeCSSAssetsPlugin()];\n}\n\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/30/164e93dc299d7062?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"})}),"\n",(0,i.jsxs)(n.p,{children:["如上图测试用例所示，由于",(0,i.jsx)(n.code,{children:"optimize-css-assets-webpack-plugin"}),"这个插件默认使用了 ",(0,i.jsx)(n.a,{href:"https://github.com/cssnano/cssnano",target:"_blank",rel:"noopener noreferrer",children:"cssnano"})," 来作 css 优化， 所以它不仅压缩了代码、删掉了代码中无用的注释、还去除了冗余的 css、优化了 css 的书写顺序，优化了你的代码 ",(0,i.jsx)(n.code,{children:"margin: 10px 20px 10px 20px;"})," =>",(0,i.jsx)(n.code,{children:"margin:10px 20px;"}),"。同时大大减小了你 css 的文件大小。更多优化的细节见",(0,i.jsx)(n.a,{href:"https://cssnano.co/guides/optimisations",target:"_blank",rel:"noopener noreferrer",children:"文档"}),"。"]}),"\n",(0,i.jsxs)(n.h3,{id:"contenthash",children:["contenthash",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#contenthash",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["但使用 ",(0,i.jsx)(n.code,{children:"MiniCssExtractPlugin"})," 有一个需求特别注意的地方，在默认文档中它是这样配置的："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'new MiniCssExtractPlugin({\n  // Options similar to the same options in webpackOptions.output\n  // both options are optional\n  filename: devMode ? "[name].css" : "[name].[hash].css",\n  chunkFilename: devMode ? "[id].css" : "[id].[hash].css"\n});\n\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["简单说明一下： ",(0,i.jsx)(n.code,{children:"filename"})," 是指在你入口文件",(0,i.jsx)(n.code,{children:"entry"}),"中引入生成出来的文件名，而",(0,i.jsx)(n.code,{children:"chunkname"}),"是指那些未被在入口文件",(0,i.jsx)(n.code,{children:"entry"}),"引入，但又通过按需加载（异步）模块的时候引入的文件。"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["在 ",(0,i.jsx)(n.strong,{children:"copy"})," 如上代码使用之后发现情况不对！每次改动一个",(0,i.jsx)(n.code,{children:"xx.js"}),"文件，它对应的 css 虽然没做任何改动，但它的 文件 hash 还是会发生变化。仔细对比发现原来是 ",(0,i.jsx)(n.code,{children:"hash"})," 惹的祸。 ",(0,i.jsx)(n.code,{children:"6.f3bfa3af.css"})," => ",(0,i.jsx)(n.code,{children:"6.40bc56f6.css"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/24/164cbe27801ebf69?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"})}),"\n",(0,i.jsxs)(n.p,{children:["但我这是根据官方文档来写的！为什么还有问题！后来在文档的",(0,i.jsx)(n.strong,{children:"最最最"}),"下面发下了这么一段话！"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["For long term caching use filename: ",(0,i.jsx)(n.code,{children:"[contenthash].css"}),". Optionally add [name]."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["非常的不理解，这么关键的一句话会放在 ",(0,i.jsx)(n.code,{children:"Maintainers"})," 还后面的地方，默认写在配置里面提示大家不是更好？有热心群众已经开了一个",(0,i.jsx)(n.code,{children:"pr"}),"，将文档默认配置为 ",(0,i.jsx)(n.code,{children:"contenthash"}),"。",(0,i.jsx)(n.code,{children:"chunkhash"})," => ",(0,i.jsx)(n.code,{children:"contenthash"}),"相关 ",(0,i.jsx)(n.a,{href:"https://github.com/webpack/webpack.js.org/issues/2096",target:"_blank",rel:"noopener noreferrer",children:"issue"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:["这个真的蛮过分的，稍不注意就会让自己的 css 文件缓存无效。而且很多用户平时修改代码的时候都不会在意自己最终打包出来的 ",(0,i.jsx)(n.code,{children:"dist"}),"文件夹中到底有哪些变化。所以这个问题可能就一直存在了。浪费了多少资源！人艰不拆！大家觉得 webpack 难用不是没道理的。"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"补充一点"}),"：目前",(0,i.jsx)(n.code,{children:"MiniCssExtractPlugin"}),"也不是非常完美的，它现在默认会将每个 bundle 的 css 独立于 js文件， 单独拆成一个 css 文件。但这样会产生一个新的问题。比如我有一个页面它只有一行css，但也会被拆成了一个独立的css文件，还需要额外的一次 http 请求，非常的不合理。所以我就给官方提了一个 ",(0,i.jsx)(n.a,{href:"https://github.com/webpack-contrib/mini-css-extract-plugin/issues/234",target:"_blank",rel:"noopener noreferrer",children:"issue"}),"，呼吁增加一个",(0,i.jsx)(n.code,{children:"minSize"}),"，当 css 的内容小于这个",(0,i.jsx)(n.code,{children:"size"}),"的时候还是内联到 js 文件中，期待官方增加这个功能。"]}),"\n",(0,i.jsxs)(n.h3,{id:"这里再简单说明一下几种-hash-的区别",children:["这里再简单说明一下几种 hash 的区别：",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#这里再简单说明一下几种-hash-的区别",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"hash"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"hash"})," 和每次 ",(0,i.jsx)(n.code,{children:"build"}),"有关，没有任何改变的情况下，每次编译出来的 ",(0,i.jsx)(n.code,{children:"hash"}),"都是一样的，但当你改变了任何一点东西，它的",(0,i.jsx)(n.code,{children:"hash"}),"就会发生改变。"]}),"\n",(0,i.jsxs)(n.p,{children:["简单理解，你改了任何东西，",(0,i.jsx)(n.code,{children:"hash"})," 就会和上次不一样了。"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"chunkhash"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"chunkhash"}),"是根据具体每一个模块文件自己的的内容包括它的依赖计算所得的",(0,i.jsx)(n.code,{children:"hash"}),"，所以某个文件的改动只会影响它本身的",(0,i.jsx)(n.code,{children:"hash"}),"，不会影响其它文件。"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"contenthash"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["它的出现主要是为了解决，让",(0,i.jsx)(n.code,{children:"css"}),"文件不受",(0,i.jsx)(n.code,{children:"js"}),"文件的影响。比如",(0,i.jsx)(n.code,{children:"foo.css"}),"被",(0,i.jsx)(n.code,{children:"foo.js"}),"引用了，所以它们共用相同的",(0,i.jsx)(n.code,{children:"chunkhash"}),"值。但这样子是有问题的，如果",(0,i.jsx)(n.code,{children:"foo.js"}),"修改了代码，",(0,i.jsx)(n.code,{children:"css"}),"文件就算内容没有任何改变，由于是该模块的 ",(0,i.jsx)(n.code,{children:"hash"})," 发生了改变，其",(0,i.jsx)(n.code,{children:"css"}),"文件的",(0,i.jsx)(n.code,{children:"hash"}),"也会随之改变。"]}),"\n",(0,i.jsxs)(n.p,{children:["这个时候我们就可以使用",(0,i.jsx)(n.code,{children:"contenthash"}),"了，保证即使",(0,i.jsx)(n.code,{children:"css"}),"文件所处的模块里有任何内容的改变，只要 css 文件内容不变，那么它的",(0,i.jsx)(n.code,{children:"hash"}),"就不会发生变化。"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"contenthash"})," 你可以简单理解为是 ",(0,i.jsx)(n.code,{children:"moduleId"})," + ",(0,i.jsx)(n.code,{children:"content"})," 所生成的 ",(0,i.jsx)(n.code,{children:"hash"}),"。"]}),"\n",(0,i.jsxs)(n.h2,{id:"热更新速度",children:["热更新速度",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#热更新速度",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["其实相对 webpack 线上打包速度，我更关心的本地开发热更新速度，毕竟这才是和我们每一个程序员每天真正打交道的东西，打包一般都会扔给",(0,i.jsx)(n.code,{children:"CI"}),"自动执行，而且一般项目每天也不会打包很多次。"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"webpack 4"}),"一直说自己更好的利用了",(0,i.jsx)(n.code,{children:"cache"}),"提高了编译速度，但实测发现是有一定的提升，但当你一个项目，路由懒加载的页面多了之后，50+之后，热更新慢的问题会很明显，之前的",(0,i.jsx)(n.a,{href:"https://juejin.im/post/595b4d776fb9a06bbe7dba56#heading-1",target:"_blank",rel:"noopener noreferrer",children:"文章"}),"中也提到过这个问题，原以为新版本会解决这个问题，但并没有。"]}),"\n",(0,i.jsx)(n.p,{children:"不过你首先要排斥你的热更新慢不是，如："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["没有使用合理的 ",(0,i.jsx)(n.a,{href:"https://webpack.js.org/configuration/devtool/#devtool",target:"_blank",rel:"noopener noreferrer",children:"Devtool"})," souce map 导致"]}),"\n",(0,i.jsxs)(n.li,{children:["没有正确使用 ",(0,i.jsx)(n.a,{href:"https://webpack.js.org/configuration/module/#rule-include",target:"_blank",rel:"noopener noreferrer",children:"exclude/include"})," 处理了不需要处理的如",(0,i.jsx)(n.code,{children:"node_modules"})]}),"\n",(0,i.jsxs)(n.li,{children:["在开发环境不要压缩代码",(0,i.jsx)(n.code,{children:"UglifyJs"}),"、提取 css、babel polyfill、计算文件 hash 等不需要的操作"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"旧方案"})}),"\n",(0,i.jsxs)(n.p,{children:["最早的方案是开发环境中不是用路由懒加载了，只在线上环境中使用。封装一个",(0,i.jsx)(n.code,{children:"_import"}),"函数，通过环境变区分是否需要懒加载。"]}),"\n",(0,i.jsx)(n.p,{children:"开发环境："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'module.exports = file => require("@/views/" + file + ".vue").default;\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"生成环境："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'module.exports = file => () => import("@/views/" + file + ".vue");\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["但由于 webpack ",(0,i.jsx)(n.code,{children:"import"}),"实现机制问题，会产生一定的副作用。如上面的写法就会导致",(0,i.jsx)(n.code,{children:"@/views/"}),"下的 所有",(0,i.jsx)(n.code,{children:".vue"})," 文件都会被打包。不管你是否被依赖引用了，会多打包一些可能永远都用不到 js 代码。 ",(0,i.jsx)(n.a,{href:"https://github.com/PanJiaChen/vue-element-admin/issues/292",target:"_blank",rel:"noopener noreferrer",children:"相关 issue"})]}),"\n",(0,i.jsx)(n.p,{children:"目前新的解决方案思路还是一样的，只在生成模式中使用路由懒加载，本地开发不使用懒加载。但换了一种没副作用的实现方式。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"新方案"})}),"\n",(0,i.jsxs)(n.p,{children:["使用",(0,i.jsx)(n.code,{children:"babel"})," 的 ",(0,i.jsx)(n.code,{children:"plugins"})," ",(0,i.jsx)(n.a,{href:"https://github.com/airbnb/babel-plugin-dynamic-import-node",target:"_blank",rel:"noopener noreferrer",children:"babel-plugin-dynamic-import-node"}),"。它只做一件事就是：将所有的",(0,i.jsx)(n.code,{children:"import()"}),"转化为",(0,i.jsx)(n.code,{children:"require()"}),"，这样就可以用这个插件将所有异步组件都用同步的方式引入了，并结合 ",(0,i.jsx)(n.a,{href:"https://babeljs.io/docs/usage/babelrc/#env-option",target:"_blank",rel:"noopener noreferrer",children:"BABEL_ENV"})," 这个",(0,i.jsx)(n.code,{children:"bebel"}),"环境变量，让它只作用于开发环境下。将开发环境中所有",(0,i.jsx)(n.code,{children:"import()"}),"转化为",(0,i.jsx)(n.code,{children:"require()"}),"，这种方案解决了之前重复打包的问题，同时对代码的侵入性也很小，你平时写路由的时候只需要按照官方",(0,i.jsx)(n.a,{href:"https://router.vuejs.org/zh/guide/advanced/lazy-loading.html",target:"_blank",rel:"noopener noreferrer",children:"文档"}),"路由懒加载的方式就可以了，其它的都交给",(0,i.jsx)(n.code,{children:"babel"}),"来处理，当你不想用这个方案的时候，也只需要将它从",(0,i.jsx)(n.code,{children:"babel"})," 的 ",(0,i.jsx)(n.code,{children:"plugins"}),"中移除就可以了。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"具体代码："})}),"\n",(0,i.jsxs)(n.p,{children:["首先在",(0,i.jsx)(n.code,{children:"package.json"}),"中增加",(0,i.jsx)(n.code,{children:"BABEL_ENV"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'"dev": "BABEL_ENV=development webpack-dev-server XXXX"\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["接着在",(0,i.jsx)(n.code,{children:".babelrc"}),"只能加入",(0,i.jsx)(n.code,{children:"babel-plugin-dynamic-import-node"}),"这个",(0,i.jsx)(n.code,{children:"plugins"}),"，并让它只有在",(0,i.jsx)(n.code,{children:"development"}),"模式中才生效。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{\n  "env": {\n    "development": {\n      "plugins": ["dynamic-import-node"]\n    }\n  }\n}\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["之后就大功告成了，路由只要像平时一样写就可以了。",(0,i.jsx)(n.a,{href:"https://panjiachen.github.io/vue-element-admin-site/zh/guide/advanced/lazy-loading.html#%E6%96%B0%E6%96%B9%E6%A1%88",target:"_blank",rel:"noopener noreferrer",children:"文档"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:" { path: '/login', component: () => import('@/views/login/index')}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["这样能大大提升你热更新的速度。基本两百加页面也能在",(0,i.jsx)(n.code,{children:"2000ms"}),"的热跟新完成，基本做到无感刷新。当然你的项目本身就不大页面也不多，完全没必要搞这些。",(0,i.jsx)(n.strong,{children:"当你的页面变化跟不是你写代码速度的时候再考虑也不迟。"})]}),"\n",(0,i.jsxs)(n.h2,{id:"打包速度",children:["打包速度",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#打包速度",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"webpack 4"})," 在项目中实际测了下，普遍能提高 20%~30%的打包速度。"]}),"\n",(0,i.jsxs)(n.p,{children:["本文不准备太深入的讲解这部分内容，详细的打包优化速度可以参考",(0,i.jsx)(n.a,{href:"https://slack.engineering/keep-webpack-fast-a-field-guide-for-better-build-performance-f56a5995e8f1",target:"_blank",rel:"noopener noreferrer",children:" slack 团队的这篇文章"}),"，掘金还有",(0,i.jsx)(n.a,{href:"https://github.com/xitu/gold-miner/blob/master/TODO/keep-webpack-fast-a-field-guide-for-better-build-performance.md",target:"_blank",rel:"noopener noreferrer",children:"译文"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"这里有几个建议来帮你加速 webpack 的打包速度。"}),"\n",(0,i.jsx)(n.p,{children:"首先你需要知道你目前打包慢，是慢在哪里。"}),"\n",(0,i.jsxs)(n.p,{children:["我们可以用 ",(0,i.jsx)(n.a,{href:"https://github.com/stephencookdev/speed-measure-webpack-plugin#readme",target:"_blank",rel:"noopener noreferrer",children:"speed-measure-webpack-plugin"})," 这个插件，它能监控 webpack 每一步操作的耗时。如下图："]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/31/164eee200ebc1911?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"})}),"\n",(0,i.jsxs)(n.p,{children:["可以看出其实大部分打包花费的时间是在",(0,i.jsx)(n.code,{children:"Uglifyjs"}),"压缩代码。和前面的提升热更新的切入点差不多，查看",(0,i.jsx)(n.code,{children:"source map"}),"的正确与否，",(0,i.jsx)(n.code,{children:"exclude/include"}),"的正确使用等等。"]}),"\n",(0,i.jsxs)(n.p,{children:["使用新版的",(0,i.jsx)(n.code,{children:"UglifyJsPlugin"}),"的时候记住可以加上",(0,i.jsx)(n.code,{children:"cache: true"}),"、",(0,i.jsx)(n.code,{children:"parall: true"}),"，可以提搞代码打包压缩速度。更多配置可以参考 ",(0,i.jsx)(n.a,{href:"https://github.com/webpack-contrib/uglifyjs-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"文档"})," 或者 vue-cli 的 ",(0,i.jsx)(n.a,{href:"https://github.com/vuejs/vue-cli/blob/dev/packages/@vue/cli-service/lib/config/uglifyOptions.js",target:"_blank",rel:"noopener noreferrer",children:"配置"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:["编译的时候还有还有一个很慢的原因是那些第三方库。比如",(0,i.jsx)(n.code,{children:"echarts"}),"、",(0,i.jsx)(n.code,{children:"element-ui"}),"其实都非常的大，比如",(0,i.jsx)(n.code,{children:"echarts"}),"打包完也还有 775kb。所以你想大大提高编译速度，可以将这些第三方库 ",(0,i.jsx)(n.code,{children:"externals"})," 出去，使用",(0,i.jsx)(n.code,{children:"script"}),"的方式引入，或者使用 ",(0,i.jsx)(n.code,{children:"dll"}),"的方式打包。经测试一般如",(0,i.jsx)(n.code,{children:"echarts"}),"这样大的包可以节省十几秒到几十秒不等。"]}),"\n",(0,i.jsxs)(n.p,{children:["还有可以使用一些并行执行 webpack 的库：如",(0,i.jsx)(n.a,{href:"https://github.com/trivago/parallel-webpack",target:"_blank",rel:"noopener noreferrer",children:"parallel-webpack"}),"、",(0,i.jsx)(n.a,{href:"https://github.com/amireh/happypack",target:"_blank",rel:"noopener noreferrer",children:"happypack"}),"。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["顺便说一下，升级一下",(0,i.jsx)(n.code,{children:"node"}),"可能有惊喜。前不久将",(0,i.jsx)(n.code,{children:"CI"}),"里面的 node 版本依赖从 ",(0,i.jsx)(n.code,{children:"6.9.2"})," => ",(0,i.jsx)(n.code,{children:"8.11.3"}),"，打包速度直接提升了一分多钟。"]})}),"\n",(0,i.jsx)(n.p,{children:"总之我觉得打包时间控制在差不多的范围内就可以了，没必要过分的优化。可能你研究了半天，改了一堆参数发现其实也就提升了几秒，但维护成本上去了，得不偿失。还不如升级 node、升级 webpack、升级你的编译环境的硬件水平来的实在和简单。"}),"\n",(0,i.jsxs)(n.p,{children:["比如我司",(0,i.jsx)(n.code,{children:"CI"}),"使用的是腾讯云普通的的 8 核 16g 的机器，这个项目也是一个很大的后台管理项目 200+页面，引用了很多第三方的库，但没有使用什么",(0,i.jsx)(n.code,{children:"happypack"}),"、",(0,i.jsx)(n.code,{children:"dll"}),"，只是用了最新版的",(0,i.jsx)(n.code,{children:"webpack4"}),"，",(0,i.jsx)(n.code,{children:"node@8.11.3"}),"。 编译速度稳定在两分多钟，完全不觉得有什么要优化的必要。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/29/164e5366dd1d9dec?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"})}),"\n",(0,i.jsxs)(n.h2,{id:"tree-shaking",children:["Tree-Shaking",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tree-shaking",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["这其实并不是 webpack 4 才提出来的概念，最早是 ",(0,i.jsx)(n.a,{href:"https://github.com/rollup/rollup",target:"_blank",rel:"noopener noreferrer",children:"rollup"})," 提出来并实现的，后来在 webpack 2 中就实现了，本次在 webpack 4 只是增加了 ",(0,i.jsx)(n.code,{children:"JSON Tree Shaking"}),"和",(0,i.jsx)(n.code,{children:"sideEffects"}),"能让你能更好的",(0,i.jsx)(n.strong,{children:"摇"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:["不过这里还是要提一下，默认 webpack 是支持",(0,i.jsx)(n.code,{children:"Tree-Shaking"}),"的，但在你的项目中可能会因为",(0,i.jsx)(n.code,{children:"babel"}),"的原因导致它失效。"]}),"\n",(0,i.jsxs)(n.p,{children:["因为",(0,i.jsx)(n.code,{children:"Tree Shaking"}),"这个功能是基于",(0,i.jsx)(n.code,{children:"ES6 modules"})," 的静态特性检测，来找出未使用的代码，所以如果你使用了 babel 插件的时候，如：",(0,i.jsx)(n.a,{href:"https://babeljs.io/docs/en/babel-preset-env/",target:"_blank",rel:"noopener noreferrer",children:"babel-preset-env"}),"，它默认会将模块打包成",(0,i.jsx)(n.code,{children:"commonjs"}),"，这样就会让",(0,i.jsx)(n.code,{children:"Tree Shaking"}),"失效了。"]}),"\n",(0,i.jsxs)(n.p,{children:["其实在 webpack 2 之后它自己就支持模块化处理。所以只要让 babel 不",(0,i.jsx)(n.code,{children:"transform modules"}),"就可以了。配置如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'// .babelrc\n{\n  "presets": [\n    ["env", {\n      modules: false,\n      ...\n    }]\n  ]\n}\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["顺便说一下都 8102 年了，请不要在使用",(0,i.jsx)(n.code,{children:"babel-preset-esxxxx"}),"系列了，请用",(0,i.jsx)(n.code,{children:"babel-preset-env"}),"，相关文章 ",(0,i.jsx)(n.a,{href:"https://zhuanlan.zhihu.com/p/29506685",target:"_blank",rel:"noopener noreferrer",children:"再见，babel-preset-2015"}),"。"]}),"\n",(0,i.jsxs)(n.h1,{id:"第二部分",children:["第二部分",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#第二部分",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"本文为手摸手使用 webpack4（下），主要分为两部分："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"怎么合理的运用浏览器缓存"}),"\n",(0,i.jsx)(n.li,{children:"怎么构建可靠的持久化缓存"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"默认分包策略",children:["默认分包策略",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#默认分包策略",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["webpack 4 最大的改动就是废除了 ",(0,i.jsx)(n.code,{children:"CommonsChunkPlugin"})," 引入了 ",(0,i.jsx)(n.code,{children:"optimization.splitChunks"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:["webpack 4 的",(0,i.jsx)(n.code,{children:"Code Splitting"})," 它最大的特点就是配置简单，如果你的 ",(0,i.jsx)(n.code,{children:"mode"})," 是 ",(0,i.jsx)(n.code,{children:"production"}),"，那么 webpack 4 就会自动开启 ",(0,i.jsx)(n.code,{children:"Code Splitting"}),"。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/24/164cac10a2222794?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["以下内容都会以 ",(0,i.jsx)(n.a,{href:"https://github.com/PanJiaChen/vue-element-admin",target:"_blank",rel:"noopener noreferrer",children:"vue-element-admin"})," 为例子。 在线 ",(0,i.jsx)(n.a,{href:"https://panjiachen.gitee.io/vue-element-admin/bundle-report",target:"_blank",rel:"noopener noreferrer",children:"bundle-report"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["如上图所示，在没配置任何东西的情况下，webpack 4 就智能的帮你做了代码分包。入口文件依赖的文件都被打包进了",(0,i.jsx)(n.code,{children:"app.js"}),"，那些大于 30kb 的第三方包，如：",(0,i.jsx)(n.code,{children:"echarts"}),"、",(0,i.jsx)(n.code,{children:"xlsx"}),"、",(0,i.jsx)(n.code,{children:"dropzone"}),"等都被单独打包成了一个个独立 bundle。"]}),"\n",(0,i.jsx)(n.p,{children:"它内置的代码分割策略是这样的："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"新的 chunk 是否被共享或者是来自 node_modules 的模块"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"新的 chunk 体积在压缩之前是否大于 30kb"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"按需加载 chunk 的并发请求数量小于等于 5 个"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"页面初始加载时的并发请求数量小于等于 3 个"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/31/164efb0fedb0bef7?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"})}),"\n",(0,i.jsxs)(n.p,{children:["但有一些小的组件，如上图：",(0,i.jsx)(n.a,{href:"https://github.com/PanJiaChen/vue-countTo",target:"_blank",rel:"noopener noreferrer",children:"vue-count-to"})," 在未压缩的情况下只有 5kb，虽然它被两个页面共用了，但 webpack 4 默认的情况下还是会将它和那些懒加载的页面代码打包到一起，并不会单独将它拆成一个独立的 bundle。（虽然被共用了，但因为体积没有大于 30kb）"]}),"\n",(0,i.jsxs)(n.p,{children:["你可能会觉得 webpack 默认策略是不是有问题，我一个组件被多个页面，你每个页面都将这个组件打包进去了，岂不是会重复打包很多次这个组件？就拿",(0,i.jsx)(n.code,{children:"vue-count-to"}),"来举例，你可以把共用",(0,i.jsx)(n.code,{children:"两次以上"}),"的组件或者代码单独抽出来打包成一个 bundle，但你不要忘了",(0,i.jsx)(n.code,{children:"vue-count-to"}),"未压缩的情况下就只有 5kb，gizp 压缩完可能只有 1.5kb 左右，你为了共用这 1.5kb 的代码，却要额外花费一次 http 请求的时间损耗，得不偿失。我个人认为 webpack 目前默认的打包规则是一个比较合理的策略了。"]}),"\n",(0,i.jsxs)(n.p,{children:["但有些场景下这些规则可能就显得不怎么合理了。比如我有一个管理后台，它大部分的页面都是表单和 Table，我使用了一个第三方 table 组件，几乎后台每个页面都需要它，但它的体积也就 15kb，不具备单独拆包的标准，它就这样被打包到每个页面的 bundle 中了，这就很浪费资源了。这种情况下建议把大部分页面能共用的组件单独抽出来，合并成一个",(0,i.jsx)(n.code,{children:"component-vendor.js"}),"的包（后面会介绍）。"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"优化没有银弹"}),"，不同的业务，优化的侧重点是不同的。个人认为 webpack 4 默认拆包已经做得不错了，对于大部分简单的应用来说已经够用了。但作为一个通用打包工具，它是不可能满足所有的业务形态和场景的，所以接下来就需要我们自己稍微做一些优化了。"]}),"\n",(0,i.jsxs)(n.h2,{id:"优化分包策略",children:["优化分包策略",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#优化分包策略",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["就拿 ",(0,i.jsx)(n.a,{href:"https://github.com/PanJiaChen/vue-element-admin",target:"_blank",rel:"noopener noreferrer",children:"vue-element-admin"})," 来说，它是一个基于 ",(0,i.jsx)(n.a,{href:"https://github.com/ElemeFE/element",target:"_blank",rel:"noopener noreferrer",children:"Element-UI"})," 的管理后台，所以它会用到如 ",(0,i.jsx)(n.code,{children:"echarts"}),"、",(0,i.jsx)(n.code,{children:"xlsx"}),"、",(0,i.jsx)(n.code,{children:"dropzone"}),"等各种第三方插件，同时又由于是管理后台，所以本身自己也会写很多共用组件，比如各种封装好的搜索查询组件，共用的业务模块等等，如果按照默认的拆包规则，结果就不怎么完美了。"]}),"\n",(0,i.jsxs)(n.p,{children:["如第一张图所示，由于",(0,i.jsx)(n.code,{children:"element-ui"}),"在",(0,i.jsx)(n.code,{children:"entry"}),"入口文件中被引入并且被大量页面共用，所以它默认会被打包到 ",(0,i.jsx)(n.code,{children:"app.js"})," 之中。这样做是不合理的，因为",(0,i.jsx)(n.code,{children:"app.js"}),"里还含有你的",(0,i.jsx)(n.code,{children:"router 路由声明"}),"、",(0,i.jsx)(n.code,{children:"store 全局状态"}),"、",(0,i.jsx)(n.code,{children:"utils 公共函数"}),"，",(0,i.jsx)(n.code,{children:"icons 图标"}),"等等这些全局共用的东西。"]}),"\n",(0,i.jsxs)(n.p,{children:["但除了",(0,i.jsx)(n.code,{children:"element-ui"}),"，其它这些又是平时开发中经常会修改的东西，比如我新增了一个全局功能函数，",(0,i.jsx)(n.code,{children:"utils文件"}),"就会发生改变，或者我修改一个路由的 path，",(0,i.jsx)(n.code,{children:"router文件"}),"就变了，这些都会导致",(0,i.jsx)(n.code,{children:"app.js"}),"的 hash 发生改变：",(0,i.jsx)(n.code,{children:"app.1.js"})," => ",(0,i.jsx)(n.code,{children:"app.2.js"}),"。但由于 ",(0,i.jsx)(n.code,{children:"element-ui"}),"和 ",(0,i.jsx)(n.code,{children:"vue/react"}),"等也被打包在其中，虽然你没改变它们，但它们的缓存也会随着",(0,i.jsx)(n.code,{children:"app.xxx.js"}),"变化而失效了，这就非常不合理的。所以我们需要自己来优化一下缓存策略。"]}),"\n",(0,i.jsx)(n.p,{children:"我们现在的策略是按照体积大小、共用率、更新频率重新划分我们的包，使其尽可能的利用浏览器缓存。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/8/7/16513e5b6a73ac96?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"})}),"\n",(0,i.jsx)(n.p,{children:"我们根据上表来重新划分我们的代码就变成了这样。"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"基础类库 chunk-libs"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["它是构成我们项目必不可少的一些基础类库，比如 ",(0,i.jsx)(n.code,{children:"vue"}),"+",(0,i.jsx)(n.code,{children:"vue-router"}),"+",(0,i.jsx)(n.code,{children:"vuex"}),"+",(0,i.jsx)(n.code,{children:"axios"})," 这种标准的全家桶，它们的升级频率都不高，但每个页面都需要它们。（一些全局被共用的，体积不大的第三方库也可以放在其中：比如 nprogress、js-cookie、clipboard 等）"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"UI 组件库"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["理论上 UI 组件库也可以放入 libs 中，但这里单独拿出来的原因是： 它实在是比较大，不管是 ",(0,i.jsx)(n.code,{children:"Element-UI"}),"还是",(0,i.jsx)(n.code,{children:"Ant Design"})," gizp 压缩完都可能要 200kb 左右，它可能比 libs 里面所有的库加起来还要大不少，而且 UI 组件库的更新频率也相对的比 libs 要更高一点。我们不时的会升级 UI 组件库来解决一些现有的 bugs 或使用它的一些新功能。所以建议将 UI 组件库也单独拆成一个包。"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"自定义组件/函数 chunk-commons"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["这里的 commons 主要分为 ",(0,i.jsx)(n.strong,{children:"必要"}),"和",(0,i.jsx)(n.strong,{children:"非必要"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:["必要组件是指那些项目里必须加载它们才能正常运行的组件或者函数。比如你的路由表、全局 state、全局侧边栏/Header/Footer 等组件、自定义 Svg 图标等等。这些其实就是你在入口文件中依赖的东西，它们都会默认打包到",(0,i.jsx)(n.code,{children:"app.js"}),"中。"]}),"\n",(0,i.jsxs)(n.p,{children:["非必要组件是指被大部分页面使用，但在入口文件 entry 中未被引入的模块。比如：一个管理后台，你封装了很多 select 或者 table 组件，由于它们的体积不会很大，它们都会被默认打包到到每一个懒加载页面的 chunk 中，这样会造成不少的浪费。你有十个页面引用了它，就会包重复打包十次。所以应该将那些被大量共用的组件单独打包成",(0,i.jsx)(n.code,{children:"chunk-commons"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:["不过还是要结合具体情况来看。一般情况下，你也可以将那些",(0,i.jsx)(n.em,{children:"非必要组件\\函数"}),"也在入口文件 entry 中引入，和",(0,i.jsx)(n.em,{children:"必要组件\\函数"}),"一同打包到",(0,i.jsx)(n.code,{children:"app.js"}),"之中也是没什么问题的。"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"低频组件"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["低频组件和上面的共用组件 ",(0,i.jsx)(n.code,{children:"chunk-commons"})," 最大的区别是，它们只会在一些特定业务场景下使用，比如富文本编辑器、",(0,i.jsx)(n.code,{children:"js-xlsx"}),"前端 excel 处理库等。一般这些库都是第三方的且大于 30kb，所以 webpack 4 会默认打包成一个独立的 bundle。也无需特别处理。小于 30kb 的情况下会被打包到具体使用它的页面 bundle 中。"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"业务代码"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["这部分就是我们平时经常写的业务代码。一般都是按照页面的划分来打包，比如在 vue 中，使用",(0,i.jsx)(n.a,{href:"https://router.vuejs.org/zh/guide/advanced/lazy-loading.html",target:"_blank",rel:"noopener noreferrer",children:"路由懒加载"}),"的方式加载页面 ",(0,i.jsx)(n.code,{children:"component: () => import('./Foo.vue')"})," webpack 默认会将它打包成一个独立的 bundle。"]}),"\n",(0,i.jsx)(n.p,{children:"完整配置代码："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'splitChunks: {\n  chunks: "all",\n  cacheGroups: {\n    libs: {\n      name: "chunk-libs",\n      test: /[\\\\/]node_modules[\\\\/]/,\n      priority: 10,\n      chunks: "initial" // 只打包初始时依赖的第三方\n    },\n    elementUI: {\n      name: "chunk-elementUI", // 单独将 elementUI 拆包\n      priority: 20, // 权重要大于 libs 和 app 不然会被打包进 libs 或者 app\n      test: /[\\\\/]node_modules[\\\\/]element-ui[\\\\/]/\n    },\n    commons: {\n      name: "chunk-commons",\n      test: resolve("src/components"), // 可自定义拓展你的规则\n      minChunks: 2, // 最小共用次数\n      priority: 5,\n      reuseExistingChunk: true\n    }\n  }\n};\n\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/8/3/164fefcc3a2ef69f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"})}),"\n",(0,i.jsxs)(n.p,{children:["上图就是最终拆包结果概要，你可以 ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://panjiachen.gitee.io/vue-element-admin/bundle-report",target:"_blank",rel:"noopener noreferrer",children:"点我点我点我"})}),"，在线查看拆包结果。"]}),"\n",(0,i.jsxs)(n.p,{children:["这样就能尽可能的利用了浏览器缓存。当然这种优化还是需要因项目而异的。比如上图中的共用组件 ",(0,i.jsx)(n.code,{children:"chunk-commons"}),"，可能打包出来发现特别大，包含了很多组件，但又不是每一个页面或者大部分页面需要它。很可能出现这种状况：A 页面只需要 ",(0,i.jsx)(n.code,{children:"chunk-commons"}),"里面的 A 组件， 但却要下载整个",(0,i.jsx)(n.code,{children:"chunk-commons.js"}),"，这时候就需要考虑一下，目前的拆包策略是否合理，是否还需要",(0,i.jsx)(n.code,{children:"chunk-commons"}),"？还是将这些组件打包到各自的 bundle 中？还是调整一下 ",(0,i.jsx)(n.code,{children:"minChunks: 2"}),"（ 最小共用次数）？或者修改一下它的拆包规则？"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'// 或者你可以把策略改为只提取那些你注册在全局的组件。\n\n- test: resolve("src/components")\n+ test: resolve("src/components/global_components") //你注册全局组件的目录\n\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"博弈",children:["博弈",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#博弈",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["其实优化就是一个",(0,i.jsx)(n.strong,{children:"博弈"}),"的过程，是让 a bundle 大一点还是 b? 是让首次加载快一点还是让 cache 的利用率高一点？ 但有一点要切记，拆包的时候不要过分的追求颗粒化，什么都单独的打成一个 bundle，不然你一个页面可能需要加载十几个",(0,i.jsx)(n.code,{children:".js"}),"文件，如果你还不是",(0,i.jsx)(n.code,{children:"HTTP/2"}),"的情况下，请求的阻塞还是很明显的(受限于浏览器并发请求数)。所以还是那句话资源的加载策略并没什么完全的方案，都需要结合自己的项目找到最合适的拆包策略。"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["比如支持",(0,i.jsx)(n.code,{children:"HTTP/2"}),"的情况下，你可以使用 ",(0,i.jsx)(n.code,{children:"webpack4.15.0"})," 新增的 ",(0,i.jsx)(n.a,{href:"https://webpack.js.org/plugins/split-chunks-plugin/#splitchunks-maxsize",target:"_blank",rel:"noopener noreferrer",children:"maxSize"}),"，它能将你的",(0,i.jsx)(n.code,{children:"chunk"}),"在",(0,i.jsx)(n.code,{children:"minSize"}),"的范围内更加合理的拆分，这样可以更好地利用",(0,i.jsx)(n.code,{children:"HTTP/2"}),"来进行长缓存(在",(0,i.jsx)(n.code,{children:"HTTP/2"}),"的情况下，缓存策略就和之前又不太一样了)。"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"long-term-caching",children:["Long term caching",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#long-term-caching",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"持久化缓存其实是一个老生常谈的问题，前端发展到现在，缓存方案已经很成熟了。简单原理："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"针对 html 文件：不开启缓存，把 html 放到自己的服务器上，关闭服务器的缓存"}),"\n",(0,i.jsx)(n.li,{children:"针对静态的 js，css，图片等文件：开启 cdn 和缓存，将静态资源上传到 cdn 服务商，我们可以对资源开启长期缓存，因为每个资源的路径都是独一无二的，所以不会导致资源被覆盖，保证线上用户访问的稳定性。"}),"\n",(0,i.jsx)(n.li,{children:"每次发布更新的时候，先将静态资源(js, css, img) 传到 cdn 服务上，然后再上传 html 文件，这样既保证了老用户能否正常访问，又能让新用户看到新的页面。"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["相关文章 ",(0,i.jsx)(n.a,{href:"https://www.zhihu.com/question/20790576/answer/32602154",target:"_blank",rel:"noopener noreferrer",children:"大公司里怎样开发和部署前端代码？"})]}),"\n",(0,i.jsx)(n.p,{children:"所以我们现在要做的就是要让 webpack 给静态资源生产一个可靠的 hash，让它能自动在合适的时候更新资源的 hash， 并且保证 hash 值的唯一性，即为每个打包后的资源生成一个独一无二的 hash 值，只要打包内容不一样，那么 hash 值就不一样。"}),"\n",(0,i.jsx)(n.p,{children:"其实 webpack 4 在持久化缓存这一块已经做得非常的不错了，但还是有一些欠缺，下面我们将要从这几个方面讨论这个问题。"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"RuntimeChunk(manifest)"}),"\n",(0,i.jsx)(n.li,{children:"Module vs Chunk"}),"\n",(0,i.jsx)(n.li,{children:"HashedModuleIdsPlugin"}),"\n",(0,i.jsx)(n.li,{children:"NamedChunksPlugin"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"runtimechunkmanifest",children:["RuntimeChunk(manifest)",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#runtimechunkmanifest",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["webpack 4 提供了 runtimeChunk 能让我们方便的提取 ",(0,i.jsx)(n.code,{children:"manifest"}),"，以前我们需要这样配置"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'new webpack.optimize.CommonsChunkPlugin({\n  name: "manifest",\n  minChunks: Infinity\n});\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"现在只要一行配置就可以了"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"{\n  runtimeChunk: true;\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["它的作用是将包含",(0,i.jsx)(n.code,{children:"chunks 映射关系的 list"}),"单独从 ",(0,i.jsx)(n.code,{children:"app.js"}),"里提取出来，因为每一个 chunk 的 id 基本都是基于内容 hash 出来的，所以你每次改动都会影响它，如果不将它提取出来的话，等于",(0,i.jsx)(n.code,{children:"app.js"}),"每次都会改变。缓存就失效了。"]}),"\n",(0,i.jsxs)(n.p,{children:["单独抽离 runtimeChunk 之后，每次打包都会生成一个",(0,i.jsx)(n.code,{children:"runtimeChunk.xxx.js"}),"。（默认叫这名字，可自行修改）"]}),"\n",(0,i.jsxs)(n.p,{children:["![img](data:image/svg+xml;utf8,",")"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"优化"})}),"\n",(0,i.jsxs)(n.p,{children:["其实我们发现打包生成的 ",(0,i.jsx)(n.code,{children:"runtime.js"}),"非常的小，gzip 之后一般只有几 kb，但这个文件又经常会改变，我们每次都需要重新请求它，它的 http 耗时远大于它的执行时间了，所以建议不要将它单独拆包，而是将它内联到我们的 ",(0,i.jsx)(n.code,{children:"index.html"})," 之中(",(0,i.jsx)(n.code,{children:"index.html"})," 本来每次打包都会变)。"]}),"\n",(0,i.jsxs)(n.p,{children:["这里我选用了 ",(0,i.jsx)(n.a,{href:"https://github.com/numical/script-ext-html-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"script-ext-html-webpack-plugin"}),"，主要是因为它还支持",(0,i.jsx)(n.code,{children:"preload"}),"和 ",(0,i.jsx)(n.code,{children:"prefetch"}),"，正好需要就不想再多引用一个插件了，你完全可以使用 ",(0,i.jsx)(n.a,{href:"https://github.com/szrenwei/inline-manifest-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"inline-manifest-webpack-plugin"}),"或者 ",(0,i.jsx)(n.a,{href:"https://github.com/ztoben/assets-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"assets-webpack-plugin"}),"等来实现相同的效果。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'const ScriptExtHtmlWebpackPlugin = require("script-ext-html-webpack-plugin");\n\n// 注意一定要在HtmlWebpackPlugin之后引用\n// inline 的name 和你 runtimeChunk 的 name保持一致\nnew ScriptExtHtmlWebpackPlugin({\n  //`runtime` must same as runtimeChunk name. default is `runtime`\n  inline: /runtime\\..*\\.js$/\n});\n\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"module-vs-chunk",children:["Module vs Chunk",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#module-vs-chunk",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["我们经常看到",(0,i.jsx)(n.code,{children:"xxxModuleIdsPlugin"}),"、",(0,i.jsx)(n.code,{children:"xxxChunksPlugin"}),"，所以在 webpack 中 ",(0,i.jsx)(n.code,{children:"module"}),"和 ",(0,i.jsx)(n.code,{children:"chunk"}),"到底是一个怎么样的关系呢？"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"chunk: 是指代码中引用的文件（如：js、css、图片等）会根据配置合并为一个或多个包，我们称一个包为 chunk。"}),"\n",(0,i.jsx)(n.li,{children:"module: 是指将代码按照功能拆分，分解成离散功能块。拆分后的代码块就叫做 module。可以简单的理解为一个 export/import 就是一个 module。"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"每个 chunk 包可含多个 module。"})," 比如："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"//9.xxxxxxxxx.js\n\n//chunk id为 9 ，包含了Vc2m和JFUb两个module\n(window.webpackJsonp = window.webpackJsonp || []).push([\n  [9],\n  {\n    Vc2m: function(e, t, l) {},\n    JFUb: function(e, t, l) {}\n  }\n]);\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["一个",(0,i.jsx)(n.code,{children:"module"}),"还能跨",(0,i.jsx)(n.code,{children:"chunk"}),"引用另一个",(0,i.jsx)(n.code,{children:"module"}),"，比如我想在",(0,i.jsx)(n.code,{children:"app.js"}),"里面需要引用 ",(0,i.jsx)(n.code,{children:"chunkId"}),"为",(0,i.jsx)(n.code,{children:"13"}),"的模块",(0,i.jsx)(n.code,{children:"2700"}),"可以这样引用："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'return n.e(13).then(n.bind(null, "27OO"));\n\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"hashedmoduleidsplugin",children:["HashedModuleIdsPlugin",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#hashedmoduleidsplugin",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["了解了 ",(0,i.jsx)(n.code,{children:"module"}),"和",(0,i.jsx)(n.code,{children:"chunk"}),"之后，我们来研究一下 ",(0,i.jsx)(n.code,{children:"moduleId"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:["首先要确定你的 filename 配置的是",(0,i.jsx)(n.code,{children:"chunkhash"}),"(它与 hash 的区别可以看上篇文章)。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"output: {\n  path: path.join(__dirname, 'dist'),\n  filename: '[name].[chunkhash].js',\n}\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["我们在入口文件中随便引入一个新文件",(0,i.jsx)(n.code,{children:"test.js"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'//main.js\nimport "./test";\n\n//test.js\nconsole.log("apple");\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["我们运行",(0,i.jsx)(n.code,{children:"npm run build"}),"，发现了一件奇怪的事情，我只是多引入了一个文件，但发现有十几个文件发生了变化。这是为什么呢？"]}),"\n",(0,i.jsxs)(n.p,{children:["我们随便挑一个文件 diff 一下，发现两个文件只有 ",(0,i.jsx)(n.code,{children:"module id"})," 的不同。"]}),"\n",(0,i.jsxs)(n.p,{children:["![img](data:image/svg+xml;utf8,",")"]}),"\n",(0,i.jsxs)(n.p,{children:["这是因为： ",(0,i.jsx)(n.strong,{children:"webpack 内部维护了一个自增的 id，每个 module 都有一个 id。所以当增加或者删除 module 的时候，id 就会变化，导致其它文件虽然没有变化，但由于 id 被强占，只能自增或者自减，导致整个 id 的顺序都错乱了。"})]}),"\n",(0,i.jsxs)(n.p,{children:["虽然我们使用 [chunkhash] 作为输出名，但仍然是不够的。 因为 chunk 内部的每个 module 都有一个 id，webpack 默认使用递增的数字作为 ",(0,i.jsx)(n.code,{children:"moduleId"}),"。 如果引入了一个新文件或删掉一个文件，都可能会导致其它文件的 ",(0,i.jsx)(n.code,{children:"moduleId"})," 发生改变， 那这样缓存失效了。如："]}),"\n",(0,i.jsxs)(n.p,{children:["![img](data:image/svg+xml;utf8,",")"]}),"\n",(0,i.jsxs)(n.p,{children:["本来是一个按序的 moduleId list，这时候我插入一个",(0,i.jsx)(n.code,{children:"orange"}),"模块，插在第三个位置，这样就会导致它之后的所以 module id 都依次加了 1。"]}),"\n",(0,i.jsxs)(n.p,{children:["这到了原因，解决方案就很简单了。我们就不要使用一个自增的 id 就好了，这里我们使用",(0,i.jsx)(n.code,{children:"HashedModuleIdsPlugin"}),"。"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["或者使用",(0,i.jsx)(n.code,{children:"optimization.moduleIds"})," ",(0,i.jsx)(n.a,{href:"https://github.com/webpack/webpack/releases/tag/v4.16.0",target:"_blank",rel:"noopener noreferrer",children:"v4.16.0"})," 新发布，文档还没有。查看 ",(0,i.jsx)(n.a,{href:"https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js#L374",target:"_blank",rel:"noopener noreferrer",children:"源码"}),"发现它有",(0,i.jsx)(n.code,{children:"natural"}),"、",(0,i.jsx)(n.code,{children:"named"}),"、",(0,i.jsx)(n.code,{children:"hashed"}),"、",(0,i.jsx)(n.code,{children:"size"}),"、",(0,i.jsx)(n.code,{children:"total-size"}),"。这里我们设置为",(0,i.jsx)(n.code,{children:"optimization.moduleIds='hash'"}),"等于",(0,i.jsx)(n.code,{children:"HashedModuleIdsPlugin"}),"。源码了也写了",(0,i.jsx)(n.code,{children:"webpack5"}),"会优化这部分代码。"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"它的原理是使用文件路径的作为 id，并将它 hash 之后作为 moduleId。"}),"\n",(0,i.jsxs)(n.p,{children:["![img](data:image/svg+xml;utf8,",")"]}),"\n",(0,i.jsxs)(n.p,{children:["使用了 HashedModuleIdsPlugin`，我们再对比一下发现 module id 不再是简单的 id 了，而是一个四位 hash 过得字符串(不一定都是四位的，如果重复的情况下会增加位数，保证唯一性 ",(0,i.jsx)(n.a,{href:"https://github.com/webpack/webpack/blob/master/lib/HashedModuleIdsPlugin.js",target:"_blank",rel:"noopener noreferrer",children:"源码"}),")。 这样就固定住了 module id 了。"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"NamedModulesPlugin 和 HashedModuleIdsPlugin 原理是相同的，将文件路径作为 id，只不过没有把路径 hash 而已，适用于开发环境方便调试。不建议在生产环境配置，因为这样不仅会增加文件的大小（路径一般偶读比较长），更重要的是为暴露你的文件路径。"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"namedchunkplugin",children:["NamedChunkPlugin",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#namedchunkplugin",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"我们在固定了 module id 之后同理也需要固定一下 chunk id，不然我们增加 chunk 或者减少 chunk 的时候会和 module id 一样，都可能会导致 chunk 的顺序发生错乱，从而让 chunk 的缓存都失效。"}),"\n",(0,i.jsxs)(n.p,{children:["作者也意识到了这个问题，提供了一个叫",(0,i.jsx)(n.code,{children:"NamedChunkPlugin"}),"的插件，但在使用路由懒加载的情况下，你会发现",(0,i.jsx)(n.code,{children:"NamedChunkPlugin"}),"并没什么用。 供了一个线上",(0,i.jsx)(n.a,{href:"https://github.com/PanJiaChen/chunk-test",target:"_blank",rel:"noopener noreferrer",children:"demo"}),"，可以自行测一下。这里提就直接贴一下结果："]}),"\n",(0,i.jsxs)(n.p,{children:["![img](data:image/svg+xml;utf8,",")"]}),"\n",(0,i.jsx)(n.p,{children:"产生的原因前面也讲了，使用自增 id 的情况下是不能保证你新添加或删除 chunk 的位置的，一旦它改变了，这个顺序就错乱了，就需要重排，就会导致它之后的所有 id 都发生改变了。"}),"\n",(0,i.jsxs)(n.p,{children:["接着我们 ",(0,i.jsx)(n.a,{href:"https://github.com/webpack/webpack/blob/master/lib/NamedChunksPlugin.js",target:"_blank",rel:"noopener noreferrer",children:"查看源码"})," 还发现它只对有 ",(0,i.jsx)(n.strong,{children:"name"})," 的 chunk 才奏效！所以我们那些异步懒加载的页面都是无效的。这启不是坑爹！我们迭代业务肯定会不断的添加删除页面，这岂不是每新增一个页面都会让之前的缓存都失效？那我们之前还费这么大力优化什么拆包呢？"]}),"\n",(0,i.jsxs)(n.p,{children:["其实这是一个古老的问题了 相关 issue: ",(0,i.jsx)(n.a,{href:"https://github.com/webpack/webpack/issues/1315",target:"_blank",rel:"noopener noreferrer",children:"Vendor chunkhash changes when app code changes"})," 早在 2015 年就有人提了这个问题，这个问题也一直讨论至今，'网友们'也提供了各种奇淫巧技，不过大部分随着 webpack 的迭代已经不适用或者是修复了。"]}),"\n",(0,i.jsxs)(n.p,{children:["这里我就结合一下 ",(0,i.jsx)(n.a,{href:"https://github.com/timse",target:"_blank",rel:"noopener noreferrer",children:"timse"}),"(webpack 第二多贡献)写的持久缓存的",(0,i.jsx)(n.a,{href:"https://medium.com/webpack/predictable-long-term-caching-with-webpack-d3eee1d3fa31",target:"_blank",rel:"noopener noreferrer",children:"文章"}),"(在 medium 上需要翻墙) 总结一下目前能解决这个问题的三种方案。"]}),"\n",(0,i.jsx)(n.p,{children:"目前解决方案有三种"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"records"}),"\n",(0,i.jsx)(n.li,{children:"webpackChunkName"}),"\n",(0,i.jsx)(n.li,{children:"自定义 nameResolver"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"webpack-records",children:["webpack records",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#webpack-records",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["很多人可能连这个配置项都没有注意过，不过早在 2015 年就已经被设计出来让你更好的利用 cache。",(0,i.jsx)(n.a,{href:"https://webpack.js.org/configuration/other-options/#recordspath",target:"_blank",rel:"noopener noreferrer",children:"官方文档"})]}),"\n",(0,i.jsx)(n.p,{children:"要使用它配置也很简单："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'recordsPath: path.join(__dirname, "records.json");\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["对，只要这一行代码就能开启这个选项，并打包的时候会自动生成一个 JSON 文件。它含有 webpack 的 ",(0,i.jsx)(n.code,{children:"records"})," 记录 - 即「用于存储跨多次构建(across multiple builds)的模块标识符」的数据片段。可以使用此文件来跟踪在每次构建之间的模块变化。"]}),"\n",(0,i.jsxs)(n.p,{children:["大白话就是：等于每次构建都是基于上次构建的基础上进行的。它会先读取你上次的 chunk 和 module id 的信息之后再进行打包。所以这时候你再添加或者删除 ",(0,i.jsx)(n.code,{children:"chunk"}),"，并不会导致之前所说的乱序了。"]}),"\n",(0,i.jsx)(n.p,{children:"简单看一下构建出来的 JSON 长啥样。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'{\n  "modules": {\n    "byIdentifier": {\n      "demo/vendor.js": 0,\n      "demo/vendor-two.js": 1,\n      "demo/index.js": 2,\n      ....\n    },\n    "usedIds": {\n      "0": 0,\n      "1": 1,\n      "2": 2,\n      ...\n    }\n  },\n  "chunks": {\n    "byName": {\n      "vendor-two": 0,\n      "vendor": 1,\n      "entry": 2,\n      "runtime": 3\n    },\n    "byBlocks": {},\n    "usedIds": [\n      0,\n      1,\n      2\n  }\n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"我们和之前一样，在路由里面添加一个懒加载的页面，打包对比后发现 id 并不会像之前那样按照遍历到的顺序插入了，而是基于之前的 id 依次累加了。一般新增页面都会在末尾填写一个新 id，删除 chunk 的话，会将原来代表 chunk 的 id，保留，但不会再使用。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/29/164e4a7f0bf37f02?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"})}),"\n",(0,i.jsxs)(n.p,{children:["但这个方案不被大家知晓主要原因就是维护这个",(0,i.jsx)(n.code,{children:"records.json"}),"比较麻烦。如果你是在本地打包运行",(0,i.jsx)(n.code,{children:"webpack"}),"的话，你只要将",(0,i.jsx)(n.code,{children:"records.json"}),"当做普通文件上传到",(0,i.jsx)(n.code,{children:"github"}),"、",(0,i.jsx)(n.code,{children:"gitlab"}),"或其它版本控制仓库。"]}),"\n",(0,i.jsxs)(n.p,{children:["但现在一般公司都会将打包放在 ",(0,i.jsx)(n.code,{children:"CI"}),"里面，用",(0,i.jsx)(n.code,{children:"docker"}),"打包，这时候这份",(0,i.jsx)(n.code,{children:"records.json"}),"存在哪里就是一个问题了。它不仅需要每次打包之前先读取你这份 json，打包完之后它还需要再更新这份 json，并且还要找地方存贮，为了下次构建再使用。你可以存在 git 中或者找一个服务器存，但存在什么地其它方都感觉怪怪的。"]}),"\n",(0,i.jsxs)(n.p,{children:["如果你使用 ",(0,i.jsx)(n.code,{children:"Circle CI"}),"可以使用它的",(0,i.jsx)(n.code,{children:"store_artifacts"}),"，相关",(0,i.jsx)(n.a,{href:"https://medium.com/@songawee/long-term-caching-using-webpack-records-9ed9737d96f2",target:"_blank",rel:"noopener noreferrer",children:"教程"}),"。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"本人在使用了之后还是放弃了这个方案，使用成本略高。前端打包应该更加的纯粹，不需要依赖太多其它的东西。"})}),"\n",(0,i.jsxs)(n.h2,{id:"webpackchunkname",children:["webpackChunkName",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#webpackchunkname",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"在 webpack2.4.0 版本之后可以自定义异步 chunk 的名字了，例如："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'import(/* webpackChunkName: "my-chunk-name" */ "module");\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"我们在结合 vue 的懒加载可以这样写。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"{\n    path: '/test',\n    component: () => import(/* webpackChunkName: \"test\" */ '@/views/test')\n  },\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["打包之后就生成了名为 ",(0,i.jsx)(n.code,{children:"test"}),"的 chunk 文件。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/8/7/165126897252edca?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"})}),"\n",(0,i.jsxs)(n.p,{children:["chunk 有了 name 之后就可以解决",(0,i.jsx)(n.code,{children:"NamedChunksPlugin"}),"没有 name 的情况下的 bug 了。查看打包后的代码我们发现 chunkId 就不再是一个简单的自增 id 了。"]}),"\n",(0,i.jsxs)(n.p,{children:["不过这种写法还是有弊端的，首先你需要手动编写每一个 chunk 的 name，同时还需要保证它的唯一性，当页面一多，维护起来还是很麻烦的。",(0,i.jsx)(n.strong,{children:"这就违背了程序员的原则：能偷懒就偷懒。"})]}),"\n",(0,i.jsxs)(n.p,{children:["所以有什么办法可以自动生成一个 name 给 chunk 么 ？查看 webpack 源码我们发现了",(0,i.jsx)(n.code,{children:"NamedChunksPlugin"}),"其实可以自定义 nameResolver 的。"]}),"\n",(0,i.jsxs)(n.h2,{id:"自定义-nameresolver",children:["自定义 nameResolver",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义-nameresolver",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"NamedChunksPlugin"}),"支持自己写 nameResolver 的规则的。但目前大部分相关的文章里的自定义函数是不适合 webpack4 ，而且在结合 vue 的情况下还会报错。"]}),"\n",(0,i.jsx)(n.p,{children:"社区旧方案："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'new webpack.NamedChunksPlugin(chunk => {\n  if (chunk.name) {\n    return chunk.name;\n  }\n  return chunk.modules.map(m => path.relative(m.context, m.request)).join("_");\n});\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"适配 webpack4 和 vue 的新实现方案："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'new webpack.NamedChunksPlugin(chunk => {\n  if (chunk.name) {\n    return chunk.name;\n  }\n  return Array.from(chunk.modulesIterable, m => m.id).join("_");\n});\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"当然这个方案还是有一些弊端的因为 id 会可能很长，如果一个 chunk 依赖了很多个 module 的话，id 可能有几十位，所以我们还需要缩短一下它的长度。我们首先将拼接起来的 id hash 以下，而且要保证 hash 的结果位数也能太长，浪费字节，但太短又容易发生碰撞，所以最后我们我们选择 4 位长度，并且手动用 Set 做一下碰撞校验，发生碰撞的情况下位数加 1，直到碰撞为止。详细代码如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'const seen = new Set();\nconst nameLength = 4;\n\nnew webpack.NamedChunksPlugin(chunk => {\n  if (chunk.name) {\n    return chunk.name;\n  }\n  const modules = Array.from(chunk.modulesIterable);\n  if (modules.length > 1) {\n    const hash = require("hash-sum");\n    const joinedHash = hash(modules.map(m => m.id).join("_"));\n    let len = nameLength;\n    while (seen.has(joinedHash.substr(0, len))) len++;\n    seen.add(joinedHash.substr(0, len));\n    return `chunk-${joinedHash.substr(0, len)}`;\n  } else {\n    return modules[0].id;\n  }\n});\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:["我给 ",(0,i.jsx)(n.code,{children:"vue-cli"})," 官方也提了一个相关 ",(0,i.jsx)(n.a,{href:"https://github.com/vuejs/vue-cli/issues/1916",target:"_blank",rel:"noopener noreferrer",children:"issue"}),"尤雨溪最后也采纳了这个方案。 所以如果你现在下载最新 ",(0,i.jsx)(n.code,{children:"vue-cli@3"}),"上面啰嗦了半天的东西，其实都已经默认配置好了(但作者本人为了找到这个 hack 方法整整花了两天时间 o(╥﹏╥)o)。"]}),"\n",(0,i.jsx)(n.p,{children:"目前测试了一段时间没发现有什么问题。不过有一点不是很理解，不知道 webpack 出于什么样的原因，官方一直没有修复这个问题？可能是在等 webpack5 的时候放大招吧。"}),"\n",(0,i.jsxs)(n.h2,{id:"总结",children:["总结",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"拆包策略："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["基础类库 ",(0,i.jsx)(n.code,{children:"chunk-libs"})]}),"\n",(0,i.jsxs)(n.li,{children:["UI 组件库 ",(0,i.jsx)(n.code,{children:"chunk-elementUI"})]}),"\n",(0,i.jsxs)(n.li,{children:["自定义共用组件/函数 ",(0,i.jsx)(n.code,{children:"chunk-commons"})]}),"\n",(0,i.jsxs)(n.li,{children:["低频组件 ",(0,i.jsx)(n.code,{children:"chunk-eachrts"}),"/",(0,i.jsx)(n.code,{children:"chunk-xlsx"}),"等"]}),"\n",(0,i.jsxs)(n.li,{children:["业务代码 lazy-loading ",(0,i.jsx)(n.code,{children:"xxxx.js"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"持久化缓存："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["使用 ",(0,i.jsx)(n.code,{children:"runtimeChunk"})," 提取 ",(0,i.jsx)(n.code,{children:"manifest"}),"，使用 ",(0,i.jsx)(n.code,{children:"script-ext-html-webpack-plugin"}),"等插件内联到",(0,i.jsx)(n.code,{children:"index.html"}),"减少请求"]}),"\n",(0,i.jsxs)(n.li,{children:["使用 ",(0,i.jsx)(n.code,{children:"HashedModuleIdsPlugin"})," 固定 ",(0,i.jsx)(n.code,{children:"moduleId"})]}),"\n",(0,i.jsxs)(n.li,{children:["使用 ",(0,i.jsx)(n.code,{children:"NamedChunkPlugin"}),"结合自定义 nameResolver 来固定 ",(0,i.jsx)(n.code,{children:"chunkId"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["上述说的问题大部分在 webpack 官方文档都没明确指出，唯一可以参考的就是这份 ",(0,i.jsx)(n.a,{href:"https://webpack.js.org/guides/caching/",target:"_blank",rel:"noopener noreferrer",children:"cache 文档"}),"，在刚更新 webpack4 的时候，我以为官方已经将 id 不能固定的问题解决了，但现实是残酷的，结果并不理想。不过作者也在很多的 issue 中说他正在着手优化 ",(0,i.jsx)(n.code,{children:"long term caching"}),"。"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"We plan to add another way to assign module/chunk ids for long term caching, but this is not ready to be told yet."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["在 webpack 的 issue 和源码中也经常见到 ",(0,i.jsx)(n.code,{children:"Long term caching will be improved in webpack@5"}),"和",(0,i.jsx)(n.code,{children:"TODO webpack 5 xxxx"}),"这样的代码注释。这让我对",(0,i.jsx)(n.code,{children:"webpack 5"}),"很期待。真心希望",(0,i.jsx)(n.code,{children:"webpack 5"}),"能真正的解决前面几个问题，并且让它更加的",(0,i.jsx)(n.code,{children:"out-of-the-box"}),"，更加的简单和智能，就像",(0,i.jsx)(n.code,{children:"webpack 4"}),"的",(0,i.jsx)(n.code,{children:"optimization.splitChunks"}),"，你基本不用做什么，它就能很好的帮你拆分好",(0,i.jsx)(n.code,{children:"bundle"}),"包，同时又给你非常的自由发挥空间。"]}),"\n",(0,i.jsxs)(n.h2,{id:"展望",children:["展望",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#展望",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://medium.com/webpack/webpack-4-released-today-6cdb994702d4",target:"_blank",rel:"noopener noreferrer",children:"Whats next?"})," 官方在这篇文章中展望了一下 webpack5 和讲述了一下未来的计划--持续改进用户体验、提升构建速度和性能，降低使用门槛，完善",(0,i.jsx)(n.code,{children:"Persistent Caching"}),"等等。同时 webpack 也已经支持 ",(0,i.jsx)(n.code,{children:"Prefetching/Preloading modules"}),"，我相信之后也会有更多的网站会使用这一属性。"]}),"\n",(0,i.jsx)(n.p,{children:"同时 webpack 的团队已经承诺会通过投票的方式来决定一些功能。比如不久前发起的投票。"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/30/164ea3f22ce46af8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"})}),"\n",(0,i.jsxs)(n.p,{children:["大家可以关注 ",(0,i.jsx)(n.a,{href:"https://twitter.com/wSokra",target:"_blank",rel:"noopener noreferrer",children:"Tobias Koppers"})," 的 twitter 进行投票。"]}),"\n",(0,i.jsx)(n.p,{children:"最后还是期待一下 webpack5 和它之后的发展吧。如果没有 webpack，也就不会有今天的前端。"}),"\n",(0,i.jsxs)(n.p,{children:["其实如一开始就讲的，vue 有",(0,i.jsx)(n.code,{children:"vue-cli"}),"、react 有",(0,i.jsx)(n.code,{children:"creat-react-app"}),"，现在新建项目基本都是基于脚手架的，很少有人从零开始写 webpack 配置文件的，而且一般开发中，一般程序员也不需要经常去修改 webpack 的配置。webpack 官方本身也在不断完善默认配置项，相信 webpack 的配置门槛也会越来低多。"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"愿世间再无 webpack 配置工程师。"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://user-gold-cdn.xitu.io/2018/7/27/164db54515df8fc8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"})}),"\n",(0,i.jsxs)(n.h2,{id:"拓展阅读",children:["拓展阅读",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#拓展阅读",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/wallstreetcn/webpack-and-spa-guide",target:"_blank",rel:"noopener noreferrer",children:"Webpack 4 和单页应用入门"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://medium.com/@songawee/long-term-caching-using-webpack-records-9ed9737d96f2",target:"_blank",rel:"noopener noreferrer",children:"Long term caching using Webpack records"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://medium.com/webpack/predictable-long-term-caching-with-webpack-d3eee1d3fa31",target:"_blank",rel:"noopener noreferrer",children:"Predictable long term caching with Webpack"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://zhuanlan.zhihu.com/p/25954788",target:"_blank",rel:"noopener noreferrer",children:"从 Bundle 文件看 Webpack 模块机制"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/ronami/minipack",target:"_blank",rel:"noopener noreferrer",children:"minipack"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://survivejs.com/webpack/optimizing/build-analysis/",target:"_blank",rel:"noopener noreferrer",children:"各种可视化分析 webpack bundle 库"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"官方文档"}),"\n",(0,i.jsxs)(n.h1,{id:"uglifyjs-webpack-plugin",children:["UglifyJS Webpack Plugin",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#uglifyjs-webpack-plugin",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["This plugin uses ",(0,i.jsx)(n.a,{href:"https://github.com/mishoo/UglifyJS2",target:"_blank",rel:"noopener noreferrer",children:"uglify-js"})," to minify your JavaScript."]}),"\n",(0,i.jsxs)(n.h2,{id:"requirements",children:["Requirements",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#requirements",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"This module requires a minimum of Node v6.9.0 and Webpack v4.0.0."}),"\n",(0,i.jsxs)(n.h2,{id:"getting-started",children:["Getting Started",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getting-started",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["To begin, you'll need to install ",(0,i.jsx)(n.code,{children:"uglifyjs-webpack-plugin"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ npm install uglifyjs-webpack-plugin --save-dev\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then add the plugin to your ",(0,i.jsx)(n.code,{children:"webpack"})," config. For example:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"const UglifyJsPlugin = require('uglifyjs-webpack-plugin');\n\nmodule.exports = {\n  optimization: {\n    minimizer: [new UglifyJsPlugin()],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["And run ",(0,i.jsx)(n.code,{children:"webpack"})," via your preferred method."]}),"\n",(0,i.jsxs)(n.h2,{id:"options",children:["Options",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#options",children:"#"})]}),"\n",(0,i.jsxs)(n.h3,{id:"test",children:[(0,i.jsx)(n.code,{children:"test"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#test",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"String|RegExp|Array"})," Default: ",(0,i.jsx)(n.code,{children:"/\\.js(\\?.*)?$/i"})]}),"\n",(0,i.jsx)(n.p,{children:"Test to match files against."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        test: /\\.js(\\?.*)?$/i,\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"include",children:[(0,i.jsx)(n.code,{children:"include"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#include",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"String|RegExp|Array"})," Default: ",(0,i.jsx)(n.code,{children:"undefined"})]}),"\n",(0,i.jsx)(n.p,{children:"Files to include."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        include: /\\/includes/,\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"exclude",children:[(0,i.jsx)(n.code,{children:"exclude"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#exclude",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"String|RegExp|Array"})," Default: ",(0,i.jsx)(n.code,{children:"undefined"})]}),"\n",(0,i.jsx)(n.p,{children:"Files to exclude."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        exclude: /\\/excludes/,\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"chunkfilter",children:[(0,i.jsx)(n.code,{children:"chunkFilter"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#chunkfilter",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"Function<(chunk) -> boolean>"})," Default: ",(0,i.jsx)(n.code,{children:"() => true"})]}),"\n",(0,i.jsxs)(n.p,{children:["Allowing to filter which chunks should be uglified (by default all chunks are uglified). Return ",(0,i.jsx)(n.code,{children:"true"})," to uglify the chunk, ",(0,i.jsx)(n.code,{children:"false"})," otherwise."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        chunkFilter: (chunk) => {\n          // Exclude uglification for the `vendor` chunk\n          if (chunk.name === 'vendor') {\n            return false;\n          }\n\n          return true;\n        },\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"cache",children:[(0,i.jsx)(n.code,{children:"cache"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cache",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"Boolean|String"})," Default: ",(0,i.jsx)(n.code,{children:"false"})]}),"\n",(0,i.jsxs)(n.p,{children:["Enable file caching. Default path to cache directory: ",(0,i.jsx)(n.code,{children:"node_modules/.cache/uglifyjs-webpack-plugin"}),"."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["ℹ️ If you use your own ",(0,i.jsx)(n.code,{children:"minify"})," function please read the ",(0,i.jsx)(n.code,{children:"minify"})," section for cache invalidation correctly."]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"boolean",children:[(0,i.jsx)(n.code,{children:"Boolean"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#boolean",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Enable/disable file caching."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        cache: true,\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"string",children:[(0,i.jsx)(n.code,{children:"String"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#string",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Enable file caching and set path to cache directory."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        cache: 'path/to/cache',\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"cachekeys",children:[(0,i.jsx)(n.code,{children:"cacheKeys"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cachekeys",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"Function<(defaultCacheKeys, file) -> Object>"})," Default: ",(0,i.jsx)(n.code,{children:"defaultCacheKeys => defaultCacheKeys"})]}),"\n",(0,i.jsx)(n.p,{children:"Allows you to override default cache keys."}),"\n",(0,i.jsx)(n.p,{children:"Default cache keys:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"({\n  'uglify-js': require('uglify-js/package.json').version, // uglify version\n  'uglifyjs-webpack-plugin': require('../package.json').version, // plugin version\n  'uglifyjs-webpack-plugin-options': this.options, // plugin options\n  path: compiler.outputPath ? `${compiler.outputPath}/${file}` : file, // asset path\n  hash: crypto\n    .createHash('md4')\n    .update(input)\n    .digest('hex'), // source file hash\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        cache: true,\n        cacheKeys: (defaultCacheKeys, file) => {\n          defaultCacheKeys.myCacheKey = 'myCacheKeyValue';\n\n          return defaultCacheKeys;\n        },\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"parallel",children:[(0,i.jsx)(n.code,{children:"parallel"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parallel",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"Boolean|Number"})," Default: ",(0,i.jsx)(n.code,{children:"false"})]}),"\n",(0,i.jsxs)(n.p,{children:["Use multi-process parallel running to improve the build speed. Default number of concurrent runs: ",(0,i.jsx)(n.code,{children:"os.cpus().length - 1"}),"."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["ℹ️ Parallelization can speedup your build significantly and is therefore ",(0,i.jsx)(n.strong,{children:"highly recommended"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"boolean-1",children:[(0,i.jsx)(n.code,{children:"Boolean"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#boolean-1",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Enable/disable multi-process parallel running."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        parallel: true,\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"number",children:[(0,i.jsx)(n.code,{children:"Number"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#number",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Enable multi-process parallel running and set number of concurrent runs."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        parallel: 4,\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"sourcemap",children:[(0,i.jsx)(n.code,{children:"sourceMap"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sourcemap",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"Boolean"})," Default: ",(0,i.jsx)(n.code,{children:"false"})]}),"\n",(0,i.jsxs)(n.p,{children:["Use source maps to map error message locations to modules (this slows down the compilation). If you use your own ",(0,i.jsx)(n.code,{children:"minify"})," function please read the ",(0,i.jsx)(n.code,{children:"minify"})," section for handling source maps correctly."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["⚠️ ",(0,i.jsxs)(n.strong,{children:[(0,i.jsx)(n.code,{children:"cheap-source-map"})," options don't work with this plugin"]}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        sourceMap: true,\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"minify",children:[(0,i.jsx)(n.code,{children:"minify"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#minify",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"Function"})," Default: ",(0,i.jsx)(n.code,{children:"undefined"})]}),"\n",(0,i.jsxs)(n.p,{children:["Allows you to override default minify function. By default plugin uses ",(0,i.jsx)(n.a,{href:"https://github.com/mishoo/UglifyJS2",target:"_blank",rel:"noopener noreferrer",children:"uglify-js"})," package. Useful for using and testing unpublished versions or forks."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["⚠️ ",(0,i.jsxs)(n.strong,{children:["Always use ",(0,i.jsx)(n.code,{children:"require"})," inside ",(0,i.jsx)(n.code,{children:"minify"})," function when ",(0,i.jsx)(n.code,{children:"parallel"})," option enabled"]}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        minify(file, sourceMap) {\n          const extractedComments = [];\n\n          // Custom logic for extract comments\n\n          const { error, map, code, warnings } = require('uglify-module') // Or require('./path/to/uglify-module')\n            .minify(file, {\n              /* Your options for minification */\n            });\n\n          return { error, map, code, warnings, extractedComments };\n        },\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"uglifyoptions",children:[(0,i.jsx)(n.code,{children:"uglifyOptions"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#uglifyoptions",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"Object"})," Default: ",(0,i.jsx)(n.a,{href:"https://github.com/mishoo/UglifyJS2#minify-options",target:"_blank",rel:"noopener noreferrer",children:"default"})]}),"\n",(0,i.jsxs)(n.p,{children:["UglifyJS minify ",(0,i.jsx)(n.a,{href:"https://github.com/mishoo/UglifyJS2#minify-options",target:"_blank",rel:"noopener noreferrer",children:"options"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        uglifyOptions: {\n          warnings: false,\n          parse: {},\n          compress: {},\n          mangle: true, // Note `mangle.properties` is `false` by default.\n          output: null,\n          toplevel: false,\n          nameCache: null,\n          ie8: false,\n          keep_fnames: false,\n        },\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"extractcomments",children:[(0,i.jsx)(n.code,{children:"extractComments"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#extractcomments",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"Boolean|String|RegExp|Function<(node, comment) -> Boolean|Object>"})," Default: ",(0,i.jsx)(n.code,{children:"false"})]}),"\n",(0,i.jsxs)(n.p,{children:["Whether comments shall be extracted to a separate file, (see ",(0,i.jsx)(n.a,{href:"https://github.com/webpack/webpack/commit/71933e979e51c533b432658d5e37917f9e71595a",target:"_blank",rel:"noopener noreferrer",children:"details"}),"). By default extract only comments using ",(0,i.jsx)(n.code,{children:"/^\\**!|@preserve|@license|@cc_on/i"})," regexp condition and remove remaining comments. If the original file is named ",(0,i.jsx)(n.code,{children:"foo.js"}),", then the comments will be stored to ",(0,i.jsx)(n.code,{children:"foo.js.LICENSE"}),". The ",(0,i.jsx)(n.code,{children:"uglifyOptions.output.comments"})," option specifies whether the comment will be preserved, i.e. it is possible to preserve some comments (e.g. annotations) while extracting others or even preserving comments that have been extracted."]}),"\n",(0,i.jsxs)(n.h4,{id:"boolean-2",children:[(0,i.jsx)(n.code,{children:"Boolean"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#boolean-2",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Enable/disable extracting comments."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        extractComments: true,\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"string-1",children:[(0,i.jsx)(n.code,{children:"String"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#string-1",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Extract ",(0,i.jsx)(n.code,{children:"all"})," or ",(0,i.jsx)(n.code,{children:"some"})," (use ",(0,i.jsx)(n.code,{children:"/^\\**!|@preserve|@license|@cc_on/i"})," RegExp) comments."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        extractComments: 'all',\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"regexp",children:[(0,i.jsx)(n.code,{children:"RegExp"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#regexp",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"All comments that match the given expression will be extracted to the separate file."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        extractComments: /@extract/i,\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"functionnode-comment---boolean",children:[(0,i.jsx)(n.code,{children:"Function<(node, comment) -> Boolean>"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#functionnode-comment---boolean",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"All comments that match the given expression will be extracted to the separate file."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        extractComments: function(astNode, comment) {\n          if (/@extract/i.test(comment.value)) {\n            return true;\n          }\n\n          return false;\n        },\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"object",children:[(0,i.jsx)(n.code,{children:"Object"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#object",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Allow to customize condition for extract comments, specify extracted file name and banner."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        extractComments: {\n          condition: /^\\**!|@preserve|@license|@cc_on/i,\n          filename(file) {\n            return `${file}.LICENSE`;\n          },\n          banner(licenseFile) {\n            return `License information can be found in ${licenseFile}`;\n          },\n        },\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h5,{id:"condition",children:[(0,i.jsx)(n.code,{children:"condition"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#condition",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"Boolean|String|RegExp|Function<(node, comment) -> Boolean|Object>"})]}),"\n",(0,i.jsx)(n.p,{children:"Condition what comments you need extract."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        extractComments: {\n          condition: 'some',\n          filename(file) {\n            return `${file}.LICENSE`;\n          },\n          banner(licenseFile) {\n            return `License information can be found in ${licenseFile}`;\n          },\n        },\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h5,{id:"filename",children:[(0,i.jsx)(n.code,{children:"filename"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#filename",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"Regex|Function<(string) -> String>"})," Default: ",(0,i.jsx)(n.code,{children:"${file}.LICENSE"})]}),"\n",(0,i.jsxs)(n.p,{children:["The file where the extracted comments will be stored. Default is to append the suffix ",(0,i.jsx)(n.code,{children:".LICENSE"})," to the original filename."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        extractComments: {\n          condition: /^\\**!|@preserve|@license|@cc_on/i,\n          filename: 'extracted-comments.js',\n          banner(licenseFile) {\n            return `License information can be found in ${licenseFile}`;\n          },\n        },\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h5,{id:"banner",children:[(0,i.jsx)(n.code,{children:"banner"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#banner",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"Boolean|String|Function<(string) -> String>"})," Default: ",(0,i.jsx)(n.code,{children:"/*! For license information please see ${commentsFile} */"})]}),"\n",(0,i.jsxs)(n.p,{children:["The banner text that points to the extracted file and will be added on top of the original file. Can be ",(0,i.jsx)(n.code,{children:"false"})," (no banner), a ",(0,i.jsx)(n.code,{children:"String"}),", or a ",(0,i.jsx)(n.code,{children:"Function<(string) -> String>"})," that will be called with the filename where extracted comments have been stored. Will be wrapped into comment."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        extractComments: {\n          condition: true,\n          filename(file) {\n            return `${file}.LICENSE`;\n          },\n          banner(commentsFile) {\n            return `My custom banner about license information ${commentsFile}`;\n          },\n        },\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"warningsfilter",children:[(0,i.jsx)(n.code,{children:"warningsFilter"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#warningsfilter",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Type: ",(0,i.jsx)(n.code,{children:"Function<(warning, source) -> Boolean>"})," Default: ",(0,i.jsx)(n.code,{children:"() => true"})]}),"\n",(0,i.jsxs)(n.p,{children:["Allow to filter ",(0,i.jsx)(n.a,{href:"https://github.com/mishoo/UglifyJS2",target:"_blank",rel:"noopener noreferrer",children:"uglify-js"})," warnings. Return ",(0,i.jsx)(n.code,{children:"true"})," to keep the warning, ",(0,i.jsx)(n.code,{children:"false"})," otherwise."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        warningsFilter: (warning, source) => {\n          if (/Dropping unreachable code/i.test(warning)) {\n            return true;\n          }\n\n          if (/filename\\.js/i.test(source)) {\n            return true;\n          }\n\n          return false;\n        },\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"examples",children:["Examples",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#examples",children:"#"})]}),"\n",(0,i.jsxs)(n.h3,{id:"cache-and-parallel",children:["Cache And Parallel",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cache-and-parallel",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Enable cache and multi-process parallel running."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        cache: true,\n        parallel: true,\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"preserve-comments",children:["Preserve Comments",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#preserve-comments",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Extract all legal comments (i.e. ",(0,i.jsx)(n.code,{children:"/^\\**!|@preserve|@license|@cc_on/i"}),") and preserve ",(0,i.jsx)(n.code,{children:"/@license/i"})," comments."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        uglifyOptions: {\n          output: {\n            comments: /@license/i,\n          },\n        },\n        extractComments: true,\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"remove-comments",children:["Remove Comments",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#remove-comments",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["If you avoid building with comments, set ",(0,i.jsx)(n.strong,{children:"uglifyOptions.output.comments"})," to ",(0,i.jsx)(n.strong,{children:"false"})," as in this config:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        uglifyOptions: {\n          output: {\n            comments: false,\n          },\n        },\n      }),\n    ],\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"custom-minify-function",children:["Custom Minify Function",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#custom-minify-function",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Override default minify function - use ",(0,i.jsx)(n.a,{href:"https://github.com/fabiosantoscode/terser",target:"_blank",rel:"noopener noreferrer",children:"terser"})," for minification."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"webpack.config.js"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"module.exports = {\n  optimization: {\n    minimizer: [\n      new UglifyJsPlugin({\n        // Uncomment lines below for cache invalidation correctly\n        // cache: true,\n        // cacheKeys(defaultCacheKeys) {\n        //   delete defaultCacheKeys['uglify-js'];\n        //\n        //   return Object.assign(\n        //     {},\n        //     defaultCacheKeys,\n        //     { 'uglify-js': require('uglify-js/package.json').version },\n        //   );\n        // },\n        minify(file, sourceMap) {\n          // https://github.com/mishoo/UglifyJS2#minify-options\n          const uglifyJsOptions = {\n            /* your `uglify-js` package options */\n          };\n\n          if (sourceMap) {\n            uglifyJsOptions.sourceMap = {\n              content: sourceMap,\n            };\n          }\n\n          return require('terser').minify(file, uglifyJsOptions);\n        },\n      }),\n    ],\n  },\n};\n"})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["webpack%2Fstalled-webpack4%E6%89%93%E5%8C%85%E5%BE%88%E6%85%A2%E5%A4%84%E7%90%86.md"]={toc:[{text:"升级篇",id:"升级篇",depth:2},{text:"前言",id:"前言",depth:3},{text:"升级 webpack",id:"升级-webpack",depth:3},{text:"带来的变化",id:"带来的变化",depth:3},{text:"默认配置",id:"默认配置",depth:3},{text:"html-webpack-plugin",id:"html-webpack-plugin",depth:2},{text:"mini-css-extract-plugin",id:"mini-css-extract-plugin",depth:2},{text:"与 extract-text-webpack-plugin 区别",id:"与-extract-text-webpack-plugin-区别",depth:3},{text:"压缩与优化",id:"压缩与优化",depth:3},{text:"contenthash",id:"contenthash",depth:3},{text:"这里再简单说明一下几种 hash 的区别：",id:"这里再简单说明一下几种-hash-的区别",depth:3},{text:"热更新速度",id:"热更新速度",depth:2},{text:"打包速度",id:"打包速度",depth:2},{text:"Tree-Shaking",id:"tree-shaking",depth:2},{text:"默认分包策略",id:"默认分包策略",depth:2},{text:"优化分包策略",id:"优化分包策略",depth:2},{text:"博弈",id:"博弈",depth:3},{text:"Long term caching",id:"long-term-caching",depth:2},{text:"RuntimeChunk(manifest)",id:"runtimechunkmanifest",depth:3},{text:"Module vs Chunk",id:"module-vs-chunk",depth:3},{text:"HashedModuleIdsPlugin",id:"hashedmoduleidsplugin",depth:3},{text:"NamedChunkPlugin",id:"namedchunkplugin",depth:3},{text:"webpack records",id:"webpack-records",depth:2},{text:"webpackChunkName",id:"webpackchunkname",depth:2},{text:"自定义 nameResolver",id:"自定义-nameresolver",depth:2},{text:"总结",id:"总结",depth:2},{text:"展望",id:"展望",depth:2},{text:"拓展阅读",id:"拓展阅读",depth:2},{text:"Requirements",id:"requirements",depth:2},{text:"Getting Started",id:"getting-started",depth:2},{text:"Options",id:"options",depth:2},{text:"`test`",id:"test",depth:3},{text:"`include`",id:"include",depth:3},{text:"`exclude`",id:"exclude",depth:3},{text:"`chunkFilter`",id:"chunkfilter",depth:3},{text:"`cache`",id:"cache",depth:3},{text:"`Boolean`",id:"boolean",depth:4},{text:"`String`",id:"string",depth:4},{text:"`cacheKeys`",id:"cachekeys",depth:3},{text:"`parallel`",id:"parallel",depth:3},{text:"`Boolean`",id:"boolean-1",depth:4},{text:"`Number`",id:"number",depth:4},{text:"`sourceMap`",id:"sourcemap",depth:3},{text:"`minify`",id:"minify",depth:3},{text:"`uglifyOptions`",id:"uglifyoptions",depth:3},{text:"`extractComments`",id:"extractcomments",depth:3},{text:"`Boolean`",id:"boolean-2",depth:4},{text:"`String`",id:"string-1",depth:4},{text:"`RegExp`",id:"regexp",depth:4},{text:"`Function<(node, comment) -> Boolean>`",id:"functionnode-comment---boolean",depth:4},{text:"`Object`",id:"object",depth:4},{text:"`warningsFilter`",id:"warningsfilter",depth:3},{text:"Examples",id:"examples",depth:2},{text:"Cache And Parallel",id:"cache-and-parallel",depth:3},{text:"Preserve Comments",id:"preserve-comments",depth:3},{text:"Remove Comments",id:"remove-comments",depth:3},{text:"Custom Minify Function",id:"custom-minify-function",depth:3}],title:"UglifyJS Webpack Plugin",frontmatter:{}}}}]);