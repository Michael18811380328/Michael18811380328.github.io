"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["4590"],{9313:function(e,n,r){r.r(n),r.d(n,{default:function(){return o}});var s=r(6469),l=r(8809);function a(e){let n=Object.assign({h2:"h2",a:"a",p:"p",strong:"strong",pre:"pre",code:"code"},(0,l.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h2,{id:"深入浅出的webpack构建工具---babel之配置文件babelrc三",children:[(0,s.jsx)(n.a,{href:"https://www.cnblogs.com/tugenhua0707/p/9452471.html",target:"_blank",rel:"noopener noreferrer",children:"深入浅出的webpack构建工具---babel之配置文件.babelrc(三)"}),(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#深入浅出的webpack构建工具---babel之配置文件babelrc三",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"统计信息：字数 16537  阅读34分钟"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"阅读目录"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.cnblogs.com/tugenhua0707/p/9452471.html#_labe1_0",target:"_blank",rel:"noopener noreferrer",children:"一：理解 babel之配置文件.babelrc 基本配置项"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.cnblogs.com/tugenhua0707/p/9452471.html#_labe1_1",target:"_blank",rel:"noopener noreferrer",children:"二：在webpack中配置babel"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.cnblogs.com/tugenhua0707/p/9452471.html#_labelTop",target:"_blank",rel:"noopener noreferrer",children:"回到顶部"})}),"\n",(0,s.jsx)(n.p,{children:"一：理解 babel之配置文件.babelrc 基本配置项"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"1. 什么是babel? 它是干什么用的？"})}),"\n",(0,s.jsx)(n.p,{children:"ES6是2015年发布的下一代javascript语言标准，它引入了新的语法和API，使我们编写js代码更加得心应手，比如class，let,for...of promise等等这样的，但是可惜的是这些js新特性只被最新版本的浏览器支持，但是低版本浏览器并不支持，那么低版本浏览器下就需要一个转换工具，把es6代码转换成浏览器能识别的代码，babel就是这样的一个工具。可以理解为 babel是javascript语法的编译器。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"2. Babel编译器"}),"\n在Babel执行编译的过程中，会从项目的根目录下的 .babelrc文件中读取配置。.babelrc是一个json格式的文件。\n在.babelrc配置文件中，主要是对预设(presets) 和 插件(plugins) 进行配置。.babelrc配置文件一般为如下："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{\n  "plugins": [\n     [\n      "transform-runtime",\n      {\n        "polyfill": false\n      }\n     ]\n   ],\n   "presets": [\n     [\n       "env",\n       {\n         "modules": false\n       }\n     ],\n     "stage-2",\n     "react"\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"2.1 plugins"}),"\n该属性是告诉babel要使用那些插件，这些插件可以控制如何转换代码。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"1. 理解 babel-polyfill 和 babel-runtime 及 babel-plugin-transform-runtime"})}),"\n",(0,s.jsx)(n.p,{children:"Babel默认只转换新的javascript语法，而不转换新的API，比如 Iterator, Generator, Set, Maps, Proxy, Reflect,Symbol,Promise 等全局对象。以及一些在全局对象上的方法(比如 Object.assign)都不会转码。\n比如说，ES6在Array对象上新增了Array.form方法，Babel就不会转码这个方法，如果想让这个方法运行，必须使用 babel-polyfill来转换等。"}),"\n",(0,s.jsx)(n.p,{children:"因此：babel-polyfill和babel-runtime就是为了解决新的API与这种全局对象或全局对象方法不足的问题，因此可以使用这两个插件可以转换的。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"那么他们两者的区别是什么？"}),"\n",(0,s.jsx)(n.strong,{children:"babel-polyfill"})," 的原理是当运行环境中并没有实现的一些方法，babel-polyfill会做兼容。\n",(0,s.jsx)(n.strong,{children:"babel-runtime"})," 它是将es6编译成es5去执行。我们使用es6的语法来编写，最终会通过babel-runtime编译成es5.也就是说，不管浏览器是否支持ES6，只要是ES6的语法，它都会进行转码成ES5.所以就有很多冗余的代码。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"babel-polyfill"})," 它是通过向全局对象和内置对象的prototype上添加方法来实现的。比如运行环境中不支持Array.prototype.find 方法，引入polyfill, 我们就可以使用es6方法来编写了，但是缺点就是会造成全局空间污染。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"babel-runtime:"})," 它不会污染全局对象和内置对象的原型，比如说我们需要Promise，我们只需要import Promise from 'babel-runtime/core-js/promise'即可，这样不仅避免污染全局对象，而且可以减少不必要的代码。"]}),"\n",(0,s.jsx)(n.p,{children:"虽然 babel-runtime 可以解决 babel-polyfill中的避免污染全局对象，但是它自己也有缺点的，比如上，如果我现在有100个文件甚至更多的话，难道我们需要一个个文件加import Promise from 'babel-runtime/core-js/promise' 吗？那这样肯定是不行的，因此这个时候出来一个 叫 babel-plugin-transform-runtime，\n它就可以帮助我们去避免手动引入 import的痛苦，并且它还做了公用方法的抽离。比如说我们有100个模块都使用promise，但是promise的polyfill仅仅存在1份。\n这就是 babel-plugin-transform-runtime 插件的作用。"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"2. 理解 babel-plugin-transform-runtime 的配置一些选项"})}),"\n",(0,s.jsx)(n.p,{children:"因此通过上面的理解，我们可以对 transform-runtime 通过如下配置 plugins; 如下代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"{\n  'plugins': [\n    [\n      'transform-runtime', \n      {\n        'helpers': false,\n        'polyfill': false,\n        'regenerator': true,\n        'moduleName': 'babel-runtime'\n      }\n    ]\n  ]\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["配置项可以看官网，",(0,s.jsx)(n.a,{href:"http://babeljs.io/docs/en/babel-plugin-transform-runtime/#helpers",target:"_blank",rel:"noopener noreferrer",children:"查看官网"})]}),"\n",(0,s.jsx)(n.p,{children:"**helpers: 默认值为true，**表示是否开启内联的babel helpers(即babel或者环境本来存在的某些对象方法函数)如：extends，etc这样的\n在调用模块名字时将被替换名字。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"polyfill：默认值为true"}),"，表示是否把内置的东西(Promise, Set, Map)等转换成非全局污染的。"]}),"\n",(0,s.jsx)(n.p,{children:"**regenerator：默认值为true，**是否开启generator函数转换成使用regenerator runtime来避免污染全局域。"}),"\n",(0,s.jsx)(n.p,{children:"**moduleName：默认值为 babel-runtime，**当调用辅助 设置模块（module）名字/路径.\n比如如下这样设置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{\n  "moduleName": "flavortown/runtime"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"import引入文件如下这个样子："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"import extends from 'flavortown/runtime/helpers/extends';\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"3 presets"}),"\npresets属性告诉Babel要转换的源码使用了哪些新的语法特性，presets是一组Plugins的集合。"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"3.1 理解 babel-preset-env"})}),"\n",(0,s.jsx)(n.p,{children:"比如："}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"babel-preset-es2015: 可以将es6的代码编译成es5."}),"\n",(0,s.jsx)(n.strong,{children:"babel-preset-es2016: 可以将es7的代码编译为es6."}),"\n",(0,s.jsx)(n.strong,{children:"babel-preset-es2017: 可以将es8的代码编译为es7."}),"\n",(0,s.jsx)(n.strong,{children:"babel-preset-latest: 支持现有所有ECMAScript版本的新特性。"})]}),"\n",(0,s.jsx)(n.p,{children:"举个列子，比如我们需要转换es6语法，我们可以在 .babelrc的plugins中按需引入一下插件，比如：\ncheck-es2015-constants、es2015-arrow-functions、es2015-block-scoped-functions等等几十个不同作用的plugin：\n那么配置项可能是如下方式："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// .babelrc\n{\n  "plugins": [\n    "check-es2015-constants",\n    "es2015-arrow-functions",\n    "es2015-block-scoped-functions",\n    // ...\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"但是Babel团队为了方便，将同属ES2015的几十个Transform Plugins集合到babel-preset-es2015一个Preset中，这样我们只需要在.babelrc的presets加入es2015一个配置就可以完成全部ES2015语法的支持了：\n如下配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// .babelrc\n{\n  "presets": [\n    "es2015"\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"但是我们随着时间的推移，将来可能会有跟多的版本插件,比如 bebel-preset-es2018,.... 等等。\n因此 babel-preset-env 出现了，它的功能类似于 babel-preset-latest，它会根据目标环境选择不支持的新特性来转译。"}),"\n",(0,s.jsx)(n.p,{children:"首先需要在项目中安装，如下命令："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install babel-preset-env --save-dev\n"})}),"\n",(0,s.jsx)(n.p,{children:"在.babelrc配置文件中 可以如下简单的配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"{\n  \"presets\": ['env']\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"我们还可以仅仅配置项目所支持的浏览器的配置"}),"\n",(0,s.jsx)(n.p,{children:"\\1. 支持每个浏览器最后两个版本和safari大于等于7版本所需的polyfill代码转换，我们可以如下配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"{\n  'presets': [\n    ['env', {\n      'target': {\n        'browsers': ['last 2 versions', 'safari >= 7']\n      }\n    }]\n  ]\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"\\2. 支持市场份额超过5%的浏览器，可以如下配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"{\n  'presets': [\n    ['env', {\n      'target': {\n        'browsers': '> 5%'\n      }\n    }]\n  ]\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"\\3. 指定浏览器版本，可以如下配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"{\n  'presets': [\n    ['env', {\n      'target': {\n        'chrome': 56\n      }\n    }]\n  ]\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Node.js"}),"\n如果通过Babel编译Node.js代码的话，可以设置 \"target.node\" 是 'current', 含义是 支持的是当前运行版本的nodejs。\n如下配置代码："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{\n  "presets": [\n    ["env", {\n      "targets": {\n        "node": "current"\n      }\n    }]\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"理解 babel-preset-env 中的选项配置："}),"\n",(0,s.jsx)(n.strong,{children:"1. targets: {[string]: number | string }, 默认为{};"}),"\n含义是支持一个运行环境的对象，比如支持node版本；可以如下配置： node: '6.0';\n运行环境: chrome, opera, edge, firefox, safari, ie, ios, android, node, electron"]}),"\n",(0,s.jsxs)(n.p,{children:["**2. targets.browsers **\n支持浏览器的配置项，该配置项使用方式可以到 browserslist来查询",(0,s.jsxs)(n.a,{href:"https://github.com/browserslist/browserslist",target:"_blank",rel:"noopener noreferrer",children:["（",(0,s.jsx)(n.a,{href:"https://github.com/browserslist/browserslist%EF%BC%89",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/browserslist/browserslist）"})]}),"\n比如上面的 支持每个浏览器最后两个版本和safari大于等于7版本。如上配置。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"3. modules"}),"\n该参数的含义是：启用将ES6模块语法转换为另一种模块类型。将该设置为false就不会转换模块。默认为 'commonjs'.\n该值可以有如下：\n'amd' | 'umd' | 'systemjs' | 'commonjs' | false"]}),"\n",(0,s.jsx)(n.p,{children:"我们在项目中一般会看到如下配置，设置modules: false, 如下代码配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\"presets\": [\n   'env',\n   {\n     'modules': false\n   }\n]\n"})}),"\n",(0,s.jsx)(n.p,{children:"这样做的目的是：以前我们需要使用babel来将ES6的模块语法转换为AMD, CommonJS，UMD之类的模块化标准语法，但是现在webpack都帮我做了这件事了，所以我们不需要babel来做，因此需要在babel配置项中设置modules为false，因为它默认值是commonjs, 否则的话，会产生冲突。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"4. loose, 该参数值默认为false"}),"。\n含义是：允许它们为这个 preset 的任何插件启用”loose” 转换。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"5. include: 包含一些插件，默认为 [];"}),"\n比如包含箭头函数，可以如下配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{\n  "presets": [\n    ["env", {\n      "targets": {\n        "browsers": ["last 2 versions", "safari >= 7"]\n      },\n      "include": ["transform-es2015-arrow-functions", "es6.map"]\n    }]\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"6. exclude； 排除哪些插件，默认为 [];"}),"\n比如 排除生成器，可以如下配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{\n  "presets": [\n    ["env", {\n      "targets": {\n        "browsers": ["last 2 versions", "safari >= 7"]\n      },\n      "exclude": ["transform-regenerator", "es6.set"]\n    }]\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"3.2 理解 babel-presets-stage-x"}),"\n官方预设(preset), 有两种，一个是按年份(babel-preset-es2017)，一个是按阶段(babel-preset-stage-0)。 这主要是根据TC39 委员会ECMASCRPIT 发布流程来制定的。因此到目前为止 有4个不同的阶段预设："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"babel-preset-stage-0\n\nbabel-preset-stage-1\n\nbabel-preset-stage-2\n\nbabel-preset-stage-3\n"})}),"\n",(0,s.jsx)(n.p,{children:"以上每种预设都依赖于紧随的后期阶段预设，数字越小，阶段越靠后，存在依赖关系。也就是说stage-0是包括stage-1的，以此类推。因此 stage-0包含stage-1/2/3的内容。所以如果我们不知道需要哪个stage-x的话，直接引入stage-0就好了。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"stage0"})," ",(0,s.jsxs)(n.a,{href:"https://babeljs.io/docs/en/babel-preset-stage-0",target:"_blank",rel:"noopener noreferrer",children:["(",(0,s.jsx)(n.a,{href:"https://babeljs.io/docs/en/babel-preset-stage-0",target:"_blank",rel:"noopener noreferrer",children:"https://babeljs.io/docs/en/babel-preset-stage-0"}),") "]}),"只是一个美好激进的想法，一些 Babel 插件实现了对这些特性的支持 ，但是不确定是否会被定为标准."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"stage1"})," ",(0,s.jsxs)(n.a,{href:"https://babeljs.io/docs/en/babel-preset-stage-1",target:"_blank",rel:"noopener noreferrer",children:["(",(0,s.jsx)(n.a,{href:"https://babeljs.io/docs/en/babel-preset-stage-1",target:"_blank",rel:"noopener noreferrer",children:"https://babeljs.io/docs/en/babel-preset-stage-1"}),")"]})," 值得被纳入标准的特性."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"stage2"})," ",(0,s.jsxs)(n.a,{href:"https://babeljs.io/docs/en/babel-preset-stage-2",target:"_blank",rel:"noopener noreferrer",children:["(",(0,s.jsx)(n.a,{href:"https://babeljs.io/docs/en/babel-preset-stage-2",target:"_blank",rel:"noopener noreferrer",children:"https://babeljs.io/docs/en/babel-preset-stage-2"}),")"]})," 该特性规范己经被起草，将会被纳入标准里."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"stage3"})," ",(0,s.jsxs)(n.a,{href:"https://babeljs.io/docs/en/babel-preset-stage-3",target:"_blank",rel:"noopener noreferrer",children:["(",(0,s.jsx)(n.a,{href:"https://babeljs.io/docs/en/babel-preset-stage-3",target:"_blank",rel:"noopener noreferrer",children:"https://babeljs.io/docs/en/babel-preset-stage-3"}),") "]}),"该特性规范已经定稿，大浏览器厂商和 Node.js 社区己开始着手实现."]}),"\n",(0,s.jsx)(n.p,{children:"但是在我们使用的时候只需要安装你想要的阶段就可以了：比如 babel-preset-stage-2， 安装命令如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save-dev babel-preset-stage-2\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.cnblogs.com/tugenhua0707/p/9452471.html#_labelTop",target:"_blank",rel:"noopener noreferrer",children:"回到顶部"})}),"\n",(0,s.jsx)(n.p,{children:"二：在webpack中配置babel"}),"\n",(0,s.jsx)(n.p,{children:"在上面了解了babel后，现在我们需要知道如何在webpack中使用它了。由于babel所做的事情是转换代码，所有需要使用loader去转换，因此我们需要配置babel-loader。"}),"\n",(0,s.jsx)(n.p,{children:"在安装babel-loader之前，我们需要安装babel-core， 因为babel-core是Babel编译器的核心，因此也就意味着如果我们需要使用babel-loader进行es6转码的话，我们首先需要安装 babel-core, 安装命令如下即可："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save-dev babel-core\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后我们再安装 babel-loader, 命令如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save-dev babel-loader\n"})}),"\n",(0,s.jsx)(n.p,{children:"接着我们需要安装 babel-preset-env, babel-plugin-transform-runtime, babel-preset-stage-2, 如下命令安装"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save-dev  babel-preset-env babel-plugin-transform-runtime babel-preset-stage-2\n"})}),"\n",(0,s.jsx)(n.p,{children:"因此 .babelrc 配置如下即可："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{\n  "plugins": [\n     [\n      "transform-runtime",\n      {\n        "polyfill": false\n      }\n     ]\n   ],\n   "presets": [\n     [\n       "env",\n       {\n         "modules": false\n       }\n     ],\n     "stage-2"\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"在做demo之前，我们还是先看下目录结构变成如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"### 目录结构如下：\ndemo1                                       # 工程名\n|   |--- dist                               # 打包后生成的目录文件             \n|   |--- node_modules                       # 所有的依赖包\n|   |--- js                                 # 存放所有js文件\n|   | |-- demo1.js  \n|   | |-- main.js                           # js入口文件\n|   |\n|   |--- webpack.config.js                  # webpack配置文件\n|   |--- index.html                         # html文件\n|   |--- styles                             # 存放所有的css样式文件                              \n|   |--- .gitignore  \n|   |--- README.md\n|   |--- package.json\n|   |--- .babelrc                           # babel转码文件\n"})}),"\n",(0,s.jsx)(n.p,{children:"因此webpack配置中需要添加 babel-loader 配置，如下配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /(node_modules)/, // 排除文件\n        loader: 'babel-loader'\n      }\n    ]\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"webpack 所有配置如下代码"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"const path = require('path');\n// 提取css的插件\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nconst ClearWebpackPlugin = require('clean-webpack-plugin');\n\nmodule.exports = {\n  entry: './js/main.js',\n  output: {\n    filename: 'bundle.js',\n    // 将输出的文件都放在dist目录下\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: '/dist'\n  },\n  mode: 'development',\n  module: {\n    rules: [\n      {\n        // 使用正则去匹配要用该loader转换的css文件\n        test: /\\.css$/,\n        loaders: ExtractTextPlugin.extract({\n          // 转换 .css文件需要使用的Loader\n          use: ['css-loader']\n        })\n      },\n      {\n        test: /\\.(png|jpg)$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: '[name].[ext]'\n        }\n      },\n      {\n        test: /\\.js$/,\n        exclude: /(node_modules)/, // 排除文件\n        loader: 'babel-loader'\n      }\n    ]\n  },\n  resolve: {\n    // modules: ['plugin', 'js']\n  },\n  externals: {\n    jquery: 'jQuery'\n  },\n  devtool: 'source-map',\n  plugins: [\n    // new ClearWebpackPlugin(['dist']),\n    new ExtractTextPlugin({\n      // 从js文件中提取出来的 .css文件的名称\n      filename: `main.css`\n    })\n  ]\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"package.json 安装依赖包如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{\n  "name": "demo1",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "dev": "webpack-dev-server --progress --colors --devtool source-map --hot --inline",\n    "build": "webpack --progress --colors"\n  },\n  "devDependencies": {\n    "babel-core": "^6.26.3",\n    "babel-loader": "^7.1.5",\n    "babel-plugin-transform-runtime": "^6.23.0",\n    "babel-preset-env": "^1.7.0",\n    "babel-preset-stage-2": "^6.24.1",\n    "clean-webpack-plugin": "^0.1.19",\n    "css-loader": "^1.0.0",\n    "extract-text-webpack-plugin": "^4.0.0-beta.0",\n    "file-loader": "^1.1.11",\n    "path": "^0.12.7",\n    "style-loader": "^0.21.0",\n    "uglifyjs-webpack-plugin": "^1.2.7",\n    "url-loader": "^1.0.1",\n    "webpack": "^4.16.1",\n    "webpack-cli": "^3.0.8",\n    "webpack-dev-server": "^3.1.4"\n  },\n  "dependencies": {\n    "axios": "^0.18.0",\n    "jquery": "^3.3.1"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"现在我们继续在 main.js 代码内 编写 Generator 函数，代码如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"function* g() {\n  yield 'a';\n  yield 'b';\n  yield 'c';\n  return 'ending';\n}\n\nvar gen = g();\nconsole.log(gen.next()); // 返回Object {value: \"a\", done: false}\n\nfor(let a of [1,2,3,4]) {\n  console.log(a); // 打印出 1, 2, 3, 4\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:'然后重新运行打包命令 npm run dev 后，打开浏览器运行 可以看到控制台输出 {value: "a", done: false}，说明babel已经转译了。'})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,l.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}let o=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["webpack%2Fstalled-webpack4%20babel%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.md"]={toc:[{text:"深入浅出的webpack构建工具---babel之配置文件.babelrc(三)",id:"深入浅出的webpack构建工具---babel之配置文件babelrc三",depth:2}],title:"",frontmatter:{}}}}]);