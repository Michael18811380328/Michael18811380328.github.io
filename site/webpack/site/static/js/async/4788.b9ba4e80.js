"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["4788"],{1066:function(e,n,r){r.r(n),r.d(n,{default:function(){return h}});var s=r(6469),a=r(8809);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h3:"h3",pre:"pre",code:"code",h4:"h4"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"babelplugin-transform-runtime-说明",children:["@babel/plugin-transform-runtime 说明",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#babelplugin-transform-runtime-说明",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"统计信息：字数 4487  阅读9分钟"}),"\n",(0,s.jsxs)(n.h3,{id:"问题来源",children:["问题来源",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#问题来源",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"Babel 通过 babel-preset-env 的配置，把 es6 的语法转换成 es5。"}),"\n",(0,s.jsx)(n.p,{children:"具体转换过程就是在每一个模块前面增加转换函数。"}),"\n",(0,s.jsx)(n.p,{children:"但样这做存在一个问题。在我们正常的前端工程开发的时候，少则几十个js文件，多则上千个。如果每个文件里都使用了class类语法，那会导致每个转换后的文件上部都会注入这些相同的函数声明。这会导致我们用构建工具打包出来的包非常大。"}),"\n",(0,s.jsx)(n.p,{children:"那么怎么办？一个思路就是，我们把这些函数声明都放在一个npm包里，需要使用的时候直接从这个包里引入到我们的文件里。这样即使上千个文件，也会从相同的包里引用这些函数。通过webpack这一类的构建工具打包的时候，我们只会把使用到的npm包里的函数引入一次，这样就做到了复用，减少了体积。"}),"\n",(0,s.jsx)(n.p,{children:"@babel/runtime就是上面说的这个npm包，@babel/runtime把所有语法转换会用到的辅助函数都集成在了一起。这么多辅助函数要一个个记住并手动引入，平常人是做不到的，我也做不到。"}),"\n",(0,s.jsxs)(n.h3,{id:"解决问题",children:["解决问题",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#解决问题",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"@babel/plugin-transform-runtime有三大作用，其中之一就是自动移除语法转换后内联的辅助函数（inline Babel helpers），使用@babel/runtime/helpers里的辅助函数来替代。这样就减少了我们手动引入的麻烦。"}),"\n",(0,s.jsx)(n.p,{children:"直接更改配置文件 Babel.config.js"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'{\n    "presets": [\n      "@babel/env"\n    ],\n    "plugins": [\n      "@babel/plugin-transform-runtime"\n    ]\n  }\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"plugin-transform-runtime-作用",children:["plugin-transform-runtime 作用",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#plugin-transform-runtime-作用",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"@babel/plugin-transform-runtime有三大作用："}),"\n",(0,s.jsx)(n.p,{children:"1.自动移除语法转换后内联的辅助函数（inline Babel helpers），使用@babel/runtime/helpers里的辅助函数来替代；"}),"\n",(0,s.jsx)(n.p,{children:"2.当代码里使用了core-js的API，自动引入@babel/runtime-corejs3/core-js-stable/，以此来替代全局引入的core-js/stable;"}),"\n",(0,s.jsx)(n.p,{children:"3.当代码里使用了Generator/async函数，自动引入@babel/runtime/regenerator，以此来替代全局引入的regenerator-runtime/runtime；"}),"\n",(0,s.jsx)(n.p,{children:"作用2和3其实是在做API转换，对内置对象进行重命名，以防止污染全局环境。"}),"\n",(0,s.jsxs)(n.h3,{id:"配置项",children:["配置项",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置项",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"默认配置"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'"plugins": [\n"@babel/plugin-transform-runtime"\n]\n'})}),"\n",(0,s.jsx)(n.p,{children:"基本配置"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'  { \n    "plugins": [\n      [\n        "@babel/plugin-transform-runtime",\n        {\n          "helpers": true,\n          "corejs": false,\n          "regenerator": true,\n          "useESModules": false,\n          "absoluteRuntime": false,\n          "version": "7.0.0-beta.0"\n        }\n      ]\n    ]\n  }\n'})}),"\n",(0,s.jsx)(n.p,{children:"参数说明："}),"\n",(0,s.jsxs)(n.h4,{id:"helpers",children:["helpers",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#helpers",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"该项是用来设置是否要自动引入辅助函数包，这个我们当然要引入了，这是@babel/plugin-transform-runtime的核心用途。该项取值是布尔值，我们设置为true，其默认值也是true，所以也可以省略不填。"}),"\n",(0,s.jsxs)(n.h4,{id:"corejs和regenerator",children:["corejs和regenerator",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#corejs和regenerator",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"这两项是用来设置是否做API转换以避免污染全局环境，regenerator取值是布尔值，corejs取值是false、2和3。这个上一节已经讲过了，在前端业务项目里，我们一般对corejs取false，即不对Promise这一类的API进行转换。而在开发JS库的时候设置为2或3。regenerator取默认的true就可以。"}),"\n",(0,s.jsxs)(n.h4,{id:"useesmodules",children:["useESModules",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#useesmodules",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"该项用来设置是否使用ES6的模块化用法，取值是布尔值。默认是fasle，在用webpack一类的打包工具的时候，我们可以设置为true，以便做静态分析。"}),"\n",(0,s.jsxs)(n.h4,{id:"absoluteruntime",children:["absoluteRuntime",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#absoluteruntime",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"该项用来自定义@babel/plugin-transform-runtime引入@babel/runtime/模块的路径规则，取值是布尔值或字符串。没有特殊需求，我们不需要修改，保持默认false即可。"}),"\n",(0,s.jsxs)(n.h4,{id:"version",children:["version",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#version",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"该项主要是和@babel/runtime及其进化版@babel/runtime-corejs2、@babel/runtime-corejs3的版本号有关系，这三个包我们只需要根据需要安装一个。我们把安装的npm包的版本号设置给version即可。例如，在上节的babel14例子里，安装的@babel/runtime-corejs3版本是^7.10.4，那么配置项version也取'^7.10.4'。 其实该项不填取默认值就行，目前填写版本号主要是可以减少打包体积。"}),"\n",(0,s.jsx)(n.p,{children:"另外，在Babel6版本，该插件还有两个配置选项polyfill和useBuiltIns，在v7版本已经移除了，大家不需要再使用。"}),"\n",(0,s.jsxs)(n.h3,{id:"参考",children:["参考",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://zhuanlan.zhihu.com/p/394783228",target:"_blank",rel:"noopener noreferrer",children:"https://zhuanlan.zhihu.com/p/394783228"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://zhuanlan.zhihu.com/p/394783727",target:"_blank",rel:"noopener noreferrer",children:"https://zhuanlan.zhihu.com/p/394783727"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://zhuanlan.zhihu.com/p/394783900",target:"_blank",rel:"noopener noreferrer",children:"https://zhuanlan.zhihu.com/p/394783900"})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}let h=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["babel%2F27-babel-plugin-transform-runtime%20%E8%AF%B4%E6%98%8E.md"]={toc:[{text:"问题来源",id:"问题来源",depth:3},{text:"解决问题",id:"解决问题",depth:3},{text:"plugin-transform-runtime 作用",id:"plugin-transform-runtime-作用",depth:3},{text:"配置项",id:"配置项",depth:3},{text:"helpers",id:"helpers",depth:4},{text:"corejs和regenerator",id:"corejs和regenerator",depth:4},{text:"useESModules",id:"useesmodules",depth:4},{text:"absoluteRuntime",id:"absoluteruntime",depth:4},{text:"version",id:"version",depth:4},{text:"参考",id:"参考",depth:3}],title:"@babel/plugin-transform-runtime 说明",frontmatter:{}}}}]);