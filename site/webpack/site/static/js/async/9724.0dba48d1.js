"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["9724"],{897:function(e,n,s){s.r(n),s.d(n,{default:function(){return d}});var r=s(6469),a=s(8809);function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h3:"h3",pre:"pre",code:"code"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"webpack-打包工具简单使用",children:["Webpack 打包工具简单使用",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#webpack-打包工具简单使用",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"统计信息：字数 5328  阅读11分钟"}),"\n",(0,r.jsx)(n.p,{children:"create time 2019-01-01"}),"\n",(0,r.jsx)(n.p,{children:"last modify time 2024-04-15"}),"\n",(0,r.jsx)(n.p,{children:"网易云课堂，注意：课程 2017年出版，是 webpack 版本 3，出品人水平一般，不是大公司。课程仅作为简单复习，了解概念等即可。"}),"\n",(0,r.jsxs)(n.p,{children:["课程链接：",(0,r.jsx)(n.a,{href:"https://study.163.com/course/courseMain.htm?courseId=1004724031&_trace_c_p_k2_=1104e3d9ab4a4d969e7b387fb5863a48",target:"_blank",rel:"noopener noreferrer",children:"https://study.163.com/course/courseMain.htm?courseId=1004724031&_trace_c_p_k2_=1104e3d9ab4a4d969e7b387fb5863a48"})]}),"\n",(0,r.jsxs)(n.p,{children:["现在是 2024年，webpack 具体细节参考官方文档：",(0,r.jsx)(n.a,{href:"https://webpack.docschina.org/guides/getting-started/",target:"_blank",rel:"noopener noreferrer",children:"https://webpack.docschina.org/guides/getting-started/"})]}),"\n",(0,r.jsxs)(n.h3,{id:"课时1-详细介绍webpack工具的相关基础知识",children:["课时1 详细介绍webpack工具的相关基础知识",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#课时1-详细介绍webpack工具的相关基础知识",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"为什么使用 webpack? 这需要从网页加载说起。一个界面中，如果 HTML 中有多个 style 和 script 标签，那么需要进行多次网络请求，性能较差。我们可以把多个 JS 或者 CSS 文件打包成一个 CSS 或者 JS 文件，这样前端只需要请求1次即可，性能得到优化。"}),"\n",(0,r.jsx)(n.p,{children:"同时，打包过程中，根据不同的 loader，例如 uglyfy 可以把不需要的部分删除，或者丑化代码，减少代码量，减少网络请求时间，同样性能得到优化。"}),"\n",(0,r.jsx)(n.p,{children:"Webpack 定义: 是一个前端资源加载、打包工具，将根据模块的依赖关系，进行静态分析，并依据规则生成对应的静态资源。（可以把一个图状的依赖结构，包括 dependencies）打包成简单的几个 JS 文件（static assets）"}),"\n",(0,r.jsxs)(n.h3,{id:"课时2-搭建webpack的打包的开发环境",children:["课时2 搭建webpack的打包的开发环境",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#课时2-搭建webpack的打包的开发环境",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在 3 版本中，全局安装 webpack"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo npm install webpack -g\nwebpack -v\nwebpack test.js bundle.js\n"})}),"\n",(0,r.jsx)(n.p,{children:"这样就把 test.js 打包成 bundle.js (如果是配置文件，需要设置一个或者多个入口文件进行打包)"}),"\n",(0,r.jsxs)(n.p,{children:["不同 JS 文件内部互相依赖",(0,r.jsx)(n.code,{children:"（module.exports = {}, require('path')）"})]}),"\n",(0,r.jsx)(n.p,{children:"webpack 进行语法分析后，可以获取不同文件的依赖关系。"}),"\n",(0,r.jsxs)(n.h3,{id:"课时3-打包多个相互依赖的js文件过程",children:["课时3 打包多个相互依赖的js文件过程",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#课时3-打包多个相互依赖的js文件过程",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"==可以通过模块的导入导出功能，创建不同模块的依赖关系树，然后进行打包。=="}),"\n",(0,r.jsx)(n.p,{children:"一个模块（文件）可以 export 很多变量，import { } 需要使用大括号"}),"\n",(0,r.jsx)(n.p,{children:"一个模块只能 export default 一个变量（类），import 后面直接加这个类名即可"}),"\n",(0,r.jsxs)(n.p,{children:["export 和 export default 的区别，参考 ",(0,r.jsx)(n.a,{href:"https://www.cnblogs.com/fanyanzhao/p/10298543.html",target:"_blank",rel:"noopener noreferrer",children:"https://www.cnblogs.com/fanyanzhao/p/10298543.html"})]}),"\n",(0,r.jsxs)(n.h3,{id:"课时4-利用工具打包-css-文件",children:["课时4 利用工具打包 css 文件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#课时4-利用工具打包-css-文件",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"css 之间没有明显的依赖关系，所以通过 loader 进行加载打包"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install css-loader style-loader\n"})}),"\n",(0,r.jsxs)(n.p,{children:["css-loader 可以把 js 中",(0,r.jsx)(n.code,{children:"import xxx.css"})," 这样的依赖关系整理出来"]}),"\n",(0,r.jsx)(n.p,{children:"style-loader 可以把 HTML 中的 style 标签整理出来"}),"\n",(0,r.jsx)(n.p,{children:"还有其他的 sass less loader 对应相关的样式文件"}),"\n",(0,r.jsx)(n.p,{children:"通常在 webpack 配置文件中设置，需要考虑 loader 的顺序（从后向前执行），否则无法生效"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"{\n  test: /\\.css$/,\n    loader: ExtractTextPlugin.extract(\n      Object.assign(\n        {\n          fallback: {\n            loader: require.resolve('style-loader'),\n            options: {\n              hmr: false,\n            },\n          },\n          use: [\n            {\n              loader: require.resolve('css-loader'),\n              options: {\n                importLoaders: 1,\n                minimize: true,\n                sourceMap: shouldUseSourceMap,\n              },\n            },\n            {\n              loader: require.resolve('postcss-loader'),\n              options: {\n                // Necessary for external CSS imports to work\n                // https://github.com/facebookincubator/create-react-app/issues/2677\n                ident: 'postcss',\n                plugins: () => [\n                  require('postcss-flexbugs-fixes'),\n                  autoprefixer({\n                    browsers: [\n                      '>1%',\n                      'last 4 versions',\n                      'Firefox ESR',\n                      'not ie < 9', // React doesn't support IE8 anyway\n                    ],\n                    flexbox: 'no-2009',\n                  }),\n                ],\n              },\n            },\n          ],\n        },\n        extractTextPluginOptions\n      )\n    ),\n   // Note: this won't work without `new ExtractTextPlugin()` in `plugins`.\n},\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"课时5-如何打包样式文件",children:["课时5 如何打包样式文件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#课时5-如何打包样式文件",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"单文件，可以直接在 css require 中使用 loader 打包，实际不会这样使用"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"require('!style-loader!css-loader!./srtle.css');\n\ndocument.write('test');\n"})}),"\n",(0,r.jsx)(n.p,{children:"实际上需要在配置文件中批量处理，使用正则表达式匹配文件，然后加入对应的 loader"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"module.exports = {\n  entey: './src/index.js',\n  output: {\n    path: __dirname + '/dist',\n    filename: 'bundle.js',\n  },\n  module: {\n    loaders: [\n      {\n        test: /\\.css$/,\n        loader: 'style-loader!css-loader'\n      }\n    ],\n  },\n  devServer: {\n    port: 8001,\n  },\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"服务端环境"}),"\n",(0,r.jsx)(n.p,{children:"webpack 是打包工具"}),"\n",(0,r.jsx)(n.p,{children:"本地需要一个服务器，就是 webpack-dev-server 把打包的文件放在本地的服务器上"}),"\n",(0,r.jsx)(n.p,{children:"早期的代码，需要把 webpack 编译和 webpack-dev-server 运行服务器分别写成两个命令"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"{\n  \"scripts\": {\n    'start': 'webpack-dev-server --entry ./src/index.js --output-file ./dist/bundle.js',\n    'build': 'webpack --watch',\n  },\n  \"dependencies\": {\n    'react': '',\n  },\n  \"devDependencies\": {\n    \"css-loader\": '',\n    \"style-loader\": '',\n    'webpack-dev-server': '',\n  },\n}\n"})})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}let d=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["webpack%2F06-%E7%BD%91%E6%98%93%20webpack%20%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8.md"]={toc:[{text:"课时1 详细介绍webpack工具的相关基础知识",id:"课时1-详细介绍webpack工具的相关基础知识",depth:3},{text:"课时2 搭建webpack的打包的开发环境",id:"课时2-搭建webpack的打包的开发环境",depth:3},{text:"课时3 打包多个相互依赖的js文件过程",id:"课时3-打包多个相互依赖的js文件过程",depth:3},{text:"课时4 利用工具打包 css 文件",id:"课时4-利用工具打包-css-文件",depth:3},{text:"课时5 如何打包样式文件",id:"课时5-如何打包样式文件",depth:3}],title:"Webpack 打包工具简单使用",frontmatter:{}}}}]);