"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["5347"],{5898:function(e,n,t){t.r(n),t.d(n,{default:function(){return i}});var a=t(6469),o=t(8809);function r(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h3:"h3",pre:"pre",code:"code"},(0,o.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"usage-guide",children:["Usage Guide",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usage-guide",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"统计信息：字数 9242  阅读19分钟"}),"\n",(0,a.jsx)(n.p,{children:'There are quite a few tools in the Babel toolchain that try to make it easy for you to use Babel whether you\'re an "end-user" or building an integration of Babel itself. This will be a quick introduction to those tools and you can read more about them in the "Usage" section of the docs.'}),"\n",(0,a.jsx)(n.p,{children:"If you're using a framework, the work of configuring Babel might be different or actually already handled for you. Check out our interactive setup guide instead."}),"\n",(0,a.jsx)(n.p,{children:"babel 工具链中有很多工具；这里简单介绍这些工具。"}),"\n",(0,a.jsxs)(n.h3,{id:"overview-概述",children:["Overview 概述",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#overview-概述",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"This guide will show you how to compile your JavaScript application code that uses ES2015+ syntax into code that works in current browsers. That will involve both transforming new syntax and polyfilling missing features."}),"\n",(0,a.jsx)(n.p,{children:"这个文档告诉你如何把ES6编译成浏览器可以识别的语言，包括转换新的语法和填充缺少的特性。"}),"\n",(0,a.jsx)(n.p,{children:"The entire process to set this up involves:下面是整个设置的过程："}),"\n",(0,a.jsx)(n.p,{children:"Running these commands to install the packages:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @babel/core @babel/cli @babel/preset-env\nnpm install --save @babel/polyfill\n"})}),"\n",(0,a.jsx)(n.p,{children:"Creating a config file named babel.config.json in the root of your project with this content:（babel.config.json）"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "presets": [\n    [\n      "@babel/env",\n      {\n        "targets": {\n          "edge": "17",\n          "firefox": "60",\n          "chrome": "67",\n          "safari": "11.1",\n        },\n        "useBuiltIns": "usage",\n      }\n    ]\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"The browsers list above is just an arbitrary example. You will have to adapt it for the browsers you want to support."}),"\n",(0,a.jsx)(n.p,{children:"And running this command to compile all your code from the src directory to lib: 编译文件"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"./node_modules/.bin/babel src --out-dir lib\n"})}),"\n",(0,a.jsx)(n.p,{children:"You can use the npm package runner that comes with npm@5.2.0 to shorten that command by replacing ./node_modules/.bin/babel with npx babel"}),"\n",(0,a.jsx)(n.p,{children:"Read on for a step-by-step explanation of how this works and an introduction to each of the tools used."}),"\n",(0,a.jsx)(n.p,{children:"下面是对每一个工具的详细使用说明"}),"\n",(0,a.jsxs)(n.h3,{id:"basic-usage-with-cli-基本使用",children:["Basic usage with CLI 基本使用",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#basic-usage-with-cli-基本使用",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"All the Babel modules you'll need are published as separate npm packages scoped under @babel (since version 7). This modular design allows for various tools each designed for a specific use case. Here we'll look at @babel/core and @babel/cli."}),"\n",(0,a.jsxs)(n.h3,{id:"core-library",children:["Core Library",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#core-library",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"The core functionality of Babel resides at the @babel/core module. After installing it:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @babel/core\n"})}),"\n",(0,a.jsx)(n.p,{children:"you can require it directly in your JavaScript program and use it like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'const babel = require("@babel/core");\nbabel.transform("code", optionsObject);\n'})}),"\n",(0,a.jsx)(n.p,{children:"As an end-user though, you'll probably want to install other tools that serve as an interface to @babel/core and integrate well with your development process. Even so, you might still want to check its documentation page to learn about the options, most of which can be set from the other tools as well."}),"\n",(0,a.jsx)(n.p,{children:"core 核心库可以转换JS代码到ES5，这个只能在JS文件中使用。所以需要一个CLI，可以直接在终端运行babel。"}),"\n",(0,a.jsxs)(n.h3,{id:"cli-tool",children:["CLI tool",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cli-tool",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"@babel/cli is a tool that allows you to use babel from the terminal. Here's the installation command and a basic usage example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @babel/core @babel/cli\n\n./node_modules/.bin/babel src --out-dir lib\n"})}),"\n",(0,a.jsx)(n.p,{children:"This will parse all the JavaScript files in the src directory, apply any transformations we have told it to, and output each file to the lib directory. Since we haven't told it to apply any transformations yet, the output code will be identical to the input (exact code styling is not preserved). We can specify what transformations we want by passing them as options."}),"\n",(0,a.jsx)(n.p,{children:"We used the --out-dir option above. You can view the rest of the options accepted by the cli tool by running it with --help. But the most important to us right now are --plugins and --presets."}),"\n",(0,a.jsx)(n.p,{children:"这是命令行执行编译的插件，可以使用 --out-dir 命令设置编译后文件的位置，使用 --plugins --presets 设置更重要的内容"}),"\n",(0,a.jsxs)(n.h3,{id:"plugins--presets-插件和预设",children:["Plugins & Presets 插件和预设",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#plugins--presets-插件和预设",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"Transformations come in the form of plugins, which are small JavaScript programs that instruct Babel on how to carry out transformations to the code. You can even write your own plugins to apply any transformations you want to your code. To transform ES2015+ syntax into ES5 we can rely on official plugins like @babel/plugin-transform-arrow-functions:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @babel/plugin-transform-arrow-functions\n./node_modules/.bin/babel src --out-dir lib --plugins=@babel/plugin-transform-arrow-functions\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now any arrow functions in our code will be transformed into ES5 compatible function expressions:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"const fn = () => 1;\n\n// converted to\n\nvar fn = function fn() {\n  return 1;\n};\n"})}),"\n",(0,a.jsx)(n.p,{children:'That\'s a good start! But we also have other ES2015+ features in our code that we want transformed. Instead of adding all the plugins we want one by one, we can use a "preset" which is just a pre-determined set of plugins.'}),"\n",(0,a.jsx)(n.p,{children:"Just like with plugins, you can create your own presets too to share any combination of plugins you need. For our use case here, there's an excellent preset named env."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @babel/preset-env\n./node_modules/.bin/babel src --out-dir lib --presets=@babel/env\n"})}),"\n",(0,a.jsx)(n.p,{children:"Without any configuration, this preset will include all plugins to support modern JavaScript (ES2015, ES2016, etc.). But presets can take options too. Rather than passing both cli and preset options from the terminal, let's look at another way of passing options: configuration files."}),"\n",(0,a.jsx)(n.p,{children:"可以在terminal中传参，可以通过配置文件传参（参数很多很方便）"}),"\n",(0,a.jsxs)(n.h3,{id:"configuration",children:["Configuration",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#configuration",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"There are a few different ways to use configuration files depending on your needs. Be sure to read our in-depth guide on how to configure Babel for more information."}),"\n",(0,a.jsx)(n.p,{children:"For now, let's create a file called babel.config.json with the following content:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const presets = [\n  [\n    "@babel/env",\n    {\n      targets: {\n        edge: "17",\n        firefox: "60",\n        chrome: "67",\n        safari: "11.1",\n      },\n    },\n  ],\n];\nmodule.exports = { presets };\n'})}),"\n",(0,a.jsx)(n.p,{children:"Now the env preset will only load transformation plugins for features that are not available in our target browsers. We're all set for syntax. Let's look at polyfills next."}),"\n",(0,a.jsxs)(n.h3,{id:"polyfill",children:["Polyfill",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#polyfill",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"\uD83D\uDEA8 As of Babel 7.4.0, this package has been deprecated in favor of directly including core-js/stable (to polyfill ECMAScript features) and regenerator-runtime/runtime (needed to use transpiled generator functions):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import "core-js/stable";\nimport "regenerator-runtime/runtime";\n'})}),"\n",(0,a.jsx)(n.p,{children:"The @babel/polyfill module includes core-js and a custom regenerator runtime to emulate(仿真) a full ES2015+ environment."}),"\n",(0,a.jsx)(n.p,{children:"This means you can use new built-ins like Promise or WeakMap, static methods like Array.from or Object.assign, instance methods like Array.prototype.includes, and generator functions (when used alongside the regenerator plugin). The polyfill adds to the global scope as well as native prototypes like String in order to do this."}),"\n",(0,a.jsx)(n.p,{children:"For library/tool authors this may be too much. If you don't need the instance methods like Array.prototype.includes you can do without polluting the global scope altogether by using the transform runtime plugin instead of @babel/polyfill."}),"\n",(0,a.jsx)(n.p,{children:"To go one step further, if you know exactly what features you need polyfills for, you can require them directly from core-js."}),"\n",(0,a.jsx)(n.p,{children:"Since we're building an application we can just install @babel/polyfill:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install --save @babel/polyfill\n"})}),"\n",(0,a.jsx)(n.p,{children:"Note the --save option instead of --save-dev as this is a polyfill that needs to run before your source code."}),"\n",(0,a.jsx)(n.p,{children:'Now luckily for us, we\'re using the env preset which has a "useBuiltIns" option that when set to "usage" will practically apply the last optimization mentioned above where you only include the polyfills you need. With this new option the configuration changes like this:'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'{\n  "presets": [\n    [\n      "@babel/env",\n      {\n        "targets": {\n          "edge": "17",\n          "firefox": "60",\n          "chrome": "67",\n          "safari": "11.1",\n        },\n        "useBuiltIns": "usage",\n      }\n    ]\n  ]\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Babel will now inspect all your code for features that are missing in your target environments and include only the required polyfills. For example this code:"}),"\n",(0,a.jsx)(n.p,{children:"Promise.resolve().finally();"}),"\n",(0,a.jsx)(n.p,{children:"would turn into this (because Edge 17 doesn't have Promise.prototype.finally):"}),"\n",(0,a.jsx)(n.p,{children:'require("core-js/modules/es.promise.finally");'}),"\n",(0,a.jsx)(n.p,{children:"Promise.resolve().finally();"}),"\n",(0,a.jsx)(n.p,{children:'If we weren\'t using the env preset with the "useBuiltIns" option set to "usage" we would\'ve had to require the full polyfill only once in our entry point before any other code.'}),"\n",(0,a.jsxs)(n.h3,{id:"summary",children:["Summary",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#summary",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"We used @babel/cli to run Babel from the terminal, @babel/polyfill to polyfill all the new JavaScript features, and the env preset to only include the transformations and polyfills for the features that we use and that are missing in our target browsers."}),"\n",(0,a.jsx)(n.p,{children:"我们使用 CLI 在终端运行babel，使用 polyfill 来支持新的JS语法，使用 evn preset 处理转换特征，来适应我们的浏览器。"})]})}function s(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(r,{...e})}):r(e)}let i=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["babel%2F22-Babel%20Usage%20Guide.md"]={toc:[{text:"Overview 概述",id:"overview-概述",depth:3},{text:"Basic usage with CLI 基本使用",id:"basic-usage-with-cli-基本使用",depth:3},{text:"Core Library",id:"core-library",depth:3},{text:"CLI tool",id:"cli-tool",depth:3},{text:"Plugins & Presets 插件和预设",id:"plugins--presets-插件和预设",depth:3},{text:"Configuration",id:"configuration",depth:3},{text:"Polyfill",id:"polyfill",depth:3},{text:"Summary",id:"summary",depth:3}],title:"Usage Guide",frontmatter:{}}}}]);