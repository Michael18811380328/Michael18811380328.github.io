"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["4491"],{4628:function(e,n,r){r.r(n),r.d(n,{default:function(){return i}});var a=r(6469),t=r(8809);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code"},(0,t.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"---",children:["---",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#---",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"统计信息：字数 7119  阅读15分钟"}),"\n",(0,a.jsxs)(n.h2,{id:"layout-------posttitle--------typescript-react-webpack-combinationsubtitle-----use-ts-react-webpack-togetherdate---------2018-10-09-220000author-------zefengheader-img---imgtsjpgheader-mask--03catalog------truetags--typescript--react--webpack",children:['layout:       post\ntitle:        "TypeScript React Webpack Combination"\nsubtitle:     "Use TS React Webpack together"\ndate:         2018-10-09 22:00:00\nauthor:       "ZeFeng"\nheader-img:   "img/TS.jpg"\nheader-mask:  0.3\ncatalog:      true\ntags:\n- TypeScript\n- React\n- Webpack',(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#layout-------posttitle--------typescript-react-webpack-combinationsubtitle-----use-ts-react-webpack-togetherdate---------2018-10-09-220000author-------zefengheader-img---imgtsjpgheader-mask--03catalog------truetags--typescript--react--webpack",children:"#"})]}),"\n",(0,a.jsxs)(n.h2,{id:"前言",children:["前言",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"这篇文章我们主要讲解如何使用TS与已经使用React以及webpack的项目结合使用。"}),"\n",(0,a.jsxs)(n.h2,{id:"正文",children:["正文",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#正文",children:"#"})]}),"\n",(0,a.jsxs)(n.h2,{id:"初始化项目结构",children:["初始化项目结构",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#初始化项目结构",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"首先我们新建一个名字为myTsProj的文件夹，命令如下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir myTsProj\n\ncd myTsProj\n"})}),"\n",(0,a.jsx)(n.p,{children:"接下来创建src文件夹，用来放TS文件。然后在src文件夹里面创建components文件夹，用来放我们自己自定义的组件。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir src\ncd src\nmkdir components\ncd ..\n"})}),"\n",(0,a.jsx)(n.p,{children:"Webpack会帮助我们生成dist目录。经webpack处理，会生成bundle.js文件放在dist目录下。\n最后看到的文件如下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"proj/\n├─dist/\n└─ src/   \n  └─components/\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"初始化工程",children:["初始化工程",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#初始化工程",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"安装,使用默认值就可以了。也可以在生成的 package.json文件里修改。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"npm init\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"安装依赖",children:["安装依赖",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装依赖",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"1、要确保我们有安装webpack,如果没有安装，执行下面的命令："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install -g webpack\n"})}),"\n",(0,a.jsx)(n.p,{children:"Webpack可以将所有代码和可选择地将依赖捆绑成一个单独的.js文件"}),"\n",(0,a.jsx)(n.p,{children:"2、接着添加React和React-DOM以及它们的声明文件到package.json文件里做为依赖，执行下面命令："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install --save react react-dom @types/react @types/react-dom\n"})}),"\n",(0,a.jsx)(n.p,{children:'（说明： 这个命令使用@types/前缀表示要额外获取React和React-DOM的声明文件。 通常导入像 "react"这样的路径，它会查看react包； 然而，并不是所有的包都包含了声明文件，所以TS还会查看 @types/react包。 之后将不必在意这些了。）\n3、最后，我们要添加开发时依赖awesome-typescript-loader和source-map-loader。'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev typescript awesome-typescript-loader source-map-loader\n"})}),"\n",(0,a.jsx)(n.p,{children:"（说明：awesome-typescript-loader可以让Webpack使用TypeScript的标准配置文件 tsconfig.json编译TypeScript代码。 source-map-loader使用TypeScript输出的sourcemap文件来告诉webpack何时生成 自己的sourcemaps。 这就允许我们在调试最终生成的文件时就好像在调试TypeScript源码一样。）"}),"\n",(0,a.jsxs)(n.h2,{id:"添加typescript配置文件",children:["添加TypeScript配置文件",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#添加typescript配置文件",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"我们想将我们写的源码和必要的TypeScript文件整合到一起，这就需要创建一个tsconfig.json文件。（包含了输入文件列表以及编译选项）\n在myTsProj的根目录下新建 tsconfig.json文件，里面配置如下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{ \n  "compilerOptions":{        \n    "outDir": "./dist/",        \n    "sourceMap": true,\n    "noImplicitAny": true,\n    "module": "commonjs",        \n    "target": "es5",\n    "jsx": "react"    \n  },   \n  "include": [\n    "./src/**/*"\n  ]\n}\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"编写代码",children:["编写代码",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编写代码",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"首先在 src/components目录下创建一个Demo.tsx的文件，代码如下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import * as React from "react";\nexport interface DemoProps { compiler: string; framework: string;}\nexport const Demo = (props: DemoProps) => <h1>Hello from {props.compiler} and {props.framework}!</h1>;\n \n'})}),"\n",(0,a.jsx)(n.p,{children:"这个例子使用了无状态的功能组件，我们可以让它更像一点类。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"import * as React from \"react\";\nexport interface DemoProps { compiler: string; framework: string;}\n// 'DemoProps ' describes the shape of props.\n// State is never set so we use the '{}' type.\nexport class Demo extends React.Component<DemoProps , {}> {\n  render() {\n    <h1>Hello from {props.compiler} and {props.framework}!</h1>;\n  }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"接下来，在src下创建index.tsx文件，代码如下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import * as React from "react";\nimport * as ReactDOM from "react-dom";\nimport { Demo } from "./components/Demo";\nReactDOM.render(\n<Demo compiler="TypeScript" framework="React" />,\ndocument.getElementById("app")\n'})}),"\n",(0,a.jsxs)(n.p,{children:["注意:  ",'\n我们仅仅将Demo组件导入index.tsx。 不同于 "react"或"react-dom"，我们使用Demo.tsx的相对路径 - 这很重要。 如果不这样做，TypeScript只会尝试在 node_modules文件夹里查找。\n我们还缺一个页面来显示Demo组件。 在myTsProj根目录创建一个名为index.html的文件，代码如下：']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="UTF-8" />\n    <title>React TS Demo!</title>\n  </head>    \n  <body>        \n    <div id="app"></div>        \n    \x3c!-- Dependencies --\x3e\n    <script src="./node_modules/react/umd/react.development.js"><\/script>\n    <script src="./node_modules/react-dom/umd/react-dom.development.js"><\/script>        \n    \x3c!-- Main --\x3e        \n    <script src="./dist/bundle.js"><\/script>    \n  </body>\n</html>\n'})}),"\n",(0,a.jsx)(n.p,{children:"需要注意一点我们是从node_modules引入的文件。 React和React-DOM的npm包里包含了独立的 .js文件，你可以在页面上引入它们，这里我们为了快捷就直接引用了。 可以随意地将它们拷贝到其它目录下，或者从CDN上引用。"}),"\n",(0,a.jsxs)(n.h2,{id:"创建webpack配置文件",children:["创建webpack配置文件",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建webpack配置文件",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"做到这里，我们还差最后一步。\n在myTsProj根目录下创建webpack.config.js文件，代码如下："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'module.exports = {\n    entry: "./src/index.tsx",\n    output: {\n        filename: "bundle.js",\n        path: __dirname + "/dist"\n    },\n\n    // Enable sourcemaps for debugging webpack\'s output.\n    devtool: "source-map",\n\n    resolve: {\n        // Add \'.ts\' and \'.tsx\' as resolvable extensions.\n        extensions: [".ts", ".tsx", ".js", ".json"]\n    },\n\n    module: {\n        rules: [\n            // All files with a \'.ts\' or \'.tsx\' extension will be handled by \'awesome-typescript-loader\'.\n            { test: /\\.tsx?$/, loader: "awesome-typescript-loader" },\n\n            // All output \'.js\' files will have any sourcemaps re-processed by \'source-map-loader\'.\n            { enforce: "pre", test: /\\.js$/, loader: "source-map-loader" }\n        ]\n    },\n\n    // When importing a module whose path matches one of the following, just\n    // assume a corresponding global variable exists and use that instead.\n    // This is important because it allows us to avoid bundling all of our\n    // dependencies, which allows browsers to cache those libraries between builds.\n    externals: {\n        "react": "React",\n        "react-dom": "ReactDOM"\n    },\n};\n'})}),"\n",(0,a.jsx)(n.p,{children:"之所以添加externals字段，因为我们想要避免把所有的React都放到一个文件里，那样会增加编译时间并且浏览器还能够缓存没有发生改变的库文件。"}),"\n",(0,a.jsx)(n.p,{children:'webpack允许我们使用通过这种方式写的代码库。 通过我们的设置 "react": "React"，webpack会神奇地将所有对"react"的导入转换成从React全局变量中加载。'}),"\n",(0,a.jsxs)(n.h2,{id:"运行",children:["运行",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#运行",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"最后我们只需要执行一个命令："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"webpack\n"})}),"\n",(0,a.jsx)(n.p,{children:"在浏览器里打开index.html，应该已经可以用了！ 你可以看到页面上显示着:\n“Hello from TypeScript and React!”"}),"\n",(0,a.jsxs)(n.p,{children:["相信大家对TS已经有一定了解了，可以到官网深入学习TS了。",(0,a.jsx)(n.a,{href:"https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter",target:"_blank",rel:"noopener noreferrer",children:"官网链接"})]}),"\n",(0,a.jsx)(n.p,{children:"Reward\n"})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(s,{...e})}):s(e)}let i=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["webpack%2F44-TS-React-Webpack.md"]={toc:[{text:'layout:       post\ntitle:        "TypeScript React Webpack Combination"\nsubtitle:     "Use TS React Webpack together"\ndate:         2018-10-09 22:00:00\nauthor:       "ZeFeng"\nheader-img:   "img/TS.jpg"\nheader-mask:  0.3\ncatalog:      true\ntags:\n- TypeScript\n- React\n- Webpack',id:"layout-------posttitle--------typescript-react-webpack-combinationsubtitle-----use-ts-react-webpack-togetherdate---------2018-10-09-220000author-------zefengheader-img---imgtsjpgheader-mask--03catalog------truetags--typescript--react--webpack",depth:2},{text:"前言",id:"前言",depth:2},{text:"正文",id:"正文",depth:2},{text:"初始化项目结构",id:"初始化项目结构",depth:2},{text:"初始化工程",id:"初始化工程",depth:2},{text:"安装依赖",id:"安装依赖",depth:2},{text:"添加TypeScript配置文件",id:"添加typescript配置文件",depth:2},{text:"编写代码",id:"编写代码",depth:2},{text:"创建webpack配置文件",id:"创建webpack配置文件",depth:2},{text:"运行",id:"运行",depth:2}],title:"---",frontmatter:{}}}}]);