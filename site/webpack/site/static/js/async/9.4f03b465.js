"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["9"],{2983:function(e,n,r){r.r(n),r.d(n,{default:function(){return l}});var a=r(6469),s=r(8809);function t(e){let n=Object.assign({h2:"h2",a:"a",p:"p",h3:"h3",pre:"pre",code:"code"},(0,s.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h2,{id:"babel-是什么",children:["Babel 是什么？",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#babel-是什么",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"统计信息：字数 3276  阅读7分钟"}),"\n",(0,a.jsx)(n.p,{children:"Babel 是一个 JavaScript 编译器。Babel 是一个工具链，主要用于将 ECMAScript 2015+ 版本的代码转换为向后兼容的 JavaScript 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。下面列出的是 Babel 能为你做的事情："}),"\n",(0,a.jsxs)(n.h3,{id:"语法转换",children:["语法转换",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#语法转换",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"通过 Polyfill 方式在目标环境中添加缺失的特性 (通过 @babel/polyfill 模块)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"// Babel 输入： ES2015 箭头函数\n[1, 2, 3].map((n) => n + 1);\n\n// Babel 输出： ES5 语法实现的同等功能\n[1, 2, 3].map(function(n) {\n  return n + 1;\n});\n"})}),"\n",(0,a.jsx)(n.p,{children:"有关编译器的精彩教程，请查看 the-super-tiny-compiler 项目，它解释了 Babel 的工作方式。"}),"\n",(0,a.jsxs)(n.h3,{id:"es2015es6",children:["ES2015(ES6)",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#es2015es6",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"Babel 通过语法转换器来支持新版本的 JavaScript 语法。"}),"\n",(0,a.jsx)(n.p,{children:"这些 插件 让你现在就能使用新的语法，无需等待浏览器的支持。"}),"\n",(0,a.jsxs)(n.h3,{id:"jsx-与-react",children:["JSX 与 React",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jsx-与-react",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"Babel 能够转换 JSX 语法！查看 React preset 了解更多信息。通过和 babel-sublime 一起使用还可以把语法高亮的功能提升到一个新的水平。"}),"\n",(0,a.jsx)(n.p,{children:"通过以下命令安装此 preset"}),"\n",(0,a.jsx)(n.p,{children:"npm install --save-dev @babel/preset-react"}),"\n",(0,a.jsx)(n.p,{children:"并将 @babel/preset-react 添加到你的 Babel 配置文件中。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"export default React.createClass({\n  getInitialState() {\n    return { num: this.getRandomNumber() };\n  },\n\n  getRandomNumber() {\n    return Math.ceil(Math.random() * 6);\n  },\n\n  render() {\n    return <div>\n      Your dice roll:\n      {this.state.num}\n    </div>;\n  }\n});\n"})}),"\n",(0,a.jsx)(n.p,{children:"了解更多关于 JSX 的信息。"}),"\n",(0,a.jsxs)(n.h3,{id:"类型注释-flow-和-typescript",children:["类型注释 (Flow 和 TypeScript)",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型注释-flow-和-typescript",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"Babel 可以删除类型注释！查看 Flow preset 或 TypeScript preset 了解如何使用。务必牢记 Babel 不做类型检查，你仍然需要安装 Flow 或 TypeScript 来执行类型检查的工作。"}),"\n",(0,a.jsx)(n.p,{children:"通过以下命令安装 flow preset"}),"\n",(0,a.jsx)(n.p,{children:"npm install --save-dev @babel/preset-flow"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"// @flow\nfunction square(n: number): number {\n  return n * n;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"或通过以下命令安装 typescript preset"}),"\n",(0,a.jsx)(n.p,{children:"npm install --save-dev @babel/preset-typescript"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"function Greeter(greeting: string) {\n    this.greeting = greeting;\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"插件化",children:["插件化",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#插件化",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"Babel 构建在插件之上。使用现有的或者自己编写的插件可以组成一个转换管道。通过使用或创建一个 preset 即可轻松使用一组插件。 了解更多 →"}),"\n",(0,a.jsx)(n.p,{children:"利用 astexplorer.net 可以立即创建一个插件，或者使用 generator-babel-plugin 生成一个插件模板。"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"// 一个插件就是一个函数\nexport default function ({types: t}) {\n  return {\n    visitor: {\n      Identifier(path) {\n        let name = path.node.name; // reverse the name: JavaScript -> tpircSavaJ\n        path.node.name = name.split('').reverse().join('');\n      }\n    }\n  };\n}\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"可调试",children:["可调试",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#可调试",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"由于 Babel 支持 Source map，因此你可以轻松调试编译后的代码。"}),"\n",(0,a.jsxs)(n.h3,{id:"符合规范",children:["符合规范",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#符合规范",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"Babel 尽最大可能遵循 ECMAScript 标准。不过，Babel 还提供了特定的选项来对标准和性能做权衡。"}),"\n",(0,a.jsxs)(n.h3,{id:"代码紧凑",children:["代码紧凑",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#代码紧凑",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:'Babel 尽可能用最少的代码并且不依赖太大量的运行环境。有些情况是很难达成的这一愿望的，因此 Babel 提供了 "loose" 参数，用以在特定的转换情况下在符合规范、文件大小和速度之间做折中。'})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(t,{...e})}):t(e)}let l=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["babel%2F21-Babel%20is%20what.md"]={toc:[{text:"Babel 是什么？",id:"babel-是什么",depth:2},{text:"语法转换",id:"语法转换",depth:3},{text:"ES2015(ES6)",id:"es2015es6",depth:3},{text:"JSX 与 React",id:"jsx-与-react",depth:3},{text:"类型注释 (Flow 和 TypeScript)",id:"类型注释-flow-和-typescript",depth:3},{text:"插件化",id:"插件化",depth:3},{text:"可调试",id:"可调试",depth:3},{text:"符合规范",id:"符合规范",depth:3},{text:"代码紧凑",id:"代码紧凑",depth:3}],title:"",frontmatter:{}}}}]);