"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["1425"],{307:function(e,n,r){r.r(n),r.d(n,{default:function(){return i}});var s=r(6469),t=r(8809);function l(e){let n=Object.assign({h1:"h1",a:"a",p:"p",strong:"strong",ul:"ul",li:"li",pre:"pre",code:"code",img:"img"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"深入浅出的webpack构建工具---devserver配置项二",children:["深入浅出的webpack构建工具---DevServer配置项(二)",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#深入浅出的webpack构建工具---devserver配置项二",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"统计信息：字数 19528  阅读40分钟"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"阅读目录"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"DevServer配置项"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.cnblogs.com/tugenhua0707/p/9418526.html#_labe1_0",target:"_blank",rel:"noopener noreferrer",children:"1. contentBase"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.cnblogs.com/tugenhua0707/p/9418526.html#_labe1_1",target:"_blank",rel:"noopener noreferrer",children:"2. port"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.cnblogs.com/tugenhua0707/p/9418526.html#_labe1_2",target:"_blank",rel:"noopener noreferrer",children:"3. host"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.cnblogs.com/tugenhua0707/p/9418526.html#_labe1_3",target:"_blank",rel:"noopener noreferrer",children:"4. headers"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.cnblogs.com/tugenhua0707/p/9418526.html#_labe1_4",target:"_blank",rel:"noopener noreferrer",children:"5. historyApiFallback"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.cnblogs.com/tugenhua0707/p/9418526.html#_labe1_5",target:"_blank",rel:"noopener noreferrer",children:"6. hot"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.cnblogs.com/tugenhua0707/p/9418526.html#_labe1_6",target:"_blank",rel:"noopener noreferrer",children:"7. inline"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.cnblogs.com/tugenhua0707/p/9418526.html#_labe1_7",target:"_blank",rel:"noopener noreferrer",children:"8. open"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.cnblogs.com/tugenhua0707/p/9418526.html#_labe1_8",target:"_blank",rel:"noopener noreferrer",children:"9. overlay"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.cnblogs.com/tugenhua0707/p/9418526.html#_labe1_9",target:"_blank",rel:"noopener noreferrer",children:"10. stats(字符串)"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.cnblogs.com/tugenhua0707/p/9418526.html#_labe1_10",target:"_blank",rel:"noopener noreferrer",children:"11. compress"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.cnblogs.com/tugenhua0707/p/9418526.html#_labe1_11",target:"_blank",rel:"noopener noreferrer",children:"12. proxy 实现跨域"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"摘要：webpack-dev-server是一个使用了express的Http服务器，它的作用主要是为了监听资源文件的改变，该http服务器和client使用了websocket通信协议，只要资源文件发生改变，webpack-dev-server就会实时的进行编译。"}),"\n",(0,s.jsx)(n.p,{children:"\\1. contentBase"}),"\n",(0,s.jsx)(n.p,{children:"该配置项指定了服务器资源的根目录，如果不配置contentBase的话，那么contentBase默认是当前执行的目录,一般是项目的根目录。\n可能如上解析还不够清晰，没有关系，我们下面还是先看下我整个项目的目录结构，然后进行相关的配置，使用contentBase配置项再来理解下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"### 目录结构如下：\ndemo1                                       # 工程名\n|   |--- dist                               # dist是打包后生成的目录文件             \n|   |--- node_modules                       # 所有的依赖包\n|   |--- js                                 # 存放所有js文件\n|   | |-- demo1.js  \n|   | |-- main.js                           # js入口文件\n|   |\n|   |--- webpack.config.js                  # webpack配置文件\n|   |--- index.html                         # html文件\n|   |--- styles                             # 存放所有的css样式文件                              \n|   |--- .gitignore  \n|   |--- README.md\n|   |--- package.json\n"})}),"\n",(0,s.jsx)(n.p,{children:"index.html 代码如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>Title</title>\n  <link href="dist/main.css" rel="stylesheet" type="text/css" />\n</head>\n<body>\n  <div id="app"></div>\n  <script src="dist/bundle.js"><\/script>\n</body>\n</html>\n'})}),"\n",(0,s.jsx)(n.p,{children:"main.js 代码如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"require('../styles/main.css');\n\nimport demo1 from './demo1.js';\n"})}),"\n",(0,s.jsx)(n.p,{children:"demo1.js 代码如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"console.log(111);\n"})}),"\n",(0,s.jsx)(n.p,{children:"webpack配置代码如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"const path = require('path');\n// 提取css的插件\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nmodule.exports = {\n  entry: './js/main.js',\n  output: {\n    filename: 'bundle.js',\n    // 将输出的文件都放在dist目录下\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: '/dist'\n  },\n  mode: 'development',\n  module: {\n    rules: [\n      {\n        // 使用正则去匹配要用该loader转换的css文件\n        test: /\\.css$/,\n        loaders: ExtractTextPlugin.extract({\n          // 转换 .css文件需要使用的Loader\n          use: ['css-loader']\n        })\n      },\n      {\n        test: /\\.(png|jpg)$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: '[name].[ext]'\n        }\n      }\n    ]\n  },\n  resolve: {\n    // modules: ['plugin', 'js']\n  },\n  plugins: [\n    new ExtractTextPlugin({\n      // 从js文件中提取出来的 .css文件的名称\n      filename: `main.css`\n    })\n  ]\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"package.json 配置代码如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'"scripts": {\n  "dev": "webpack-dev-server --progress --colors --devtool source-map --hot --inline",\n  "build": "webpack --progress --colors"\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["运行 npm run dev后，一切正常成功后，在浏览器下 运行 ",(0,s.jsx)(n.a,{href:"http://localhost:8080/",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8080/"})," 即可在控制台看到 打印出 111 了。"]}),"\n",(0,s.jsx)(n.p,{children:"如上是没有使用devServer配置的情况下。 下面我们来看下使用 devServer配置."}),"\n",(0,s.jsx)(n.p,{children:"在webpack配置加上如下配置，即配置项指定了服务器资源的根目录。比如我们打包后的文件放入 dist目录下。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'module.exports = {\n  devServer: {\n    contentBase: path.join(__dirname, "dist")\n  },\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["如上配置完成后，我们再运行 npm run dev, 再在地址栏中 运行 ",(0,s.jsx)(n.a,{href:"http://localhost:8080/",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8080/"})," 后看到如下信息："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://images2018.cnblogs.com/blog/561794/201808/561794-20180804140528111-70636394.png",alt:"img"})}),"\n",(0,s.jsxs)(n.p,{children:["也就是说 配置了 contentBase后，服务器就指向了资源的根目录，而不再指向项目的根目录。因此再访问 ",(0,s.jsx)(n.a,{href:"http://localhost:8080/index.html",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8080/index.html"})," 是访问不到的。但是访问 ",(0,s.jsx)(n.a,{href:"http://localhost:8080/bundle.js",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8080/bundle.js"})," 该js文件是可以访问的到的。"]}),"\n",(0,s.jsx)(n.p,{children:"\\2. port"}),"\n",(0,s.jsx)(n.p,{children:"该配置属性指定了开启服务器的端口号，比如如下配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'module.exports = {\n  devServer: {\n    contentBase: path.join(__dirname, "dist"),\n    port: 8081\n  },\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"配置完成后，再运行打包命令 npm run dev 后，可以看到如下图所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://images2018.cnblogs.com/blog/561794/201808/561794-20180804140623918-541733780.png",alt:"img"})}),"\n",(0,s.jsxs)(n.p,{children:["现在我们可以通过 如下地址 ",(0,s.jsx)(n.a,{href:"http://localhost:8081/",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8081/"})," 也可以访问了，也就是说 通过port配置，端口号从默认的8080改成8081了。"]}),"\n",(0,s.jsx)(n.p,{children:"\\3. host"}),"\n",(0,s.jsx)(n.p,{children:"该配置项用于配置 DevServer的服务器监听地址。比如想让局域网的其他设备访问自己的本地服务，则可以在启动DevServer时带上 --host 0.0.0.0.\nhost的默认值是 127.0.0.1, 下面我们也简单的配置下 host 属性。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"module.exports = {\n  devServer: {\n    contentBase: path.join(__dirname, \"dist\"),\n    port: 8081,\n    host: '0.0.0.0'\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"配置完成后，再运行打包命令 npm run dev 后，可以看到如下图所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://images2018.cnblogs.com/blog/561794/201808/561794-20180804140722245-1105568247.png",alt:"img"})}),"\n",(0,s.jsxs)(n.p,{children:["我们访问 ",(0,s.jsx)(n.a,{href:"http://0.0.0.0:8081/",target:"_blank",rel:"noopener noreferrer",children:"http://0.0.0.0:8081/"})," 可以访问的到了，其他局域网的同学应该也能访问的到吧。"]}),"\n",(0,s.jsx)(n.p,{children:"\\4. headers"}),"\n",(0,s.jsx)(n.p,{children:"该配置项可以在HTTP响应中注入一些HTTP响应头。 比如如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"module.exports = {\n  devServer: {\n    contentBase: path.join(__dirname, \"dist\"),\n    port: 8081,\n    host: '0.0.0.0',\n    headers: {\n      'X-foo': '112233'\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"如上配置完成后，打包下，刷新下浏览器，可以看到请求头加了上面的信息，如下所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://images2018.cnblogs.com/blog/561794/201808/561794-20180804140809199-1325776165.png",alt:"img"})}),"\n",(0,s.jsx)(n.p,{children:"\\5. historyApiFallback"}),"\n",(0,s.jsx)(n.p,{children:"该配置项属性是用来应对返回404页面时定向跳转到特定页面的。一般是应用在 HTML5中History API 的单页应用，比如在访问路由时候，访问不到该路由的时候，会跳转到index.html页面。\n我们现在在dist目录下 新建一个index.html, 代码如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="UTF-8">\n  <title>Title</title>\n</head>\n<body>\n  <div id="app">欢迎你们来访问我</div>\n</body>\n</html>\n'})}),"\n",(0,s.jsx)(n.p,{children:"为了使配置项生效，我们只需要设置该 属性值为true即可； 如下配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"module.exports = {\n  devServer: {\n    contentBase: path.join(__dirname, \"dist\"),\n    port: 8081,\n    host: '0.0.0.0',\n    headers: {\n      'X-foo': '112233'\n    },\n    historyApiFallback: true\n  },\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["现在我们来访问 ",(0,s.jsx)(n.a,{href:"http://0.0.0.0:8081/home",target:"_blank",rel:"noopener noreferrer",children:"http://0.0.0.0:8081/home"})," 这个不存在的路由时，会发生什么？如下所示："]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://images2018.cnblogs.com/blog/561794/201808/561794-20180804140920426-1335868478.png",alt:"img"})}),"\n",(0,s.jsx)(n.p,{children:"如上可以看到，当不存在该路由的时候，通过该配置项，设置属性值为true的时候，会自动跳转到 index.html下。"}),"\n",(0,s.jsx)(n.p,{children:"当然如上只是简单的配置下，当然我们也可以手动通过 正则来匹配路由，比如访问 /user 跳转到 user.html，访问 /home 跳转到 home.html, 如下配置："}),"\n",(0,s.jsx)(n.p,{children:"当然我们需要在 dist 目录下 新建 home.html 和 user.html 了，如下基本配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"module.exports = {\n  devServer: {\n    contentBase: path.join(__dirname, \"dist\"),\n    port: 8081,\n    host: '0.0.0.0',\n    headers: {\n      'X-foo': '112233'\n    },\n    historyApiFallback: {\n      // 使用正则来匹配路由\n      rewrites: [\n        { from: /^\\/user/, to: '/user.html' },\n        { from: /^\\/home/, to: '/home.html' }\n      ]\n    }\n  },\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["重新运行打包下， 继续访问 ",(0,s.jsx)(n.a,{href:"http://0.0.0.0:8081/home",target:"_blank",rel:"noopener noreferrer",children:"http://0.0.0.0:8081/home"})," 和 ",(0,s.jsx)(n.a,{href:"http://0.0.0.0:8081/user",target:"_blank",rel:"noopener noreferrer",children:"http://0.0.0.0:8081/user"})," 即可看到能访问得到对应的页面了。"]}),"\n",(0,s.jsx)(n.p,{children:"\\6. hot"}),"\n",(0,s.jsx)(n.p,{children:"该配置项是指模块替换换功能，DevServer 默认行为是在发现源代码被更新后通过自动刷新整个页面来做到实时预览的，\n但是开启模块热替换功能后，它是通过在不刷新整个页面的情况下通过使用新模块替换旧模块来做到实时预览的。"}),"\n",(0,s.jsx)(n.p,{children:"我们可以在 devServer中 配置 hot: true 即可：如下配置代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"module.exports = {\n  devServer: {\n    contentBase: path.join(__dirname, \"dist\"),\n    port: 8081,\n    host: '0.0.0.0',\n    headers: {\n      'X-foo': '112233'\n    },\n    historyApiFallback: {\n      // 使用正则来匹配路由\n      rewrites: [\n        { from: /^\\/user/, to: '/user.html' },\n        { from: /^\\/home/, to: '/home.html' }\n      ]\n    },\n    hot: true\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"当然我们也可以在scripts命令行中配置，比如我项目中在package.json中的scripts配置如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'"scripts": {\n  "dev": "webpack-dev-server --progress --colors --devtool source-map --hot --inline",\n  "build": "webpack --progress --colors"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"\\7. inline"}),"\n",(0,s.jsxs)(n.p,{children:["webpack-dev-server 有两种模式可以实现自动刷新和模块热替换机制。\n",(0,s.jsx)(n.strong,{children:"1. iframe"}),"\n页面是被嵌入到一个iframe页面，并且在模块变化的时候重载页面。"]}),"\n",(0,s.jsx)(n.p,{children:"可能如上解释，我们还不能完全能理解到底是什么意思，没有关系，我们继续来看下配置和实践效果。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"module.exports = {\n  devServer: {\n    port: 8081,\n    host: '0.0.0.0',\n    headers: {\n      'X-foo': '112233'\n    },\n    inline: false\n  },\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"如上代码配置 inline: false 就是使用iframe模式来重载页面了。我们的目录结构还是上面的那种结构，然后我们只需要在webpack中所有\n配置如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"const path = require('path');\n// 提取css的插件\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nmodule.exports = {\n  entry: './js/main.js',\n  output: {\n    filename: 'bundle.js',\n    // 将输出的文件都放在dist目录下\n    path: path.resolve(__dirname, 'dist'),\n    publicPath: '/dist'\n  },\n  mode: 'development',\n  module: {\n    rules: [\n      {\n        // 使用正则去匹配要用该loader转换的css文件\n        test: /\\.css$/,\n        loaders: ExtractTextPlugin.extract({\n          // 转换 .css文件需要使用的Loader\n          use: ['css-loader']\n        })\n      },\n      {\n        test: /\\.(png|jpg)$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: '[name].[ext]'\n        }\n      }\n    ]\n  },\n  resolve: {\n    // modules: ['plugin', 'js']\n  },\n  devServer: {\n    port: 8081,\n    host: '0.0.0.0',\n    headers: {\n      'X-foo': '112233'\n    },\n    inline: false\n  },\n  plugins: [\n    new ExtractTextPlugin({\n      // 从js文件中提取出来的 .css文件的名称\n      filename: `main.css`\n    })\n  ]\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后当我们在命令行中，输入 webpack-dev-server 后 回车，可以看到如下图所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://images2018.cnblogs.com/blog/561794/201808/561794-20180804141158245-2037841274.png",alt:"img"})}),"\n",(0,s.jsxs)(n.p,{children:["接着我们在浏览器下 输入 ",(0,s.jsx)(n.a,{href:"http://0.0.0.0:8081/webpack-dev-server/",target:"_blank",rel:"noopener noreferrer",children:"http://0.0.0.0:8081/webpack-dev-server/"})," 地址后 回车，即可看到页面，我们查看源代码的时候，会看到嵌入了一个iframe页面，如下图所示：\n",(0,s.jsx)(n.img,{src:"https://images2018.cnblogs.com/blog/561794/201808/561794-20180804141231207-401833272.png",alt:"img"})]}),"\n",(0,s.jsx)(n.p,{children:"当我们重新修改main.js 或 它的依赖文件 demo1.js 的时候，保存后，它也会自动重新加载页面，这就是使用 iframe 模式来配置加载页面的。"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"iframe 模式的特点有："}),"\n\\1. 在网页中嵌入了一个iframe，将我们自己的应用代码注入到 这个 iframe中去了。\n\\2. 在页面头部会有一个 App ready. 这个提示，用于显示构建过程的状态信息。\n\\3. 加载了 live.bundle.js文件，还同时包含了 socket.io的client代码，进行了 websocket通讯，从而完成了自动编译打包，页面自动刷新功能。"]}),"\n",(0,s.jsx)(n.p,{children:"我们看下请求的所有文件有如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://images2018.cnblogs.com/blog/561794/201808/561794-20180804141316145-533057885.png",alt:"img"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"2. inline 模式"})}),"\n",(0,s.jsx)(n.p,{children:"开启模式，只需要把上面的配置代码变为 inline: true即可，它在构建变化后的代码会通过代理客户端来控制网页刷新。\n如上配置后，我们运行 webpack-dev-server 命令后，如下所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://images2018.cnblogs.com/blog/561794/201808/561794-20180804141346390-1372379506.png",alt:"img"})}),"\n",(0,s.jsxs)(n.p,{children:["接着我们在地址栏中 ",(0,s.jsx)(n.a,{href:"http://0.0.0.0:8081/",target:"_blank",rel:"noopener noreferrer",children:"http://0.0.0.0:8081/"})," 运行下 就可以访问到 项目中的根目录 index.html了，当我们修改入口文件的代码保存也一样\n能实时刷新，其实效果是一样的。"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"inline模式的特点有："}),"\n\\1. 构建的消息在控制台中直接显示出来。\n\\2. socket.io的client代码被打包进bundle.js当中，这样就能和websocket通讯，从而完成自动编译工作，页面就能实现自动刷新功能。\n\\3. 以后的每一个入口文件都会插入上面的socket的一段代码，这样会使的打包后的bundle.js文件变得臃肿。"]}),"\n",(0,s.jsx)(n.p,{children:"\\8. open"}),"\n",(0,s.jsx)(n.p,{children:"该属性用于DevServer启动且第一次构建完成时，自动使用我们的系统默认浏览器去打开网页。"}),"\n",(0,s.jsx)(n.p,{children:"如下配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"module.exports = {\n  devServer: {\n    // contentBase: path.join(__dirname, \"dist\"),\n    port: 8081,\n    host: '0.0.0.0',\n    headers: {\n      'X-foo': '112233'\n    },\n    // hot: true,\n    inline: true,\n    open: true\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"设置 open: true 即可，当我们运行完成 npm run dev 打包的时候，会自动打开默认的浏览器来查看网页。"}),"\n",(0,s.jsx)(n.p,{children:"\\9. overlay"}),"\n",(0,s.jsxs)(n.p,{children:["该属性是用来在编译出错的时候，在浏览器页面上显示错误。该属性值默认为false，需要的话，设置该参数为true。\n为了演示下，我们来在main.js 代码内使用ES6的语法来编写代码，ES6是使用babel-loader 这样的来转化的，但是目前我们的项目先不安装该loader，应该会报错的。比如在main.js 代码加如下一句代码：\n",(0,s.jsx)(n.strong,{children:"const a;"})]}),"\n",(0,s.jsx)(n.p,{children:"配置 overlay: true即可：如下配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"module.exports = {\n  devServer: {\n    // contentBase: path.join(__dirname, \"dist\"),\n    port: 8081,\n    host: '0.0.0.0',\n    headers: {\n      'X-foo': '112233'\n    },\n    // hot: true,\n    inline: true,\n    open: true,\n    overlay: true\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"运行 npm run dev 后，自动打开网页，显示如下所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://images2018.cnblogs.com/blog/561794/201808/561794-20180804141533353-1837443960.png",alt:"img"})}),"\n",(0,s.jsx)(n.p,{children:"\\10. stats(字符串)"}),"\n",(0,s.jsx)(n.p,{children:"该属性配置是用来在编译的时候再命令行中输出的内容，我们没有设置 stats的时候，输出是如下的样子：如下所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://images2018.cnblogs.com/blog/561794/201808/561794-20180804141552438-1613728659.png",alt:"img"})}),"\n",(0,s.jsx)(n.p,{children:"该属性值可以有如下值："}),"\n",(0,s.jsx)(n.p,{children:"stats: 'errors-only' 表示只打印错误，我们添加下这个配置到devServer中；如下代码配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"module.exports = {\n  devServer: {\n    // contentBase: path.join(__dirname, \"dist\"),\n    port: 8081,\n    host: '0.0.0.0',\n    headers: {\n      'X-foo': '112233'\n    },\n    // hot: true,\n    inline: true,\n    open: true,\n    overlay: true,\n    stats: 'errors-only'\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"现在我们继续 运行 npm run dev 后，会看到命令行中显示如下："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://images2018.cnblogs.com/blog/561794/201808/561794-20180804141627922-1964528088.png",alt:"img"})}),"\n",(0,s.jsx)(n.p,{children:"该配置的含义是 只有错误的才会被打印，没有错误就不打印，因此多余的信息就不会显示出来了。"}),"\n",(0,s.jsx)(n.p,{children:"该属性值还有 'minimal', 'normal', 'verbose' 等。"}),"\n",(0,s.jsx)(n.p,{children:"\\11. compress"}),"\n",(0,s.jsx)(n.p,{children:"该属性是一个布尔型的值，默认为false，当他为true的时候，它会对所有服务器资源采用gzip进行压缩。"}),"\n",(0,s.jsx)(n.p,{children:"\\12. proxy 实现跨域"}),"\n",(0,s.jsxs)(n.p,{children:["有时候我们使用webpack在本地启动服务器的时候，由于我们使用的访问的域名是 ",(0,s.jsx)(n.a,{href:"http://localhost:8081",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8081"})," 这样的，但是我们服务端的接口是其他的，"]}),"\n",(0,s.jsxs)(n.p,{children:["那么就存在域名或端口号跨域的情况下，但是很幸运的是 devServer有一个叫proxy配置项，可以通过该配置来解决跨域的问题，那是因为 dev-server 使用了 http-proxy-middleware 包",(0,s.jsx)(n.a,{href:"https://github.com/chimurai/http-proxy-middleware#options",target:"_blank",rel:"noopener noreferrer",children:"(了解该包的更多用法 )"}),"。"]}),"\n",(0,s.jsxs)(n.p,{children:["假如现在我们本地访问的域名是 ",(0,s.jsx)(n.a,{href:"http://localhost:8081",target:"_blank",rel:"noopener noreferrer",children:"http://localhost:8081"}),", 但是我现在调用的是百度页面中的一个接口，该接口地址是：",(0,s.jsx)(n.a,{href:"http://news.baidu.com/widget?ajax=json&id=ad%E3%80%82%E7%8E%B0%E5%9C%A8%E6%88%91%E4%BB%AC%E5%8F%AA%E9%9C%80%E8%A6%81%E5%9C%A8devServer%E4%B8%AD%E7%9A%84proxy%E7%9A%84%E9%85%8D%E7%BD%AE%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%EF%BC%9A",target:"_blank",rel:"noopener noreferrer",children:"http://news.baidu.com/widget?ajax=json&id=ad。现在我们只需要在devServer中的proxy的配置就可以了："}),"\n如下配置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"proxy: {\n  '/api': {\n    target: 'http://news.baidu.com', // 目标接口的域名\n    // secure: true,  // https 的时候 使用该参数\n    changeOrigin: true,  // 是否跨域\n    pathRewrite: {\n      '^/api' : ''  // 重写路径\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"因此所有的配置如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"module.exports = {\n  devServer: {\n    // contentBase: path.join(__dirname, \"dist\"),\n    headers: {\n      'X-foo': '112233'\n    },\n    // hot: true,\n    port: '8081',\n    inline: true,\n    open: true,\n    overlay: true,\n    stats: 'errors-only',\n    proxy: {\n      '/api': {\n        target: 'http://news.baidu.com', // 目标接口的域名\n        // secure: true,  // https 的时候 使用该参数\n        changeOrigin: true,  // 是否跨域\n        pathRewrite: {\n          '^/api' : ''  // 重写路径\n        }\n      }\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后我们在main.js里面编写如下代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"import axios from 'axios';\n\naxios.get('/api/widget?ajax=json&id=ad').then(res => {\n  console.log(res);\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"在这里请求我使用 axios 插件，其实和jquery是一个意思的。为了方便就用了这个。"}),"\n",(0,s.jsx)(n.p,{children:"下面我们来理解下上面配置的含义："}),"\n",(0,s.jsxs)(n.p,{children:["\\1. 首先是百度的接口地址是这样的：",(0,s.jsx)(n.a,{href:"http://news.baidu.com/widget?ajax=json&id=ad",target:"_blank",rel:"noopener noreferrer",children:"http://news.baidu.com/widget?ajax=json&id=ad"}),";\n\\2. proxy 的配置项 '/api' 和 target: '",(0,s.jsx)(n.a,{href:"http://news.baidu.com",target:"_blank",rel:"noopener noreferrer",children:"http://news.baidu.com"}),"' 的含义是，匹配请求中 /api 含有这样的域名 重定向 到 '",(0,s.jsx)(n.a,{href:"http://news.baidu.com'%E6%9D%A5%E3%80%82%E5%9B%A0%E6%AD%A4%E6%88%91%E5%9C%A8%E6%8E%A5%E5%8F%A3%E5%9C%B0%E5%9D%80%E4%B8%8A",target:"_blank",rel:"noopener noreferrer",children:"http://news.baidu.com'来。因此我在接口地址上"})," 添加了前缀 '/api', 如： axios.get('/api/widget?ajax=json&id=ad'); 因此会自动补充前缀，也就是说，url: '/api/widget?ajax=json&id=ad' 等价\n于 url: '",(0,s.jsx)(n.a,{href:"http://news.baidu.com/api/widget?ajax=json&id=ad",target:"_blank",rel:"noopener noreferrer",children:"http://news.baidu.com/api/widget?ajax=json&id=ad"}),"'.\n\\3. changeOrigin: true/false 还参数值是一个布尔值，含义是 是否需要跨域。\n\\4. secure: true, 如果是https请求就需要改参数配置，需要ssl证书吧。\n\\5. pathRewrite: {'^/api' : ''}的含义是重写url地址，把url的地址里面含有 '/api' 这样的 替换成 '',\n因此接口地址就变成了 ",(0,s.jsx)(n.a,{href:"http://news.baidu.com/widget?ajax=json&id=ad%EF%BC%9B",target:"_blank",rel:"noopener noreferrer",children:"http://news.baidu.com/widget?ajax=json&id=ad；"})," 因此就可以请求得到了，最后就返回\n接口数据了。"]}),"\n",(0,s.jsx)(n.p,{children:"如下图所示："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://images2018.cnblogs.com/blog/561794/201808/561794-20180804141932073-157113643.png",alt:"img"})})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}let i=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["webpack%2Fstalled-webpack4DevServer%E9%85%8D%E7%BD%AE%E9%A1%B9.md"]={toc:[],title:"深入浅出的webpack构建工具---DevServer配置项(二)",frontmatter:{}}}}]);