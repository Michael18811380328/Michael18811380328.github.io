"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["8263"],{3455:function(e,n,s){s.r(n),s.d(n,{default:function(){return i}});var r=s(6469),c=s(8809);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h3:"h3",blockquote:"blockquote",pre:"pre",code:"code",h4:"h4",ul:"ul",li:"li",strong:"strong",img:"img",ol:"ol",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h2:"h2"},(0,c.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"入门-webpack",children:["入门 Webpack",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#入门-webpack",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"统计信息：字数 44551  阅读90分钟"}),"\n",(0,r.jsx)(n.p,{children:"Michael An: 原理类似，但是细节不一样，webpack4 到 webpack5 更新比较多。"}),"\n",(0,r.jsxs)(n.h3,{id:"写在前面的话",children:["写在前面的话",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#写在前面的话",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"2018年8月25日更新，此外用基于 webpack 4.17.1。"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"阅读本文之前，先看下面这个webpack的配置文件，如果每一项你都懂，那本文能带给你的收获也许就比较有限，你可以快速浏览或直接跳过；如果你和十天前的我一样，对很多选项存在着疑惑，那花一段时间慢慢阅读本文，你的疑惑一定一个一个都会消失；如果你以前没怎么接触过Webpack，而你又你对webpack感兴趣，那么动手跟着本文中那个贯穿始终的例子写一次，写完以后你会发现你已明明白白的走进了Webpack的大门。"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// 一个常见的`webpack`配置文件\nconst webpack = require(\'webpack\');\nconst HtmlWebpackPlugin = require(\'html-webpack-plugin\');\nconst ExtractTextPlugin = require(\'extract-text-webpack-plugin\');\n\nmodule.exports = {\n  entry: __dirname + "/app/main.js", //已多次提及的唯一入口文件\n  output: {\n    path: __dirname + "/build",\n    filename: "bundle-[hash].js"\n  },\n  devtool: \'none\',\n  devServer: {\n    contentBase: "./public", //本地服务器所加载的页面所在的目录\n    historyApiFallback: true, //不跳转\n    inline: true,\n    hot: true\n  },\n  module: {\n    rules: [{\n      test: /(\\.jsx|\\.js)$/,\n      use: {\n        loader: "babel-loader"\n      },\n      exclude: /node_modules/\n    }, {\n      test: /\\.css$/,\n      use: ExtractTextPlugin.extract({\n        fallback: "style-loader",\n        use: [{\n          loader: "css-loader",\n          options: {\n            modules: true,\n            localIdentName: \'[name]__[local]--[hash:base64:5]\'\n          }\n        }, {\n          loader: "postcss-loader"\n        }],\n      })\n    }\n	}]},\n  plugins: [\n    new webpack.BannerPlugin(\'版权所有，翻版必究\'),\n    new HtmlWebpackPlugin({\n      template: __dirname + "/app/index.tmpl.html" //new 一个这个插件的实例，并传入相关的参数\n    }),\n    new webpack.optimize.OccurrenceOrderPlugin(),\n    new webpack.optimize.UglifyJsPlugin(),\n    new ExtractTextPlugin("style.css")\n  ]\n};\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"什么是webpack为什么要使用它",children:["什么是WebPack，为什么要使用它？",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#什么是webpack为什么要使用它",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"为什要使用webpack",children:["为什要使用WebPack",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#为什要使用webpack",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"模块化"}),"，让我们可以把复杂的程序细化为小的文件;"]}),"\n",(0,r.jsx)(n.li,{children:"类似于TypeScript这种在JavaScript基础上拓展的开发语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能转换为JavaScript文件使浏览器可以识别；"}),"\n",(0,r.jsx)(n.li,{children:"Scss，less等CSS预处理器"}),"\n",(0,r.jsx)(n.li,{children:"..."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常繁琐的，这就为WebPack类的工具的出现提供了需求。"}),"\n",(0,r.jsxs)(n.h4,{id:"什么是webpack",children:["什么是Webpack",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#什么是webpack",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["WebPack可以看做是",(0,r.jsx)(n.strong,{children:"模块打包机"}),"：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其转换和打包为合适的格式供浏览器使用。"]}),"\n",(0,r.jsxs)(n.h4,{id:"webpack和grunt以及gulp相比有什么特性",children:["WebPack和Grunt以及Gulp相比有什么特性",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#webpack和grunt以及gulp相比有什么特性",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"其实Webpack和另外两个并没有太多的可比性，Gulp/Grunt是一种能够优化前端的开发流程的工具，而WebPack是一种模块化的解决方案，不过Webpack的优点使得Webpack在很多场景下可以替代Gulp/Grunt类的工具。"}),"\n",(0,r.jsxs)(n.p,{children:["Grunt和Gulp的工作方式是：在一个配置文件中，指明对某些文件进行类似编译，组合，压缩等任务的具体步骤，工具之后可以自动替你完成这些任务。\n",(0,r.jsx)(n.img,{src:"https://segmentfault.com/img/remote/1460000007045084",alt:"Grunt和Gulp的工作流程"})]}),"\n",(0,r.jsxs)(n.p,{children:["Webpack的工作方式是：把你的项目当做一个整体，通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。\n",(0,r.jsx)(n.img,{src:"https://segmentfault.com/img/remote/1460000007045085",alt:"Webpack工作方式"})]}),"\n",(0,r.jsx)(n.p,{children:"如果实在要把二者进行比较，Webpack的处理速度更快更直接，能打包更多不同类型的文件。"}),"\n",(0,r.jsxs)(n.h3,{id:"开始使用webpack",children:["开始使用Webpack",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#开始使用webpack",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"初步了解了Webpack工作方式后，我们一步步的开始学习使用Webpack。"}),"\n",(0,r.jsxs)(n.h4,{id:"安装",children:["安装",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Webpack可以使用npm安装，新建一个空的练习文件夹（此处命名为webpack sample project），在终端中转到该文件夹后执行下述指令就可以完成安装。"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"//全局安装\nnpm install -g webpack\n//安装到你的项目目录\nnpm install --save-dev webpack\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"正式使用webpack前的准备",children:["正式使用Webpack前的准备",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#正式使用webpack前的准备",children:"#"})]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["在上述练习文件夹中创建一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。在终端中使用",(0,r.jsx)(n.code,{children:"npm init"}),"命令可以自动创建这个package.json文件"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm init\n"})}),"\n",(0,r.jsx)(n.p,{children:"输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"package.json文件已经就绪，我们在本项目中安装Webpack作为依赖包"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"// 安装Webpack\nnpm install --save-dev webpack\n"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["回到之前的空文件夹，并在里面创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放之后供浏览器读取的文件（包括使用webpack打包生成的js文件以及一个",(0,r.jsx)(n.code,{children:"index.html"}),"文件）。接下来我们再创建三个文件:"]}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"index.html"})," --放在public文件夹中;"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Greeter.js"}),"-- 放在app文件夹中;"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"main.js"}),"-- 放在app文件夹中;"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["此时项目结构如下图所示\n",(0,r.jsx)(n.img,{src:"https://segmentfault.com/img/remote/1460000007045086",alt:"项目结构"})]}),"\n",(0,r.jsxs)(n.p,{children:["我们在",(0,r.jsx)(n.strong,{children:"index.html"}),"文件中写入最基础的html代码，它在这里目的在于引入打包后的js文件（这里我们先把之后打包后的js文件命名为",(0,r.jsx)(n.code,{children:"bundle.js"}),"，之后我们还会详细讲述）。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'\x3c!-- index.html --\x3e\n<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8">\n    <title>Webpack Sample Project</title>\n  </head>\n  <body>\n    <div id=\'root\'>\n    </div>\n    <script src="bundle.js"><\/script>\n  </body>\n</html>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["我们在",(0,r.jsx)(n.code,{children:"Greeter.js"}),"中定义一个返回包含问候信息的",(0,r.jsx)(n.code,{children:"html"}),"元素的函数,并依据CommonJS规范导出这个函数为一个模块："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// Greeter.js\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = \"Hi there and greetings!\";\n  return greet;\n};\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"main.js"}),"文件中我们写入下述代码，用以把",(0,r.jsx)(n.code,{children:"Greeter模块"}),"返回的节点插入页面。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"//main.js \nconst greeter = require('./Greeter.js');\ndocument.querySelector(\"#root\").appendChild(greeter());\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"正式使用webpack",children:["正式使用Webpack",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#正式使用webpack",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"webpack可以在终端中使用，在基本的使用方法如下："}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# {extry file}出填写入口文件的路径，本文中就是上述main.js的路径，\n# {destination for bundled file}处填写打包文件的存放路径\n# 填写路径的时候不用添加{}\nwebpack {entry file} {destination for bundled file}\n"})}),"\n",(0,r.jsx)(n.p,{children:"指定入口文件后，webpack将自动识别项目所依赖的其它文件，不过需要注意的是如果你的webpack不是全局安装的，那么当你在终端中使用此命令时，需要额外指定其在node_modules中的地址，继续上面的例子，在终端中输入如下命令"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# webpack非全局安装的情况\nnode_modules/.bin/webpack app/main.js public/bundle.js\n"})}),"\n",(0,r.jsx)(n.p,{children:"结果如下"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://segmentfault.com/img/remote/1460000010637709",alt:"使用命令行打包"})}),"\n",(0,r.jsxs)(n.p,{children:["可以看出",(0,r.jsx)(n.code,{children:"webpack"}),"同时编译了",(0,r.jsx)(n.code,{children:"main.js"})," 和",(0,r.jsx)(n.code,{children:"Greeter,js"}),",现在打开",(0,r.jsx)(n.code,{children:"index.html"}),",可以看到如下结果\n",(0,r.jsx)(n.img,{src:"https://segmentfault.com/img/remote/1460000010637710",alt:"htmlResult1"})]}),"\n",(0,r.jsxs)(n.p,{children:["有没有很激动，已经成功的使用",(0,r.jsx)(n.code,{children:"Webpack"}),"打包了一个文件了。不过在终端中进行复杂的操作，其实是不太方便且容易出错的，接下来看看Webpack的另一种更常见的使用方法。"]}),"\n",(0,r.jsxs)(n.h4,{id:"通过配置文件来使用webpack",children:["通过配置文件来使用",(0,r.jsx)(n.code,{children:"Webpack"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#通过配置文件来使用webpack",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Webpack拥有很多其它的比较高级的功能（比如说本文后面会介绍的",(0,r.jsx)(n.code,{children:"loaders"}),"和",(0,r.jsx)(n.code,{children:"plugins"}),"），这些功能其实都可以通过命令行模式实现，但是正如前面提到的，这样不太方便且容易出错的，更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，我们可以把所有的与打包相关的信息放在里面。"]}),"\n",(0,r.jsxs)(n.p,{children:["继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为",(0,r.jsx)(n.code,{children:"webpack.config.js"}),"的文件，我们在其中写入如下所示的简单配置代码，目前的配置主要涉及到的内容是入口文件路径和打包后文件的存放路径。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'module.exports = {\n  entry:  __dirname + "/app/main.js",//已多次提及的唯一入口文件\n  output: {\n    path: __dirname + "/public",//打包后的文件存放的地方\n    filename: "bundle.js"//打包后输出文件的文件名\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"注"}),"：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["有了这个配置之后，再打包文件，只需在终端里运行",(0,r.jsx)(n.code,{children:"webpack(非全局安装需使用node_modules/.bin/webpack)"}),"命令就可以了，这条命令会自动引用",(0,r.jsx)(n.code,{children:"webpack.config.js"}),"文件中的配置选项，示例如下："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://segmentfault.com/img/remote/1460000010637711",alt:"配合配置文件进行打包"})}),"\n",(0,r.jsxs)(n.p,{children:["又学会了一种使用",(0,r.jsx)(n.code,{children:"Webpack"}),"的方法，这种方法不用管那烦人的命令行参数，有没有感觉很爽。如果我们可以连",(0,r.jsx)(n.code,{children:"webpack(非全局安装需使用node_modules/.bin/webpack)"}),"这条命令都可以不用，那种感觉会不会更爽~，继续看下文。"]}),"\n",(0,r.jsxs)(n.h4,{id:"更快捷的执行打包任务",children:["更快捷的执行打包任务",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#更快捷的执行打包任务",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["在命令行中输入命令需要代码类似于",(0,r.jsx)(n.code,{children:"node_modules/.bin/webpack"}),"这样的路径其实是比较烦人的，不过值得庆幸的是",(0,r.jsx)(n.code,{children:"npm"}),"可以引导任务执行，对",(0,r.jsx)(n.code,{children:"npm"}),"进行配置后可以在命令行中使用简单的",(0,r.jsx)(n.code,{children:"npm start"}),"命令来替代上面略微繁琐的命令。在",(0,r.jsx)(n.code,{children:"package.json"}),"中对",(0,r.jsx)(n.code,{children:"scripts"}),"对象进行相关设置即可，设置方法如下。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "name": "webpack-sample-project",\n  "version": "1.0.0",\n  "description": "Sample webpack project",\n  "scripts": {\n    "start": "webpack" // 修改的是这里，JSON文件不支持注释，引用时请清除\n  },\n  "author": "zhang",\n  "license": "ISC",\n  "devDependencies": {\n    "webpack": "3.10.0"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"注："}),(0,r.jsx)(n.code,{children:"package.json"}),"中的",(0,r.jsx)(n.code,{children:"script"}),"会安装一定顺序寻找命令对应位置，本地的",(0,r.jsx)(n.code,{children:"node_modules/.bin"}),"路径就在这个寻找清单中，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["npm的",(0,r.jsx)(n.code,{children:"start"}),"命令是一个特殊的脚本名称，其特殊性表现在，在命令行中使用",(0,r.jsx)(n.code,{children:"npm start"}),"就可以执行其对于的命令，如果对应的此脚本名称不是",(0,r.jsx)(n.code,{children:"start"}),"，想要在命令行中运行时，需要这样用",(0,r.jsx)(n.code,{children:"npm run {script name}"}),"如",(0,r.jsx)(n.code,{children:"npm run build"}),"，我们在命令行中输入",(0,r.jsx)(n.code,{children:"npm start"}),"试试，输出结果如下："]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://segmentfault.com/img/remote/1460000010637712",alt:"使用npm start 打包代码"})}),"\n",(0,r.jsxs)(n.p,{children:["现在只需要使用",(0,r.jsx)(n.code,{children:"npm start"}),"就可以打包文件了，有没有觉得",(0,r.jsx)(n.code,{children:"webpack"}),"也不过如此嘛，不过不要太小瞧",(0,r.jsx)(n.code,{children:"webpack"}),"，要充分发挥其强大的功能我们需要修改配置文件的其它选项，一项项来看。"]}),"\n",(0,r.jsxs)(n.h3,{id:"webpack的强大功能",children:["Webpack的强大功能",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#webpack的强大功能",children:"#"})]}),"\n",(0,r.jsxs)(n.h4,{id:"生成source-maps使调试更容易",children:["生成Source Maps（使调试更容易）",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#生成source-maps使调试更容易",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["开发总是离不开调试，方便的调试能极大的提高开发效率，不过有时候通过打包后的文件，你是不容易找到出错了的地方，对应的你写的代码的位置的，",(0,r.jsx)(n.code,{children:"Source Maps"}),"就是来帮我们解决这个问题的。"]}),"\n",(0,r.jsxs)(n.p,{children:["通过简单的配置，",(0,r.jsx)(n.code,{children:"webpack"}),"就可以在打包时为我们生成的",(0,r.jsx)(n.code,{children:"source maps"}),"，这为我们提供了一种对应编译文件和源文件的方法，使得编译后的代码可读性更高，也更容易调试。"]}),"\n",(0,r.jsxs)(n.p,{children:["在",(0,r.jsx)(n.code,{children:"webpack"}),"的配置文件中配置",(0,r.jsx)(n.code,{children:"source maps"}),"，需要配置",(0,r.jsx)(n.code,{children:"devtool"}),"，它有以下四种不同的配置选项，各具优缺点，描述如下："]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{align:"left",children:"devtool选项"}),"\n",(0,r.jsx)(n.th,{align:"left",children:"配置结果"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{align:"left",children:(0,r.jsx)(n.code,{children:"source-map"})}),"\n",(0,r.jsxs)(n.td,{align:"left",children:["在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的",(0,r.jsx)(n.code,{children:"source map"}),"，但是它会减慢打包速度；"]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{align:"left",children:(0,r.jsx)(n.code,{children:"cheap-module-source-map"})}),"\n",(0,r.jsxs)(n.td,{align:"left",children:["在一个单独的文件中生成一个不带列映射的",(0,r.jsx)(n.code,{children:"map"}),"，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；"]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{align:"left",children:(0,r.jsx)(n.code,{children:"eval-source-map"})}),"\n",(0,r.jsxs)(n.td,{align:"left",children:["使用",(0,r.jsx)(n.code,{children:"eval"}),"打包源文件模块，在同一个文件中生成干净的完整的",(0,r.jsx)(n.code,{children:"source map"}),"。这个选项可以在不影响构建速度的前提下生成完整的",(0,r.jsx)(n.code,{children:"sourcemap"}),"，但是对打包后输出的JS文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项；"]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{align:"left",children:(0,r.jsx)(n.code,{children:"cheap-module-eval-source-map"})}),"\n",(0,r.jsxs)(n.td,{align:"left",children:["这是在打包文件时最快的生成",(0,r.jsx)(n.code,{children:"source map"}),"的方法，生成的",(0,r.jsx)(n.code,{children:"Source Map"})," 会和打包后的",(0,r.jsx)(n.code,{children:"JavaScript"}),"文件同行显示，没有列映射，和",(0,r.jsx)(n.code,{children:"eval-source-map"}),"选项具有相似的缺点；"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"正如上表所述，上述选项由上到下打包速度越来越快，不过同时也具有越来越多的负面作用，较快的打包速度的后果就是对打包后的文件的的执行有一定影响。"}),"\n",(0,r.jsxs)(n.p,{children:["对小到中型的项目中，",(0,r.jsx)(n.code,{children:"eval-source-map"}),"是一个很好的选项，再次强调你只应该开发阶段使用它，我们继续对上文新建的",(0,r.jsx)(n.code,{children:"webpack.config.js"}),"，进行如下配置:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'module.exports = {\n  devtool: \'eval-source-map\',\n  entry:  __dirname + "/app/main.js",\n  output: {\n    path: __dirname + "/public",\n    filename: "bundle.js"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"cheap-module-eval-source-map"}),"方法构建速度更快，但是不利于调试，推荐在大型项目考虑时间成本时使用。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"使用webpack构建本地服务器",children:["使用webpack构建本地服务器",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用webpack构建本地服务器",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["想不想让你的浏览器监听你的代码的修改，并自动刷新显示修改后的结果，其实",(0,r.jsx)(n.code,{children:"Webpack"}),"提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install --save-dev webpack-dev-server\n"})}),"\n",(0,r.jsxs)(n.p,{children:["devserver作为webpack配置选项中的一项，以下是它的一些配置选项，更多配置可参考",(0,r.jsx)(n.a,{href:"https://webpack.js.org/configuration/dev-server/",target:"_blank",rel:"noopener noreferrer",children:"这里"})]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{align:"left",children:"devserver的配置选项"}),"\n",(0,r.jsx)(n.th,{align:"left",children:"功能描述"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{align:"left",children:"contentBase"}),"\n",(0,r.jsx)(n.td,{align:"left",children:'默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public"目录）'}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{align:"left",children:"port"}),"\n",(0,r.jsx)(n.td,{align:"left",children:"设置默认监听端口，如果省略，默认为”8080“"}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{align:"left",children:"inline"}),"\n",(0,r.jsxs)(n.td,{align:"left",children:["设置为",(0,r.jsx)(n.code,{children:"true"}),"，当源文件改变时会自动刷新页面"]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{align:"left",children:"historyApiFallback"}),"\n",(0,r.jsxs)(n.td,{align:"left",children:["在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为",(0,r.jsx)(n.code,{children:"true"}),"，所有的跳转将指向index.html"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["把这些命令加到webpack的配置文件中，现在的配置文件",(0,r.jsx)(n.code,{children:"webpack.config.js"}),"如下所示"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'module.exports = {\n  devtool: \'eval-source-map\',\n\n  entry:  __dirname + "/app/main.js",\n  output: {\n    path: __dirname + "/public",\n    filename: "bundle.js"\n  },\n\n  devServer: {\n    contentBase: "./public",//本地服务器所加载的页面所在的目录\n    historyApiFallback: true,//不跳转\n    inline: true//实时刷新\n  } \n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["在",(0,r.jsx)(n.code,{children:"package.json"}),"中的",(0,r.jsx)(n.code,{children:"scripts"}),"对象中添加如下命令，用以开启本地服务器："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1",\n    "start": "webpack",\n    "server": "webpack-dev-server --open"\n  },\n'})}),"\n",(0,r.jsxs)(n.p,{children:["在终端中输入",(0,r.jsx)(n.code,{children:"npm run server"}),"即可在本地的",(0,r.jsx)(n.code,{children:"8080"}),"端口查看结果"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://segmentfault.com/img/remote/1460000010637713",alt:"开启本地服务器"})}),"\n",(0,r.jsxs)(n.h4,{id:"loaders",children:["Loaders",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#loaders",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"鼎鼎大名的Loaders登场了！"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Loaders"}),"是",(0,r.jsx)(n.code,{children:"webpack"}),"提供的最激动人心的功能之一了。通过使用不同的",(0,r.jsx)(n.code,{children:"loader"}),"，",(0,r.jsx)(n.code,{children:"webpack"}),"有能力调用外部的脚本或工具，实现对不同格式的文件的处理，比如说分析转换scss为css，或者把下一代的JS文件（ES6，ES7)转换为现代浏览器兼容的JS文件，对React的开发而言，合适的Loaders可以把React的中用到的JSX文件转换为JS文件。"]}),"\n",(0,r.jsxs)(n.p,{children:["Loaders需要单独安装并且需要在",(0,r.jsx)(n.code,{children:"webpack.config.js"}),"中的",(0,r.jsx)(n.code,{children:"modules"}),"关键字下进行配置，Loaders的配置包括以下几方面："]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"test"}),"：一个用以匹配loaders所处理文件的拓展名的正则表达式（必须）"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"loader"}),"：loader的名称（必须）"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"include/exclude"}),":手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"query"}),"：为loaders提供额外的设置选项（可选）"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["不过在配置loader之前，我们把",(0,r.jsx)(n.code,{children:"Greeter.js"}),"里的问候消息放在一个单独的JSON文件里,并通过合适的配置使",(0,r.jsx)(n.code,{children:"Greeter.js"}),"可以读取该JSON文件的值，各文件修改后的代码如下："]}),"\n",(0,r.jsxs)(n.p,{children:["在app文件夹中创建带有问候信息的JSON文件(命名为",(0,r.jsx)(n.code,{children:"config.json"}),")"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{\n  "greetText": "Hi there and greetings from JSON!"\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"更新后的Greeter.js"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"var config = require('./config.json');\n\nmodule.exports = function() {\n  var greet = document.createElement('div');\n  greet.textContent = config.greetText;\n  return greet;\n};\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"注"})," 由于",(0,r.jsx)(n.code,{children:"webpack3.*/webpack2.*"}),"已经内置可处理JSON文件，这里我们无需再添加",(0,r.jsx)(n.code,{children:"webpack1.*"}),"需要的",(0,r.jsx)(n.code,{children:"json-loader"}),"。在看如何具体使用loader之前我们先看看Babel是什么？"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"babel",children:["Babel",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#babel",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Babel其实是一个编译JavaScript的平台，它可以编译代码帮你达到以下目的："}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"让你能使用最新的JavaScript代码（ES6，ES7...），而不用管新标准是否被当前使用的浏览器完全支持；"}),"\n",(0,r.jsx)(n.li,{children:"让你能使用基于JavaScript进行了拓展的语言，比如React的JSX；"}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"babel的安装与配置",children:["Babel的安装与配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#babel的安装与配置",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Babel其实是几个模块化的包，其核心功能位于称为",(0,r.jsx)(n.code,{children:"babel-core"}),"的npm包中，webpack可以把其不同的包整合在一起使用，对于每一个你需要的功能或拓展，你都需要安装单独的包（用得最多的是解析Es6的",(0,r.jsx)(n.code,{children:"babel-env-preset"}),"包和解析JSX的",(0,r.jsx)(n.code,{children:"babel-preset-react"}),"包）。"]}),"\n",(0,r.jsx)(n.p,{children:"我们先来一次性安装这些依赖包"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"// npm一次性安装多个依赖模块，模块之间用空格隔开\nnpm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react\n"})}),"\n",(0,r.jsxs)(n.p,{children:["在",(0,r.jsx)(n.code,{children:"webpack"}),"中配置Babel的方法如下:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'module.exports = {\n  entry: __dirname + "/app/main.js",//已多次提及的唯一入口文件\n  output: {\n    path: __dirname + "/public",//打包后的文件存放的地方\n    filename: "bundle.js"//打包后输出文件的文件名\n  },\n  devtool: \'eval-source-map\',\n  devServer: {\n    contentBase: "./public",//本地服务器所加载的页面所在的目录\n    historyApiFallback: true,//不跳转\n    inline: true//实时刷新\n  },\n  module: {\n    rules: [\n      {\n        test: /(\\.jsx|\\.js)$/,\n        use: {\n          loader: "babel-loader",\n          options: {\n            presets: [\n              "env", "react"\n            ]\n          }\n        },\n        exclude: /node_modules/\n      }\n    ]\n  }\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"现在你的webpack的配置已经允许你使用ES6以及JSX的语法了。继续用上面的例子进行测试，不过这次我们会使用React，记得先安装 React 和 React-DOM"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install --save react react-dom\n"})}),"\n",(0,r.jsxs)(n.p,{children:["接下来我们使用ES6的语法，更新",(0,r.jsx)(n.code,{children:"Greeter.js"}),"并返回一个React组件"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"//Greeter,js\nimport React, {Component} from 'react'\nimport config from './config.json';\n\nclass Greeter extends Component{\n  render() {\n    return (\n      <div>\n        {config.greetText}\n      </div>\n    );\n  }\n}\n\nexport default Greeter\n"})}),"\n",(0,r.jsxs)(n.p,{children:["修改",(0,r.jsx)(n.code,{children:"main.js"}),"如下，使用ES6的模块定义和渲染Greeter模块"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"// main.js\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nrender(<Greeter />, document.getElementById('root'));\n"})}),"\n",(0,r.jsxs)(n.p,{children:["重新使用",(0,r.jsx)(n.code,{children:"npm start"}),"打包，如果之前打开的本地服务器没有关闭，你应该可以在",(0,r.jsx)(n.code,{children:"localhost:8080"}),"下看到与之前一样的内容，这说明",(0,r.jsx)(n.code,{children:"react"}),"和",(0,r.jsx)(n.code,{children:"es6"}),"被正常打包了。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://segmentfault.com/img/remote/1460000010637714",alt:"localhost:8080"})}),"\n",(0,r.jsxs)(n.h4,{id:"babel的配置",children:["Babel的配置",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#babel的配置",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Babel其实可以完全在 ",(0,r.jsx)(n.code,{children:"webpack.config.js"})," 中进行配置，但是考虑到babel具有非常多的配置选项，在单一的",(0,r.jsx)(n.code,{children:"webpack.config.js"}),'文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 ".babelrc" 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用',(0,r.jsx)(n.code,{children:".babelrc"}),"里的babel配置选项），如下："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'module.exports = {\n    entry: __dirname + "/app/main.js",//已多次提及的唯一入口文件\n    output: {\n        path: __dirname + "/public",//打包后的文件存放的地方\n        filename: "bundle.js"//打包后输出文件的文件名\n    },\n    devtool: \'eval-source-map\',\n    devServer: {\n        contentBase: "./public",//本地服务器所加载的页面所在的目录\n        historyApiFallback: true,//不跳转\n        inline: true//实时刷新\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: "babel-loader"\n                },\n                exclude: /node_modules/\n            }\n        ]\n    }\n};\n//.babelrc\n{\n  "presets": ["react", "env"]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"到目前为止，我们已经知道了，对于模块，Webpack能提供非常强大的处理功能，那那些是模块呢。"}),"\n",(0,r.jsxs)(n.h3,{id:"一切皆模块",children:["一切皆模块",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#一切皆模块",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Webpack有一个不可不说的优点，它把所有的文件都都当做模块处理，JavaScript代码，CSS和fonts以及图片等等通过合适的loader都可以被处理。"}),"\n",(0,r.jsxs)(n.h4,{id:"css",children:["CSS",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["webpack提供两个工具处理样式表，",(0,r.jsx)(n.code,{children:"css-loader"})," 和 ",(0,r.jsx)(n.code,{children:"style-loader"}),"，二者处理的任务不同，",(0,r.jsx)(n.code,{children:"css-loader"}),"使你能够使用类似",(0,r.jsx)(n.code,{children:"@import"})," 和 ",(0,r.jsx)(n.code,{children:"url(...)"}),"的方法实现 ",(0,r.jsx)(n.code,{children:"require()"}),"的功能,",(0,r.jsx)(n.code,{children:"style-loader"}),"将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。"]}),"\n",(0,r.jsx)(n.p,{children:"继续上面的例子"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'//安装\nnpm install --save-dev style-loader css-loader\n//使用\nmodule.exports = {\n\n   ...\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: "babel-loader"\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: "style-loader"\n                    }, {\n                        loader: "css-loader"\n                    }\n                ]\n            }\n        ]\n    }\n};\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"请注意这里对同一个文件引入多个loader的方法。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:'接下来，在app文件夹里创建一个名字为"main.css"的文件，对一些元素设置样式'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/* main.css */\nhtml {\n  box-sizing: border-box;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\n\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n\nbody {\n  margin: 0;\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\nh1, h2, h3, h4, h5, h6, p, ul {\n  margin: 0;\n  padding: 0;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["我们这里例子中用到的",(0,r.jsx)(n.code,{children:"webpack"}),"只有单一的入口，其它的模块需要通过 ",(0,r.jsx)(n.code,{children:"import"}),", ",(0,r.jsx)(n.code,{children:"require"}),", ",(0,r.jsx)(n.code,{children:"url"}),"等与入口文件建立其关联，为了让webpack能找到”main.css“文件，我们把它导入”main.js “中，如下"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"//main.js\nimport React from 'react';\nimport {render} from 'react-dom';\nimport Greeter from './Greeter';\n\nimport './main.css';//使用require导入css文件\n\nrender(<Greeter />, document.getElementById('root'));\n"})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"通常情况下，css会和js打包到同一个文件中，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件的。"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"上面的代码说明webpack是怎么把css当做模块看待的，咱们继续看一个更加真实的css模块实践。"}),"\n",(0,r.jsxs)(n.h4,{id:"css-module",children:["CSS module",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css-module",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"在过去的一些年里，JavaScript通过一些新的语言特性，更好的工具以及更好的实践方法（比如说模块化）发展得非常迅速。模块使得开发者把复杂的代码转化为小的，干净的，依赖声明明确的单元，配合优化工具，依赖管理和加载管理可以自动完成。"}),"\n",(0,r.jsx)(n.p,{children:"不过前端的另外一部分，CSS发展就相对慢一些，大多的样式表却依旧巨大且充满了全局类名，维护和修改都非常困难。"}),"\n",(0,r.jsxs)(n.p,{children:["被称为",(0,r.jsx)(n.code,{children:"CSS modules"}),"的技术意在把JS的模块化思想带入CSS中来，通过CSS模块，所有的类名，动画名默认都只作用于当前模块。Webpack对CSS模块化提供了非常好的支持，只需要在CSS loader中进行简单配置即可，然后就可以直接把CSS的类名传递到组件的代码中，这样做有效避免了全局污染。具体的代码如下"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'module.exports = {\n\n    ...\n\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: "babel-loader"\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: "style-loader"\n                    }, {\n                        loader: "css-loader",\n                        options: {\n                            modules: true, // 指定启用css modules\n                            localIdentName: \'[name]__[local]--[hash:base64:5]\' // 指定css的类名格式\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["我们在app文件夹下创建一个",(0,r.jsx)(n.code,{children:"Greeter.css"}),"文件来进行一下测试"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/* Greeter.css */\n.root {\n  background-color: #eee;\n  padding: 10px;\n  border: 3px solid #ccc;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["导入",(0,r.jsx)(n.code,{children:".root"}),"到Greeter.js中"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"import React, {Component} from 'react';\nimport config from './config.json';\nimport styles from './Greeter.css';//导入\n\nclass Greeter extends Component{\n  render() {\n    return (\n      <div className={styles.root}> //使用cssModule添加类名的方法\n        {config.greetText}\n      </div>\n    );\n  }\n}\n\nexport default Greeter\n"})}),"\n",(0,r.jsx)(n.p,{children:"放心使用把，相同的类名也不会造成不同组件之间的污染。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://segmentfault.com/img/remote/1460000012371349?w=790&h=150",alt:"应用了css module后的样式"})}),"\n",(0,r.jsxs)(n.p,{children:["CSS modules 也是一个很大的主题，有兴趣的话可以去其",(0,r.jsx)(n.a,{href:"https://github.com/css-modules/css-modules",target:"_blank",rel:"noopener noreferrer",children:"官方文档"}),"了解更多。"]}),"\n",(0,r.jsxs)(n.h4,{id:"css预处理器",children:["CSS预处理器",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#css预处理器",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Sass"})," 和 ",(0,r.jsx)(n.code,{children:"Less"})," 之类的预处理器是对原生CSS的拓展，它们允许你使用类似于",(0,r.jsx)(n.code,{children:"variables"}),", ",(0,r.jsx)(n.code,{children:"nesting"}),", ",(0,r.jsx)(n.code,{children:"mixins"}),", ",(0,r.jsx)(n.code,{children:"inheritance"}),"等不存在于CSS中的特性来写CSS，CSS预处理器可以这些特殊类型的语句转化为浏览器可识别的CSS语句，"]}),"\n",(0,r.jsxs)(n.p,{children:["你现在可能都已经熟悉了，在webpack里使用相关loaders进行配置就可以使用了，以下是常用的CSS 处理",(0,r.jsx)(n.code,{children:"loaders"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Less Loader"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Sass Loader"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"Stylus Loader"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["不过其实也存在一个CSS的处理平台",(0,r.jsx)(n.code,{children:"-PostCSS"}),"，它可以帮助你的CSS实现更多的功能，在其",(0,r.jsx)(n.a,{href:"https://github.com/postcss/postcss",target:"_blank",rel:"noopener noreferrer",children:"官方文档"}),"可了解更多相关知识。"]}),"\n",(0,r.jsx)(n.p,{children:"举例来说如何使用PostCSS，我们使用PostCSS来为CSS代码自动添加适应不同浏览器的CSS前缀。"}),"\n",(0,r.jsxs)(n.p,{children:["首先安装",(0,r.jsx)(n.code,{children:"postcss-loader"})," 和 ",(0,r.jsx)(n.code,{children:"autoprefixer"}),"（自动添加前缀的插件）"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install --save-dev postcss-loader autoprefixer\n"})}),"\n",(0,r.jsxs)(n.p,{children:["接下来，在webpack配置文件中添加",(0,r.jsx)(n.code,{children:"postcss-loader"}),"，在根目录新建",(0,r.jsx)(n.code,{children:"postcss.config.js"}),",并添加如下代码之后，重新使用",(0,r.jsx)(n.code,{children:"npm start"}),"打包时，你写的css会自动根据Can i use里的数据添加不同前缀了。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'//webpack.config.js\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /(\\.jsx|\\.js)$/,\n        use: {\n          loader: "babel-loader"\n        },\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: "style-loader"\n          }, {\n            loader: "css-loader",\n            options: {\n              modules: true\n            }\n          }, {\n            loader: "postcss-loader"\n          }\n        ]\n      }\n    ]\n  }\n}\n// postcss.config.js\nmodule.exports = {\n  plugins: [\n    require(\'autoprefixer\')\n  ]\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["至此，本文已经谈论了处理JS的Babel和处理CSS的PostCSS的基本用法，它们其实也是两个单独的平台，配合",(0,r.jsx)(n.code,{children:"webpack"}),"可以很好的发挥它们的作用。接下来介绍Webpack中另一个非常重要的功能-",(0,r.jsx)(n.code,{children:"Plugins"})]}),"\n",(0,r.jsxs)(n.h3,{id:"插件plugins",children:["插件（Plugins）",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#插件plugins",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务。\nLoaders和Plugins常常被弄混，但是他们其实是完全不同的东西，可以这么来说，loaders是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。"}),"\n",(0,r.jsx)(n.p,{children:"Webpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。"}),"\n",(0,r.jsxs)(n.h4,{id:"使用插件的方法",children:["使用插件的方法",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用插件的方法",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["要使用某个插件，我们需要通过",(0,r.jsx)(n.code,{children:"npm"}),"安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续上面的例子，我们添加了一个给打包后代码",(0,r.jsx)(n.a,{href:"https://webpack.js.org/plugins/banner-plugin/",target:"_blank",rel:"noopener noreferrer",children:"添加版权声明的插件"}),"。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const webpack = require(\'webpack\');\n\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /(\\.jsx|\\.js)$/,\n        use: {\n          loader: "babel-loader"\n        },\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: "style-loader"\n          }, {\n            loader: "css-loader",\n            options: {\n              modules: true\n            }\n          }, {\n            loader: "postcss-loader"\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new webpack.BannerPlugin(\'版权所有，翻版必究\')\n  ],\n};\n'})}),"\n",(0,r.jsx)(n.p,{children:"通过这个插件，打包后的JS文件显示如下"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://segmentfault.com/img/remote/1460000010637716",alt:"版权所有，翻版必究"})}),"\n",(0,r.jsx)(n.p,{children:"这就是webpack插件的基础用法了，下面给大家推荐几个常用的插件"}),"\n",(0,r.jsxs)(n.h4,{id:"htmlwebpackplugin",children:["HtmlWebpackPlugin",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#htmlwebpackplugin",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["这个插件的作用是依据一个简单的",(0,r.jsx)(n.code,{children:"index.html"}),"模板，生成一个自动引用你打包后的JS文件的新",(0,r.jsx)(n.code,{children:"index.html"}),"。这在每次生成的js文件名称不同时非常有用（比如添加了",(0,r.jsx)(n.code,{children:"hash"}),"值）。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"安装"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install --save-dev html-webpack-plugin\n"})}),"\n",(0,r.jsx)(n.p,{children:"这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些更改："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["移除public文件夹，利用此插件，",(0,r.jsx)(n.code,{children:"index.html"}),"文件会自动生成，此外CSS已经通过前面的操作打包到JS中了。"]}),"\n",(0,r.jsxs)(n.li,{children:["在app目录下，创建一个",(0,r.jsx)(n.code,{children:"index.tmpl.html"}),"文件模板，这个模板包含",(0,r.jsx)(n.code,{children:"title"}),"等必须元素，在编译过程中，插件会依据此模板生成最终的html页面，会自动添加所依赖的 css, js，favicon等文件，",(0,r.jsx)(n.code,{children:"index.tmpl.html"}),"中的模板源代码如下："]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="utf-8">\n    <title>Webpack Sample Project</title>\n  </head>\n  <body>\n    <div id=\'root\'>\n    </div>\n  </body>\n</html>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["3.更新",(0,r.jsx)(n.code,{children:"webpack"}),"的配置文件，方法同上,新建一个",(0,r.jsx)(n.code,{children:"build"}),"文件夹用来存放最终的输出文件"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const webpack = require(\'webpack\');\nconst HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n\nmodule.exports = {\n  entry: __dirname + "/app/main.js",//已多次提及的唯一入口文件\n  output: {\n    path: __dirname + "/build",\n    filename: "bundle.js"\n  },\n  devtool: \'eval-source-map\',\n  devServer: {\n    contentBase: "./public",//本地服务器所加载的页面所在的目录\n    historyApiFallback: true,//不跳转\n    inline: true//实时刷新\n  },\n  module: {\n    rules: [\n      {\n        test: /(\\.jsx|\\.js)$/,\n        use: {\n          loader: "babel-loader"\n        },\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: "style-loader"\n          }, {\n            loader: "css-loader",\n            options: {\n              modules: true\n            }\n          }, {\n            loader: "postcss-loader"\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new webpack.BannerPlugin(\'版权所有，翻版必究\'),\n    new HtmlWebpackPlugin({\n      template: __dirname + "/app/index.tmpl.html"//new 一个这个插件的实例，并传入相关的参数\n    })\n  ],\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["再次执行",(0,r.jsx)(n.code,{children:"npm start"}),"你会发现，build文件夹下面生成了",(0,r.jsx)(n.code,{children:"bundle.js"}),"和",(0,r.jsx)(n.code,{children:"index.html"}),"。"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://segmentfault.com/img/remote/1460000010637717",alt:"build文件夹"})}),"\n",(0,r.jsxs)(n.h4,{id:"hot-module-replacement",children:["Hot Module Replacement",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#hot-module-replacement",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Hot Module Replacement"}),"（HMR）也是webpack里很有用的一个插件，它允许你在修改组件代码后，自动刷新实时预览修改后的效果。"]}),"\n",(0,r.jsx)(n.p,{children:"在webpack中实现HMR也很简单，只需要做两项配置"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"在webpack配置文件中添加HMR插件；"}),"\n",(0,r.jsx)(n.li,{children:"在Webpack Dev Server中添加“hot”参数；"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"不过配置完这些后，JS模块其实还是不能自动热加载的，还需要在你的JS模块中执行一个Webpack提供的API才能实现热加载，虽然这个API不难使用，但是如果是React模块，使用我们已经熟悉的Babel可以更方便的实现功能热加载。"}),"\n",(0,r.jsx)(n.p,{children:"整理下我们的思路，具体实现方法如下"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Babel"}),"和",(0,r.jsx)(n.code,{children:"webpack"}),"是独立的工具"]}),"\n",(0,r.jsx)(n.li,{children:"二者可以一起工作"}),"\n",(0,r.jsx)(n.li,{children:"二者都可以通过插件拓展功能"}),"\n",(0,r.jsx)(n.li,{children:"HMR是一个webpack插件，它让你能浏览器中实时观察模块修改后的效果，但是如果你想让它工作，需要对模块进行额外的配额；"}),"\n",(0,r.jsxs)(n.li,{children:["Babel有一个叫做",(0,r.jsx)(n.code,{children:"react-transform-hrm"}),"的插件，可以在不对React模块进行额外的配置的前提下让HMR正常工作；"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"还是继续上例来实际看看如何配置"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'const webpack = require(\'webpack\');\nconst HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n\nmodule.exports = {\n  entry: __dirname + "/app/main.js",//已多次提及的唯一入口文件\n  output: {\n    path: __dirname + "/build",\n    filename: "bundle.js"\n  },\n  devtool: \'eval-source-map\',\n  devServer: {\n    contentBase: "./public",//本地服务器所加载的页面所在的目录\n    historyApiFallback: true,//不跳转\n    inline: true,\n    hot: true\n  },\n  module: {\n    rules: [\n      {\n        test: /(\\.jsx|\\.js)$/,\n        use: {\n          loader: "babel-loader"\n        },\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: "style-loader"\n          }, {\n            loader: "css-loader",\n            options: {\n              modules: true\n            }\n          }, {\n            loader: "postcss-loader"\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new webpack.BannerPlugin(\'版权所有，翻版必究\'),\n    new HtmlWebpackPlugin({\n      template: __dirname + "/app/index.tmpl.html"//new 一个这个插件的实例，并传入相关的参数\n    }),\n    new webpack.HotModuleReplacementPlugin()//热加载插件\n  ],\n};\n\n'})}),"\n",(0,r.jsxs)(n.p,{children:["安装",(0,r.jsx)(n.code,{children:"react-transform-hmr"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install --save-dev babel-plugin-react-transform react-transform-hmr\n"})}),"\n",(0,r.jsx)(n.p,{children:"配置Babel"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// .babelrc\n{\n  "presets": ["react", "env"],\n  "env": {\n    "development": {\n    "plugins": [["react-transform", {\n       "transforms": [{\n         "transform": "react-transform-hmr",\n         \n         "imports": ["react"],\n         \n         "locals": ["module"]\n       }]\n     }]]\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"现在当你使用React时，可以热加载模块了,每次保存就能在浏览器上看到更新内容。"}),"\n",(0,r.jsxs)(n.h3,{id:"产品阶段的构建",children:["产品阶段的构建",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#产品阶段的构建",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说优化，压缩，缓存以及分离CSS和JS。"}),"\n",(0,r.jsxs)(n.p,{children:["对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小的文件可以使得事情井井有条，以上面的例子来说，我们创建一个",(0,r.jsx)(n.code,{children:"webpack.production.config.js"}),"的文件，在里面加上基本的配置,它和原始的webpack.config.js很像，如下"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// webpack.production.config.js\nconst webpack = require(\'webpack\');\nconst HtmlWebpackPlugin = require(\'html-webpack-plugin\');\n\nmodule.exports = {\n    entry: __dirname + "/app/main.js", //已多次提及的唯一入口文件\n    output: {\n        path: __dirname + "/build",\n        filename: "bundle.js"\n    },\n    devtool: \'null\', //注意修改了这里，这能大大压缩我们的打包代码\n    devServer: {\n        contentBase: "./public", //本地服务器所加载的页面所在的目录\n        historyApiFallback: true, //不跳转\n        inline: true,\n        hot: true\n    },\n    module: {\n        rules: [{\n            test: /(\\.jsx|\\.js)$/,\n            use: {\n                loader: "babel-loader"\n            },\n            exclude: /node_modules/\n        }, {\n            test: /\\.css$/,\n            use: ExtractTextPlugin.extract({\n                fallback: "style-loader",\n                use: [{\n                    loader: "css-loader",\n                    options: {\n                        modules: true\n                    }\n                }, {\n                    loader: "postcss-loader"\n                }],\n            })\n        }]\n    },\n    plugins: [\n        new webpack.BannerPlugin(\'版权所有，翻版必究\'),\n        new HtmlWebpackPlugin({\n            template: __dirname + "/app/index.tmpl.html" //new 一个这个插件的实例，并传入相关的参数\n        }),\n        new webpack.HotModuleReplacementPlugin() //热加载插件\n    ],\n};\n//package.json\n{\n  "name": "test",\n  "version": "1.0.0",\n  "description": "",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1",\n    "start": "webpack",\n    "server": "webpack-dev-server --open",\n    "build": "NODE_ENV=production webpack --config ./webpack.production.config.js --progress"\n  },\n  "author": "",\n  "license": "ISC",\n  "devDependencies": {\n...\n  },\n  "dependencies": {\n    "react": "^15.6.1",\n    "react-dom": "^15.6.1"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["**注意:**如果是window电脑，",(0,r.jsx)(n.code,{children:"build"}),"需要配置为",(0,r.jsx)(n.code,{children:'"build": "set NODE_ENV=production && webpack --config ./webpack.production.config.js --progress"'}),".谢谢评论区简友提醒。"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"优化插件",children:["优化插件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#优化插件",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"webpack提供了一些在发布阶段非常有用的优化插件，它们大多来自于webpack社区，可以通过npm安装，通过以下插件可以完成产品发布阶段所需的功能"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"OccurenceOrderPlugin"})," :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"UglifyJsPlugin"}),"：压缩JS代码；"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ExtractTextPlugin"}),"：分离CSS和JS文件"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"我们继续用例子来看看如何添加它们，OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装其它非内置插件"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"npm install --save-dev extract-text-webpack-plugin\n"})}),"\n",(0,r.jsx)(n.p,{children:"在配置文件的plugins后引用它们"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'// webpack.production.config.js\nconst webpack = require(\'webpack\');\nconst HtmlWebpackPlugin = require(\'html-webpack-plugin\');\nconst ExtractTextPlugin = require(\'extract-text-webpack-plugin\');\n\nmodule.exports = {\n    entry: __dirname + "/app/main.js",//已多次提及的唯一入口文件\n    output: {\n        path: __dirname + "/build",\n        filename: "bundle.js"\n    },\n    devtool: \'none\',\n    devServer: {\n        contentBase: "./public",//本地服务器所加载的页面所在的目录\n        historyApiFallback: true,//不跳转\n        inline: true,\n        hot: true\n    },\n    module: {\n        rules: [\n            {\n                test: /(\\.jsx|\\.js)$/,\n                use: {\n                    loader: "babel-loader"\n                },\n                exclude: /node_modules/\n            },\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: "style-loader"\n                    }, {\n                        loader: "css-loader",\n                        options: {\n                            modules: true\n                        }\n                    }, {\n                        loader: "postcss-loader"\n                    }\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new webpack.BannerPlugin(\'版权所有，翻版必究\'),\n        new HtmlWebpackPlugin({\n            template: __dirname + "/app/index.tmpl.html"\n        }),\n        new webpack.optimize.OccurrenceOrderPlugin(),\n        new webpack.optimize.UglifyJsPlugin(),\n        new ExtractTextPlugin("style.css")\n    ],\n};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["此时执行",(0,r.jsx)(n.code,{children:"npm run build"}),"可以看见代码是被压缩后的"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://segmentfault.com/img/remote/1460000010637718",alt:"压缩后的代码"})}),"\n",(0,r.jsxs)(n.h4,{id:"缓存",children:["缓存",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#缓存",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"缓存无处不在，使用缓存的最好方法是保证你的文件名和文件内容是匹配的（内容改变，名称相应改变）"}),"\n",(0,r.jsx)(n.p,{children:"webpack可以把一个哈希值添加到打包的文件名中，使用方法如下,添加特殊的字符串混合体（[name], [id] and [hash]）到输出文件名前"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"const webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n..\n    output: {\n        path: __dirname + \"/build\",\n        filename: \"bundle-[hash].js\"\n    },\n   ...\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"现在用户会有合理的缓存了。"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://segmentfault.com/img/remote/1460000010637719",alt:"带hash值的js名"})}),"\n",(0,r.jsxs)(n.h4,{id:"去除build文件中的残余文件",children:["去除",(0,r.jsx)(n.code,{children:"build"}),"文件中的残余文件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#去除build文件中的残余文件",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["添加了",(0,r.jsx)(n.code,{children:"hash"}),"之后，会导致改变文件内容后重新打包时，文件名不同而内容越来越多，因此这里介绍另外一个很好用的插件",(0,r.jsx)(n.code,{children:"clean-webpack-plugin"}),"。"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"安装"}),"：\n",(0,r.jsx)(n.code,{children:"cnpm install clean-webpack-plugin --save-dev"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"使用"}),"："]}),"\n",(0,r.jsxs)(n.p,{children:["引入",(0,r.jsx)(n.code,{children:"clean-webpack-plugin"}),"插件后在配置文件的",(0,r.jsx)(n.code,{children:"plugins"}),"中做相应配置即可："]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"const CleanWebpackPlugin = require(\"clean-webpack-plugin\");\n  plugins: [\n    ...// 这里是之前配置的其它各种插件\n    new CleanWebpackPlugin('build/*.*', {\n      root: __dirname,\n      verbose: true,\n      dry: false\n  })\n  ]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["关于",(0,r.jsx)(n.code,{children:"clean-webpack-plugin"}),"的详细使用可参考",(0,r.jsx)(n.a,{href:"https://github.com/johnagan/clean-webpack-plugin",target:"_blank",rel:"noopener noreferrer",children:"这里"})]}),"\n",(0,r.jsxs)(n.h3,{id:"总结",children:["总结",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["其实这是一年前的文章了，趁周末重新运行和修改了一下，现在所有的代码都可以正常运行，所用webpack基于最新的",(0,r.jsx)(n.code,{children:"webpack3.5.3"}),"。希望依旧能对你有帮助。"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"这是一篇好长的文章，谢谢你的耐心，能仔细看到了这里，大概半个月前我第一次自己一步步配置项目所需的Webpack后就一直想写一篇笔记做总结，几次动笔都不能让自己满意，总觉得写不清楚。其实关于Webpack本文讲述得仍不完全，不过相信你看完后已经进入Webpack的大门，能够更好的探索其它的关于Webpack的知识了。"}),"\n",(0,r.jsx)(n.p,{children:"欢迎大家在文后发表自己的观点讨论。"}),"\n",(0,r.jsxs)(n.h2,{id:"更新说明",children:["更新说明",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#更新说明",children:"#"})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"2017-12-11更新，修改"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"css module\n"})}),"\n",(0,r.jsx)(n.p,{children:"部分代码及示例图片，"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"css module\n"})}),"\n",(0,r.jsx)(n.p,{children:"真的非常好用，希望大家都能用上。"}),"\n"]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}let i=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["webpack%2Fstalled-webpack4%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D.md"]={toc:[{text:"写在前面的话",id:"写在前面的话",depth:3},{text:"什么是WebPack，为什么要使用它？",id:"什么是webpack为什么要使用它",depth:3},{text:"为什要使用WebPack",id:"为什要使用webpack",depth:4},{text:"什么是Webpack",id:"什么是webpack",depth:4},{text:"WebPack和Grunt以及Gulp相比有什么特性",id:"webpack和grunt以及gulp相比有什么特性",depth:4},{text:"开始使用Webpack",id:"开始使用webpack",depth:3},{text:"安装",id:"安装",depth:4},{text:"正式使用Webpack前的准备",id:"正式使用webpack前的准备",depth:4},{text:"正式使用Webpack",id:"正式使用webpack",depth:4},{text:"通过配置文件来使用`Webpack`",id:"通过配置文件来使用webpack",depth:4},{text:"更快捷的执行打包任务",id:"更快捷的执行打包任务",depth:4},{text:"Webpack的强大功能",id:"webpack的强大功能",depth:3},{text:"生成Source Maps（使调试更容易）",id:"生成source-maps使调试更容易",depth:4},{text:"使用webpack构建本地服务器",id:"使用webpack构建本地服务器",depth:4},{text:"Loaders",id:"loaders",depth:4},{text:"Babel",id:"babel",depth:3},{text:"Babel的安装与配置",id:"babel的安装与配置",depth:4},{text:"Babel的配置",id:"babel的配置",depth:4},{text:"一切皆模块",id:"一切皆模块",depth:3},{text:"CSS",id:"css",depth:4},{text:"CSS module",id:"css-module",depth:4},{text:"CSS预处理器",id:"css预处理器",depth:4},{text:"插件（Plugins）",id:"插件plugins",depth:3},{text:"使用插件的方法",id:"使用插件的方法",depth:4},{text:"HtmlWebpackPlugin",id:"htmlwebpackplugin",depth:4},{text:"Hot Module Replacement",id:"hot-module-replacement",depth:4},{text:"产品阶段的构建",id:"产品阶段的构建",depth:3},{text:"优化插件",id:"优化插件",depth:4},{text:"缓存",id:"缓存",depth:4},{text:"去除`build`文件中的残余文件",id:"去除build文件中的残余文件",depth:4},{text:"总结",id:"总结",depth:3},{text:"更新说明",id:"更新说明",depth:2}],title:"入门 Webpack",frontmatter:{}}}}]);