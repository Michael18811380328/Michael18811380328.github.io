"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["878"],{6344:function(e,n,r){r.r(n),r.d(n,{default:function(){return c}});var s=r(6469),a=r(8809);function l(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",ol:"ol",li:"li",pre:"pre",code:"code",h3:"h3"},(0,a.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"babel-preset-env使用指南",children:["babel-preset-env使用指南",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#babel-preset-env使用指南",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"统计信息：字数 6188  阅读13分钟"}),"\n",(0,s.jsxs)(n.h2,{id:"文章概览",children:["文章概览",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#文章概览",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"babel-preset-env是非常重要且常用的一个插件预设，掌握它的用法以及实现原理非常有必要。"}),"\n",(0,s.jsx)(n.p,{children:"本文主要内容包括：babel-preset-env是什么、入门实例、如何配置以支持特定版本的 node/浏览器、实现原理等。"}),"\n",(0,s.jsxs)(n.h2,{id:"babel-preset-env简介",children:["babel-preset-env简介",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#babel-preset-env简介",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"历史背景：为了让开发者能够尽早用上新的JS特性，babel团队开发了babel-preset-latest。这个preset比较特殊，它是多个preset的集合(es2015+)，并且随着ECMA规范的更新更增加它的内容。"}),"\n",(0,s.jsx)(n.p,{children:"比如，当前(2018.06.02)，它包含的preset包括：es2017、es1016、es2015。"}),"\n",(0,s.jsx)(n.p,{children:"到了明年，可能它包含的preset就包括：es2018、es2017、es2016、es2015。"}),"\n",(0,s.jsx)(n.p,{children:"随着时间的推移，babel-preset-latest 包含的插件越来越多，这带来了如下问题："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"加载的插件越来越多，编译速度会越来越慢；"}),"\n",(0,s.jsx)(n.li,{children:"随着用户浏览器的升级，ECMA规范的支持逐步完善，编译至低版本规范的必要性在减少（比如ES6 -> ES5），多余的转换不单降低执行效率，还浪费带宽。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"因为上述问题的存在，babel官方推出了babel-preset-env插件。它可以根据开发者的配置，按需加载插件。配置项大致包括："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"需要支持的平台：比如node、浏览器等。"}),"\n",(0,s.jsx)(n.li,{children:"需要支持的平台的版本：比如支持node@6.1等。"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"默认配置的情况下，它跟 babel-preset-latest 是等同的，会加载从es2015开始的所有preset。"}),"\n",(0,s.jsxs)(n.h2,{id:"入门例子",children:["入门例子",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#入门例子",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"首先，安装依赖。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm install babel-cli --save-dev\nnpm install babel-preset-env --save-dev\n"})}),"\n",(0,s.jsx)(n.p,{children:"创建 index.js。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"let foo = () => 'foo';\n"})}),"\n",(0,s.jsx)(n.p,{children:"配置文件 .babelrc 如下，当前为默认配置。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "presets": [ "env" ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"运行转换命令"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"`npm bin`/babel index.js\n"})}),"\n",(0,s.jsx)(n.p,{children:"转换结果如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"'use strict';\n\nvar foo = function foo() {\n  return 'foo';\n};\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"针对node版本的配置",children:["针对node版本的配置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#针对node版本的配置",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"前面提到，babel-preset-env 提供了更精细化的配置，以提升编译速度，同时减少代码冗余。"}),"\n",(0,s.jsx)(n.p,{children:"我们看下实际例子。假设当前有如下代码："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// index.js\nasync function foo () {}\n"})}),"\n",(0,s.jsx)(n.p,{children:"采用 babel-preset-env，默认配置下，输出的转换结果如下（具体内容不用关心，知道很长就行了）。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'"use strict";\n\nvar foo = function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function foo() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }\n'})}),"\n",(0,s.jsx)(n.p,{children:"如果我们的代码是打算跑在node@8.9.3版本上，那上面的兼容代码就有点多余了，因为node@8.9.3已经支持了async/await。"}),"\n",(0,s.jsx)(n.p,{children:'修改下 .babelrc，加上配置参数"target"，它表示我们需要支持哪些平台+哪些版本。这里声明我们要支持的是node版本为8.9.3。'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "presets": [\n    ["env", {\n      "targets": {\n        "node": "8.9.3"\n      }      \n    }]\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"再次进行转码，结果如下。几乎没有变化，因为node最新版本支持 async/await，因此不需要额外的兼容代码。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'"use strict";\n\nasync function foo() {}\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"针对浏览器版本的配置",children:["针对浏览器版本的配置",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#针对浏览器版本的配置",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"babel-preset-env 同样提供了对浏览器版本的配置能力。"}),"\n",(0,s.jsxs)(n.h3,{id:"支持特定版本的浏览器",children:["支持特定版本的浏览器",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#支持特定版本的浏览器",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"假设我们的代码如下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"let nick = '程序猿小卡';\nlet desc = `你好 ${nick}`;\n"})}),"\n",(0,s.jsx)(n.p,{children:"如果只需要支持 IE11，那么可以这样配置。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "presets": [\n    ["env", {\n      "targets": {\n        "browsers": "ie 11"\n      }      \n    }]\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"如果只需要支持支持 Edge 16，那么可以这样配置"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "presets": [\n    ["env", {\n      "targets": {\n        "browsers": "edge 16"\n      }      \n    }]\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"因为 IE 11 不支持模板字面量，而 Edge 16支持模板字面量，因此上面配置的转码结果是不同的，读者可以自行尝试。"}),"\n",(0,s.jsxs)(n.h3,{id:"支持特定版本范围的浏览器",children:["支持特定版本范围的浏览器",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#支持特定版本范围的浏览器",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"大部分时候，我们要针对的都是特定范围的浏览器，比如 IE8+，那么，逐个指定是不现实的。好在 babel-preset-env 支持要支持的版本范围。"}),"\n",(0,s.jsx)(n.p,{children:"比如，我们需要支持 IE8+、chrome62+，那么可以这样配置："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "presets": [\n    ["env", {\n      "targets": {\n        "browsers": [ "ie >= 8", "chrome >= 62" ]\n      }      \n    }]\n  ]\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"看下前面声明的范围涵盖了哪些浏览器。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'$ `npm bin`/browserslist "ie >= 8, chrome >= 62"\nchrome 66\nchrome 65\nchrome 64\nchrome 63\nchrome 62\nie 11\nie 10\nie 9\nie 8\n'})}),"\n",(0,s.jsxs)(n.p,{children:["对浏览器版本范围的配置，babel-preset-env 借助了 ",(0,s.jsx)(n.a,{href:"https://github.com/browserslist/browserslist",target:"_blank",rel:"noopener noreferrer",children:"browserslist"})," 这个库，还有更多的配置方式，可以自行探究。"]}),"\n",(0,s.jsxs)(n.h2,{id:"babel-preset-env实现原理",children:["babel-preset-env实现原理",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#babel-preset-env实现原理",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"实现原理很简单。官方文档写的挺简洁的，挑重点大致翻译下。"}),"\n",(0,s.jsxs)(n.p,{children:["1、首先，检测浏览器对JS特性的支持程度，比如通过通过 ",(0,s.jsx)(n.a,{href:"https://github.com/kangax/compat-table",target:"_blank",rel:"noopener noreferrer",children:"compat-table"})," 这样的外部数据。"]}),"\n",(0,s.jsxs)(n.p,{children:["2、将 JS特性 跟 特定的babel插件 建立映射，映射关系可以参考 ",(0,s.jsx)(n.a,{href:"https://github.com/babel/babel-preset-env/blob/master/data/plugin-features.js",target:"_blank",rel:"noopener noreferrer",children:"这里"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"3、stage-x 的插件不包括在内。"}),"\n",(0,s.jsx)(n.p,{children:"4、根据开发者的配置项，确定至少需要包含哪些插件。比如声明了需要支持 IE8+、chrome62+，那么，所有IE8+需要的插件都会被包含进去。"}),"\n",(0,s.jsxs)(n.h2,{id:"相关链接",children:["相关链接",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#相关链接",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://babeljs.io/docs/plugins/preset-env/#how-it-works",target:"_blank",rel:"noopener noreferrer",children:"https://babeljs.io/docs/plugins/preset-env/#how-it-works"})})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}let c=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["babel%2F25-babel-preset-env%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97.md"]={toc:[{text:"文章概览",id:"文章概览",depth:2},{text:"babel-preset-env简介",id:"babel-preset-env简介",depth:2},{text:"入门例子",id:"入门例子",depth:2},{text:"针对node版本的配置",id:"针对node版本的配置",depth:2},{text:"针对浏览器版本的配置",id:"针对浏览器版本的配置",depth:2},{text:"支持特定版本的浏览器",id:"支持特定版本的浏览器",depth:3},{text:"支持特定版本范围的浏览器",id:"支持特定版本范围的浏览器",depth:3},{text:"babel-preset-env实现原理",id:"babel-preset-env实现原理",depth:2},{text:"相关链接",id:"相关链接",depth:2}],title:"babel-preset-env使用指南",frontmatter:{}}}}]);