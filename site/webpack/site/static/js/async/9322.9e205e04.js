"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["9322"],{2460:function(e,n,s){s.r(n),s.d(n,{default:function(){return l}});var r=s(6469),o=s(8809);function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h3:"h3",pre:"pre",code:"code"},(0,o.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"ant-design-打包后样式错误分析",children:["Ant-design 打包后样式错误分析",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ant-design-打包后样式错误分析",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"统计信息：字数 7222  阅读15分钟"}),"\n",(0,r.jsxs)(n.h3,{id:"错误现象",children:["错误现象",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#错误现象",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"某项目本地开发样式正常（npm run dev），上线后样式不正常（npm run build）"}),"\n",(0,r.jsxs)(n.h3,{id:"错误分析",children:["错误分析",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#错误分析",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"本地开发中，antd-mobile 对应的CSS在前，自定义的 CSS 在后，界面可以正常显示；"}),"\n",(0,r.jsx)(n.p,{children:"打包集成到线上，自定义的CSS 编译后为 commons.buldle.css 在前，antd-mobile 直接由 less 编译成 css 未打包，在后面。"}),"\n",(0,r.jsx)(n.p,{children:"所以自定义的样式被已有的 antd-mobile 的样式覆盖，样式错误。"}),"\n",(0,r.jsx)(n.p,{children:"下面是错误的代码 webpack-config-dev.js"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// common function to get style loaders\nconst getStyleLoaders = (cssOptions, preProcessor) => {\n  const loaders = [\n    // 这个函数中，如果是开发环境，直接使用 style-loader；如果是生产环境，需要miniCss压缩后操作\n    isEnvDevelopment && {\n      loader: require.resolve('style-loader')\n    },\n    isEnvProduction && {\n      loader: MiniCssExtractPlugin.loader,\n      options: shouldUseRelativeAssetPaths ? { publicPath: '../../' } : {},\n    },\n    {\n      loader: require.resolve('css-loader'),\n      options: cssOptions,\n    },\n    {\n      // Options for PostCSS as we reference these options twice\n      // Adds vendor prefixing based on your specified browser support in\n      // package.json\n      loader: require.resolve('postcss-loader'),\n      options: {\n        // Necessary for external CSS imports to work\n        // https://github.com/facebook/create-react-app/issues/2677\n        ident: 'postcss',\n        plugins: () => [\n          require('postcss-flexbugs-fixes'),\n          require('postcss-preset-env')({\n            autoprefixer: {\n              flexbox: 'no-2009',\n            },\n            stage: 3,\n          }),\n          // Adds PostCSS Normalize as the reset css with default options,\n          // so that it honors browserslist config in package.json\n          // which in turn let's users customize the target behavior as per their needs.\n          postcssNormalize(),\n        ],\n        sourceMap: isEnvProduction && shouldUseSourceMap,\n      },\n    },\n  ].filter(Boolean);\n  if (preProcessor) {\n    loaders.push(\n      {\n        loader: require.resolve('resolve-url-loader'),\n        options: {\n          sourceMap: isEnvProduction && shouldUseSourceMap,\n        },\n      },\n      {\n        loader: require.resolve(preProcessor),\n        options: {\n          sourceMap: true,\n        },\n      }\n    );\n  }\n  return loaders;\n};\n\n\nmodule: {\n  rules: [\n    // js loader\n    {\n      oneOf: [\n        {\n          test: cssRegex,\n          exclude: cssModuleRegex,\n          use: getStyleLoaders({\n            importLoaders: 0,\n            sourceMap: isEnvProduction && shouldUseSourceMap,\n          }),\n          sideEffects: true,\n        },\n        // Adds support for CSS Modules \n        {\n          test: cssModuleRegex,\n          use: getStyleLoaders({\n            importLoaders: 1,\n            sourceMap: isEnvProduction && shouldUseSourceMap,\n            modules: true,\n            getLocalIdent: getCSSModuleLocalIdent,\n          }),\n        },\n        // 处理 sass 文件（webpack默认配置）已经使用getStyleLoaders这个函数，可以在开发环境中使用未压缩的CSS，在生产环境中使用压缩的CSS文件。\n        {\n          test: sassRegex,\n          exclude: sassModuleRegex,\n          use: getStyleLoaders(\n            {\n              importLoaders: 2,\n              sourceMap: isEnvProduction && shouldUseSourceMap,\n            },\n            'sass-loader'\n          ),\n          // Don't consider CSS imports dead code even if the\n          // containing package claims to have no side effects.\n          // Remove this when webpack adds a warning or an error for this.\n          // See https://github.com/webpack/webpack/issues/6571\n          sideEffects: true,\n        },\n        // Adds support for CSS Modules, but using SASS\n        // using the extension .module.scss or .module.sass\n        {\n          test: sassModuleRegex,\n          use: getStyleLoaders(\n            {\n              importLoaders: 2,\n              sourceMap: isEnvProduction && shouldUseSourceMap,\n              modules: true,\n              getLocalIdent: getCSSModuleLocalIdent,\n            },\n            'sass-loader'\n          ),\n        },\n\n        // 默认的Less处理，只使用三个loader处理less文件。在生产环境中，会渲染成多个style文件，不会把antd-mobile 文件打包到 commons.trunk.css 中。\n        {\n          test: /\\.less$/,\n          use:  [\n            {loader: 'style-loader'},\n            {loader: 'css-loader'}, \n            {\n              loader: 'less-loader',\n              options: {\n                javascriptEnabled: true\n              }\n            }\n          ],\n        },\n\n      ],\n    },\n  ],\n},\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"问题解决",children:["问题解决",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#问题解决",children:"#"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const lessRegex = /\\.less$/;\nconst lessModuleRegex = /\\.module\\.less$/;\n\nmodule: {\n  rule: [\n    loaders.push(\n      {\n        loader: require.resolve('resolve-url-loader'),\n        options: {\n          sourceMap: isEnvProduction && shouldUseSourceMap,\n        },\n      },\n      {\n        loader: require.resolve(preProcessor),\n        options: {\n          sourceMap: true,\n          // 增加 javascriptEnabled: true,\n        },\n      }\n    );\n  ]\n}\n\n// 修改下面的 less loader，在生产环境中可以判断，把 less 文件打包到 trunk.css 文件中。\n{\n  test: lessRegex,\n    exclude: lessModuleRegex,\n      use: getStyleLoaders(\n        {\n          importLoaders: 2,\n          sourceMap: isEnvProduction && shouldUseSourceMap\n        },\n        'less-loader'\n      ),\n},\n  {\n    test: lessModuleRegex,\n      use: getStyleLoaders(\n        {\n          importLoaders: 2,\n          sourceMap: isEnvProduction && shouldUseSourceMap,\n          modules: true,\n          getLocalIdent: getCSSModuleLocalIdent,\n        },\n        'less-loader'\n      ),\n  },\n"})}),"\n",(0,r.jsx)(n.p,{children:"现在生产环境中部署后，样式正常"}),"\n",(0,r.jsxs)(n.h3,{id:"参考文件",children:["参考文件",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考文件",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["官网文档 ",(0,r.jsx)(n.a,{href:"https://webpack.docschina.org/concepts/entry-points/",target:"_blank",rel:"noopener noreferrer",children:"https://webpack.docschina.org/concepts/entry-points/"})]}),"\n",(0,r.jsxs)(n.p,{children:["React+less ",(0,r.jsx)(n.a,{href:"https://blog.csdn.net/qwe502763576/article/details/83242823",target:"_blank",rel:"noopener noreferrer",children:"https://blog.csdn.net/qwe502763576/article/details/83242823"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.jianshu.com/p/6b0b80eb3e2e",target:"_blank",rel:"noopener noreferrer",children:"https://www.jianshu.com/p/6b0b80eb3e2e"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/ant-design/ant-design/issues/3442#issuecomment-374877201",target:"_blank",rel:"noopener noreferrer",children:"https://github.com/ant-design/ant-design/issues/3442#issuecomment-374877201"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.cnblogs.com/mydxy/articles/10157215.html",target:"_blank",rel:"noopener noreferrer",children:"https://www.cnblogs.com/mydxy/articles/10157215.html"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.cnblogs.com/ldld/p/6488830.html",target:"_blank",rel:"noopener noreferrer",children:"https://www.cnblogs.com/ldld/p/6488830.html"})}),"\n",(0,r.jsxs)(n.h3,{id:"进一步思考",children:["进一步思考",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#进一步思考",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"打包到 bundle 中，那么其他的界面也会引用这个 bundle.css，就会影响其他界面的样式（body 的背景色）。"}),"\n",(0,r.jsx)(n.p,{children:"现在还是原始的问题：按需加载，加载的部分中，不能影响其他自定义的样式。"}),"\n",(0,r.jsx)(n.p,{children:"antd-mobile 中引用任何一个组件时，都会引用 style/index.css 文件。所以，不管使用 less 还是使用 css，都会把这部分公共组件引入。目前没有特别好的办法（除非把每一个组件单独应用，然后把公共样式中不影响默认样式的部分拿过来）。"}),"\n",(0,r.jsx)(n.p,{children:"less 部分有一个对应的按需加载的配置。这个插件根据需要的部分把CSS引入。但是这样打包后的CSS的顺序可能存在问题。所以现在不使用这个方法。如果自己日常使用时，可以使用部分引入的方法。"})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,o.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(t,{...e})}):t(e)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["webpack%2F43-webpack%20%E6%89%93%E5%8C%85%20antd-mobile%20%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD%E6%A0%B7%E5%BC%8F%E9%97%AE%E9%A2%98.md"]={toc:[{text:"错误现象",id:"错误现象",depth:3},{text:"错误分析",id:"错误分析",depth:3},{text:"问题解决",id:"问题解决",depth:3},{text:"参考文件",id:"参考文件",depth:3},{text:"进一步思考",id:"进一步思考",depth:3}],title:"Ant-design 打包后样式错误分析",frontmatter:{}}}}]);