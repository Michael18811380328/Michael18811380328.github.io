{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"K-means/","text":"K-means \u805a\u7c7b\u7b97\u6cd5 \u5728\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u5e2e\u52a9\u4e0b\u6211\u4eec\u80fd\u591f\u5904\u7406\u4f53\u91cf\u5de8\u5927\u7684\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u5411\u6570\u636e\u8be2\u95ee\u4e00\u7cfb\u5217\u7684\u95ee\u9898\uff0c\u5e0c\u671b\u673a\u5668\u5b66\u4e60\u80fd\u7ed9\u51fa\u7b54\u6848\u3002\u6bd4\u5982\uff1a\u67d0\u4e2a\u6570\u636e\u70b9\u548c\u54ea\u4e9b\u76f8\u4f3c\uff1f\u901a\u8fc7\u5bf9\u8fd9\u4e9b\u6570\u636e\u7684\u5206\u6790\u80fd\u5426\u603b\u7ed3\u51fa\u67d0\u79cd\u6a21\u5f0f\uff1f\u7ed9\u51fa\u5386\u53f2\u8d8b\u52bf\u6570\u636e\u7684\u524d\u63d0\u4e0b\uff0c\u80fd\u5426\u5224\u65ad\u672a\u6765\u8d70\u52bf? \u8bf8\u5982\u6b64\u7c7b\u7684\u95ee\u9898\u90fd\u9002\u7528\u4e8e\u5728\u673a\u5668\u5b66\u4e60\u9886\u57df\u5bfb\u627e\u7b54\u6848\u3002 \u95ee\u9898\u6765\u6e90 \u4eca\u5929\u7684\u8bae\u9898\u662f\u600e\u4e48\u628a\u6570\u636e\u5206\u7c7b\u3002\u6bd4\u5982\uff0c\u4f60\u6b63\u5728\u4e3a\u4e00\u5bb6\u533b\u7597\u5f71\u50cf\u8bbe\u5907\u516c\u53f8\u5de5\u4f5c\uff0c\u5047\u5982\u4f60\u5df2\u7ecf\u627e\u5230\u4e86\u8bc6\u522b\u80bf\u7624\u7ec6\u80de\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u5982\u679c\u80fd\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u627e\u51fa\u80bf\u7624\u7ec6\u80de\u7fa4\u7684\u4e2d\u5fc3\u4f4d\u7f6e\u5c31\u66f4\u597d\u4e86\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528\u673a\u5668\u4eba\u7cbe\u51c6\u5730\u8fbe\u5230\u76ee\u7684\u5730\u5e76\u6e05\u9664\u5b83\u4eec\u3002\u6211\u4eec\u9700\u8981\u627e\u51fa\u4e00\u79cd\u805a\u7c7b\u7b97\u6cd5\uff0c\u8fd9\u5c31\u662f\u4eca\u5929\u8981\u7279\u522b\u8ba8\u8bba\u7684 k-means\u3002 \u805a\u7c7b\u7b97\u6cd5 \u805a\u7c7b\u7b97\u6cd5\u901a\u5e38\u6765\u8bb2\u5c31\u662f\u8981\u6309\u7167\u76f8\u4f3c\u6027\u7ed9\u6570\u636e\u5206\u7c7b\u3002\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u7535\u5546\u7ecf\u8425\u8005\uff0c\u5c31\u53ef\u4ee5\u7528\u805a\u7c7b\u7b97\u6cd5\u8bc6\u522b\u51fa\u5404\u79cd\u8d2d\u7269\u8005\u7684\u7c7b\u578b\u3002\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u6709\u4e00\u79cd\u987e\u5ba2\u5728\u6d4f\u89c8\u4e09\u4e94\u4e2a\u4ea7\u54c1\u9875\u9762\u4e4b\u540e\u5c31\u4f1a\u4e0b\u5355\u8d2d\u4e70\uff0c\u53e6\u5916\u4e00\u7ec4\u7528\u6237\u53ef\u80fd\u9700\u8981\u6d4f\u89c8\u591a\u8fbe15\u4e2a\u9875\u9762\u8fd8\u8981\u770b\u5f88\u591a\u8bc4\u8bba\u624d\u51b3\u5b9a\u8d2d\u4e70\uff0c\u800c\u4e14\u4f1a\u662f\u4e00\u5355\u9ad8\u4ef7\u503c\u7684\u8d2d\u4e70\u884c\u4e3a\uff0c\u53e6\u5916\u4f60\u53ef\u80fd\u8fd8\u4f1a\u6ce8\u610f\u5230\u6709\u4e00\u7ec4\u51b2\u52a8\u6d88\u8d39\u578b\u7684\u7528\u6237\uff0c\u4ed6\u4eec\u4e0d\u7528\u6d4f\u89c8\u592a\u6df1\u5165\u5c31\u4f1a\u53d1\u751f\u591a\u6b21\u5c0f\u989d\u8d2d\u4e70\u884c\u4e3a\u3002\u4e00\u65e6\u5b8c\u6210\u4e86\u5bf9\u8fd9\u4e9b\u7ebf\u4e0a\u6d88\u8d39\u8005\u7684\u4eba\u53e3\u8c03\u67e5\uff0c\u4f60\u5c31\u80fd\u66f4\u597d\u5730\u4f18\u5316\u7ad9\u70b9\u63d0\u9ad8\u9500\u552e\u989d\u3002\u56e0\u4e3a\u77e5\u9053\u4e86\u81ea\u5df1\u7684\u5ba2\u6237\u4e2d\u5b58\u5728\u51b2\u52a8\u578b\u6d88\u8d39\u8005\uff0c\u4f60\u5c31\u53ef\u4ee5\u9488\u5bf9\u6027\u5730\u6dfb\u52a0\u4e00\u4e9b\u529f\u80fd\u523a\u6fc0\u8fd9\u90e8\u5206\u6d88\u8d39\u8005\u3002 k-means \u548c\u8fd1\u90bb\u7b97\u6cd5\uff08k-nearest-neighbor\uff09\u4e00\u6837\uff0ck-means \u4e2d\u7684 k \u4e5f\u662f\u4e00\u4e2a\u6570\u91cf\u503c\uff0c\u662f\u7b97\u6cd5\u4e2d\u7684\u91cd\u8981\u53c2\u6570\u3002\u9700\u8981\u7279\u522b\u6307\u51fa\u7684\u662f\uff0c\u8fd9\u91cc\u7684 \u201ck\u201d \u5c31\u662f\u6211\u4eec\u8981\u5728\u6570\u636e\u4e2d\u627e\u51fa\u6765\u7684\u7c07\uff08\u5206\u7ec4\uff09\u7684\u6570\u91cf\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5f88\u96be\u5728\u95ee\u9898\u89e3\u51b3\u524d\u77e5\u6653\u8fd9\u4e2a\u6570\u91cf\u503c\uff0c\u6240\u4ee5 k-means \u7b97\u6cd5\u901a\u5e38\u9700\u8981\u5728 \u53e6\u5916\u4e00\u4e2a\u7b97\u6cd5\u7684\u5e2e\u52a9\u4e0b\u627e\u5230\u6700\u6070\u5f53\u7684 k \u503c \u3002 \u95ee\u9898\u662f k-means \u7b97\u6cd5\u4f1a\u628a\u6570\u636e\u5206\u5272\u6210 k \u4e2a\u72ec\u7279\u7684\u7c07\uff0c \u4f46\u662f\u7b97\u6cd5\u4e0d\u4f1a\u544a\u8bc9\u4f60 k \u503c\u662f\u5426\u6b63\u786e\u3002\u6bd4\u5982\uff0c\u4f60\u7684\u6570\u636e\u5728\u7406\u60f3\u60c5\u51b5\u4e0b\u5e94\u8be5\u88ab\u5206\u62105\u4e2a\u7c07\uff0c\u4f46\u662f\u5982\u679c\u4eba\u4e3a\u5730\u628a k \u8bbe\u5b9a\u4e3a3\uff0c\u90a3\u4e48\u4f60\u5c31\u4f1a\u5f97\u52303\u4e2a\u7c07\uff0c\u5f53\u7136\u8fd9\u4e9b\u7c07\u7684\u89c4\u6a21\u80af\u5b9a\u5927\u4e86\u4e00\u4e9b\uff0c\u76f8\u5bf9\u4e8e\u7406\u60f3\u72b6\u6001\u4e0b\u76845\u4e2a\u7c07\uff0c\u7cbe\u786e\u5ea6\u4e5f\u4e0b\u964d\u4e86\u3002 \u8fd9\u4e2a\u7b97\u6cd5\u6709\u4f18\u70b9\u4e5f\u6709\u77ed\u677f\uff0c\u4e3a\u4e86\u4f7f\u7528 k-means \u7b97\u6cd5\u4f60\u9700\u8981\u9884\u5148\u77e5\u9053k\u7684\u503c\uff0c\u6216\u8005\u7528\u53e6\u5916\u7684\u7b97\u6cd5\u5e2e\u4f60\u731c\u6d4b\u8fd9\u4e2a\u503c\u3002 k-means \u53ea\u662f\u5e2e\u4f60\u628a\u6570\u636e\u5206\u5230\u4e0d\u540c\u7684\u7c7b\u522b\u91cc\uff0c\u4f60\u8fd8\u9700\u8981\u505a\u4e9b\u989d\u5916\u7684\u5de5\u4f5c\u627e\u5230\u7c07\u7684\u5408\u9002\u6570\u76ee\u3002 \u5728\u4eca\u5929\u4f8b\u5b50\u4e2d\u6211\u4eec\u5148\u8bbe\u5b9a\u7c07\u7684\u6570\u76ee\u4e3a3\uff0c\u4e0b\u4e00\u7bc7\u6587\u7ae0\u5c06\u4f1a\u8ba8\u8bba\u81ea\u52a8\u731c\u6d4b k \u503c\u7684\u7b97\u6cd5\uff0c\u6700\u5e38\u7528\u5230\u7684\u5c31\u662f \u8bef\u5dee\u5206\u6790\u6cd5 \u7ed3\u5408 \u53cd\u590d\u8c03\u7528 k-means \u7b97\u6cd5\u4ee5\u4f18\u5316\u7ed3\u679c \uff0c\u4f7f\u8bef\u5dee\u6700\u5c0f\u5316\u3002 \u8fc7\u7a0b \u867d\u7136 k-means \u7b97\u6cd5\u7b80\u5355\uff0c\u4f46\u662f\u5982\u679c\u7528\u5728\u591a\u7ef4\u6570\u636e\u96c6\u4e0a\u4f1a\u8868\u73b0\u51fa\u5b83\u5f3a\u5927\u7684\u751f\u547d\u529b\u3002\u4eca\u5929\u6211\u4eec\u4f1a\u5904\u7406\u4e00\u7ec42\u7ef4\u6570\u636e\uff0c\u4e0b\u6b21\u6211\u4eec\u518d\u628a\u5b83\u505a\u7684\u590d\u6742\u4e9b\u3002 \u7b97\u6cd5\u8fc7\u7a0b\u5982\u4e0b\uff1a \u4ee5\u6563\u70b9\u56fe\u7684\u65b9\u5f0f\uff0c\u53ef\u89c6\u5316\u6570\u636e\u3002 \u521b\u5efa k \u4e2a\u65b0\u7684\u6570\u636e\u70b9\uff0c\u968f\u673a\u5206\u5e03\u5728\u56fe\u4e0a\uff0c\u628a\u8fd9\u4e9b\u6570\u636e\u70b9\u4f5c\u4e3a\u7c07\u7684\u201c\u91cd\u5fc3\u201d\uff0c\u4e5f\u79f0\u201c\u7c07\u91cd\u5fc3\u5907\u9009\u8005\u201d\u3002 \u91cd\u590d\u4e0b\u9762\u7684\u8fc7\u7a0b\uff1a \u628a\u8ddd\u79bb\u91cd\u5fc3\u6700\u8fd1\u7684\u90a3\u4e9b\u6570\u636e\u70b9\u5206\u914d\u7ed9\u5b83 \u79fb\u52a8\u91cd\u5fc3\u7684\u4f4d\u7f6e\u5230\u6240\u6709\u5c5e\u4e8e\u5b83\u7684\u6570\u636e\u70b9\u7684\u5e73\u5747\u4f4d\u7f6e\u4e0a \u5982\u679c\u91cd\u5fc3\u7684\u4f4d\u7f6e\u5728\u6700\u540e\u4e00\u6b65\u4e2d\u79fb\u52a8\u4e86\uff0c\u7ee7\u7eed\u91cd\u590d\u4e0a\u8bc9\u8fc7\u7a0b\uff0c\u5426\u5219\u9000\u51fa\u3002 \u8fd9\u662f\u4e00\u4e2a\u8fed\u4ee3\u8fc7\u7a0b\u3002\u53ef\u80fd\u4f1a\u8fed\u4ee3\u4e24\u4e09\u6b21\u751a\u81f3\u6570\u5341\u6b21\uff0c\u4f46\u662f\u6700\u7ec8\u4f60\u7684\u7c07\u91cd\u5fc3\u4f1a\u9760\u8fd1\u76ee\u7684\u5730\u5e76\u505c\u6b62\u79fb\u52a8\uff0c\u6700\u540e\u4f1a\u5f97\u5230\u4f60\u60f3\u8981\u7684\u7c07\u96c6\u5408\u3002 \u5c40\u9650\u6027 \u8be5\u7b97\u6cd5\u548c\u5f88\u591a\u6211\u4eec\u5728\u8fd9\u4e2a\u7cfb\u5217\u4e2d\u5c06\u8981\u8bb2\u5230\u7b97\u6cd5\u7684\u4e00\u6837\uff0c\u5bb9\u6613\u9677\u5165 \u5c40\u90e8\u6700\u4f18\u89e3 \u3002\u5982\u679c\u4f60\u591a\u8fd0\u884c\u4e0b\u9762\u7684\u4f8b\u5b50\u51e0\u6b21\uff0c\u5c31\u4f1a\u53d1\u73b0\u6bcf\u6b21\u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4f1a\u6709\u5dee\u522b\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u4e9b\u7ed3\u679c\u9677\u5165\u4e86\u4e0d\u540c\u7684\u5c40\u90e8\u6700\u4f18\u89e3\u3002 \u7b97\u6cd5\u4ece\u4e00\u4e9b\u968f\u673a\u7684\uff0c\u672c\u8eab\u5c31\u5bb9\u6613\u53d7\u5c40\u90e8\u6700\u4f18\u5f71\u54cd\u7684\u79cd\u5b50\u5f00\u59cb\uff0c\u56e0\u4e3a\u6c38\u8fdc\u4e0d\u77e5\u9053\u7b97\u6cd5\u5177\u4f53\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u679c\u7684\u8d70\u5411\uff0c\u79cd\u5b50\u7684\u72b6\u6001\u4f1a\u5bfc\u81f4\u5c40\u90e8\u6700\u4f18\u8fd8\u662f\u5168\u5c40\u6700\u4f18\uff1f\u8fd9\u4e9b\u90fd\u65e0\u4ece\u77e5\u6653\u3002\u5c31\u50cf\u9057\u4f20\u7b97\u6cd5\u4e00\u6837\uff0c\u80fd\u8df3\u51fa\u5c40\u90e8\u6700\u4f18\u89e3\u7684\u4e00\u4e2a\u65b9\u6cd5\u5c31\u662f\u4f7f\u201c\u89e3\u201d\u53d1\u751f\u4e00\u70b9\u513f\u7a81\u53d8\u3002\u5728\u6b64 k-means \u4f8b\u5b50\u4e2d, \u6211\u4eec\u4f1a\u5728\u7b97\u6cd5\u4e2d\u52a0\u5165\u4e00\u6761\u89c4\u5219\uff0c \u5c31\u662f\u5f53\u53d1\u73b0\u91cd\u5fc3\u6570\u636e\u70b9\u7ecf\u8fc7\u4e00\u8f6e\u8fed\u4ee3\u540e\u6ca1\u6709\u53d1\u751f\u79fb\u52a8\uff0c\u90a3\u4e48\u5c31\u5728\u4e00\u4e2a\u5728\u968f\u673a\u65b9\u5411\u4e0a\u63a8\u4e00\u628a \u3002\u7ed3\u679c\u5c31\u662f\u5b83\u53ef\u80fd\u53c8\u56de\u5230\u4e86\u539f\u6765\u7684\u4f4d\u7f6e\uff0c\u4e5f\u53ef\u80fd\u627e\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u89e3\u3002\u8fd9\u4e2a\u63a8\u52a8\u4e0d\u8981\u5927\u5230\u8ba9\u8ba1\u7b97\u4ece\u56de\u8d77\u70b9\uff0c\u4f46\u662f\u4e5f\u8981\u8db3\u591f\u628a\u5b83\u8e22\u51fa\u67d0\u4e2a\u5c40\u90e8\u6700\u4f18\u533a\u57df\u3002\u53e6\u5916\u4e00\u4e2a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7684\u6280\u5de7\u88ab\u79f0\u4e4b\u4e3a\u201c\u673a\u5668\u59d4\u5458\u4f1a\u201d\uff0c\u5982\u679c\u4f60\u7684\u7b97\u6cd5\u80fd\u7ed3\u675f\u7684\u5f88\u5feb\u6216\u8005\u80fd\u4f7f\u7528\u5e76\u884c\u8ba1\u7b97\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6280\u5de7\u5f88\u7ba1\u7528\u3002\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u8fd0\u884c k-means \u7b97\u6cd53\u6b21\uff0c5\u6b21\uff0c51\u6b21\u621610000\u6b21\uff0c\u9009\u62e9\u90a3\u4e9b\u6700\u7ecf\u5e38\u5f97\u5230\u7684\u89e3\u3002\u201c\u673a\u5668\u59d4\u5458\u4f1a\u201d \u662f\u6307\u4e00\u4e9b\u4eba\u9009\u62e9\u5728\u4e0d\u540c\u786c\u4ef6\u4e0a\u8fd0\u884c\u5e76\u884c\u7b97\u6cd5\uff0c\u4e00\u4e2a\u5b57\u9762\u4e0a\u7684\u673a\u5668\u59d4\u5458\u4f1a\u80fd\u7ed9\u8fd9\u4e9b\u201c\u89e3\u201d\u6295\u7968\u3002 \u4ee3\u7801 \u6211\u4eec\u5f00\u59cb\u4ee3\u7801\u90e8\u5206\uff0c\u548c\u81f3\u4eca\u4e3a\u6b62\u7684\u5176\u4ed6\u4f8b\u5b50\u4e0d\u540c\uff0c\u6211\u4f1a\u653e\u5f03\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u6cd5\u800c\u91c7\u7528\u76f4\u63a5\u4e86\u5f53\u7684\u7b56\u7565\u3002\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u6211\u559c\u6b22OOP\uff0c\u4f46\u662f\u91cd\u70b9\u662f\u4e0d\u8981\u592a\u4f9d\u8d56\u4e8e\u4e60\u60ef\uff0c\u8fd8\u6709\u5c31\u662f\u6211\u4eec\u5728\u4f8b\u5b50\u4e2d\u4f7f\u7528\u7684\u6570\u636e\u53ea\u662f\u4e8c\u7ef4\u7684\uff0c\u6211\u613f\u610f\u628a\u8fd9\u4e2a\u7b97\u6cd5\u5199\u6210\u53ef\u4ee5\u5904\u7406\u4efb\u4f55\u7ef4\u5ea6\u7684\u6570\u636e\u3002\u73b0\u5728\u6765\u770b\u770b\u6211\u4eec\u8981\u4f7f\u7528\u5230\u7684\u6570\u636e\uff0c\u975e\u5e38\u7b80\u5355\u7684\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6570\u636e\u4e2d\u7684\u4e24\u4e2a\u503c\u5206\u522b\u8868\u793ax\uff0cy\u3002 var data = [ [1, 2], [2, 1], [2, 4], [1, 3], [2, 2], [3, 1], [1, 1], [7, 3], [8, 2], [6, 4], [7, 4], [8, 1], [9, 2], [10, 8], [9, 10], [7, 8], [7, 9], [8, 11], [9, 9], ]; \u63a5\u4e0b\u6765\u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u65b9\u6cd5\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u70b9\u7684\u5217\u8868\uff0c\u6211\u60f3\u77e5\u9053\u5176\u4e2d\u5728x\u548cy\u4e24\u4e2a\u65b9\u5411\u4e0a\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u8fd8\u6709\u5728\u4e24\u4e2a\u65b9\u5411\u4e0a\u7684\u8de8\u5ea6\uff08\u5faa\u73af\u6570\u7ec4\uff0c\u8ba1\u7b97\u6570\u7ec4\u5185\u90e8 X \u548c Y\u7684\u6700\u503c\uff0c\u7136\u540e\u6c42\u8303\u56f4\uff09\u3002\u6bd4\u5982\u5728X\u65b9\u5411\u4e0a\u662f\u4ece1\u523011\uff0c\u5728Y\u65b9\u5411\u4e0a\u662f\u4ece3\u52307\uff0c\u4e86\u89e3\u8fd9\u4e9b\u6709\u5229\u4e8e\u6211\u4eec\u968f\u673a\u4ea7\u751f\u7c07\u91cd\u5fc3\u65f6\u53c2\u8003\u3002 \u6211\u4eec\u5e94\u8be5\u5728\u5934\u8111\u4e2d\u59cb\u7ec8\u4fdd\u6301\u4e00\u4e2a\u7406\u5ff5\uff0c \u5c31\u662f\u8981\u8ba9\u51fd\u6570\u5728\u5904\u7406\u4e0d\u540c\u7ef4\u5ea6\u7684\u6570\u636e\u65f6\u5177\u6709\u901a\u7528\u6027 \uff1a // \u7ed9\u5b9a\u4e00\u4e2an\u7ef4\u6570\u7ec4extremes\uff0c\u83b7\u53d6\u8fd9\u4e2a\u6570\u7ec4\u5728\u4e0d\u540c\u7ef4\u5ea6\u7684\u8303\u56f4\u6570\u7ec4 ranges \u4f8b\u5982\u4e0a\u9762\u7684\u6570\u7ec4 [1, 11]; function getDataRanges(extremes) { var ranges = []; for (var dimension in extremes) { ranges[dimension] = extremes[dimension].max - extremes[dimension].min; } return ranges; } // \u628a\u6bcf\u4e00\u4e2a\u7ef4\u5ea6\u7684\u53c2\u6570\u63d0\u53d6\u6210\u4e3a\u516c\u5171\u6570\u636e\uff0c\u83b7\u53d6\u516c\u5171\u6570\u7ec4\u7684\u6700\u503c\uff0c\u518d\u4f7f\u7528\u4e0a\u9762\u7684\u51fd\u6570\u83b7\u53d6\u4e0d\u540c\u7ef4\u5ea6\u7684\u8303\u56f4\u3002\u5728\u8fd9\u4e2a\u8303\u56f4\u4e2d\u8fdb\u884c\u5dee\u503c\uff0c\u9ed8\u8ba4k\uff0c\u8ba1\u7b97\u9ed8\u8ba4\u4e2d\u5fc3\u7684\u5e73\u5747\u503c\u3002 function getDataExtremes(points) { var extremes = []; for (var i in data) { var point = data[i]; for (var dimension in point) { // \u8bbe\u7f6e\u9ed8\u8ba4\u7684\u6700\u503c if (!extremes[dimension] ) { extremes[dimension] = {min: 1000, max: 0}; } // \u5982\u679c\u4e00\u4e2a\u503c\u5c0f\u4e8e\u6700\u503c\uff0c\u8fdb\u884c\u53d6\u4ee3 if (point[dimension] extremes[dimension].min) { extremes[dimension].min = point[dimension]; } if (point[dimension] extremes[dimension].max) { extremes[dimension].max = point[dimension]; } } } // \u6700\u7ec8\u8fd4\u56de\u8fd9\u4e2a\u6570\u7ec4\u7684\u6700\u503c\u96c6\u5408 return extremes; } getDataExtremes() \u51fd\u6570\u7528\u6765\u904d\u5386\u6bcf\u4e00\u4e2a\u6570\u636e\u70b9\u5e76\u5728\u6240\u6709\u7ef4\u5ea6\u4e0a\u627e\u51fa\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c(\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6709\u4e2a\u4e00\u4e2a\u786c\u7f16\u7801\u7684\u6570\u503c\u201c1000\u201d\uff0c\u4f60\u9700\u8981\u6839\u636e\u5177\u4f53\u60c5\u51b5\u505a\u6539\u53d8\uff09\u3002 getDataRanges() \u51fd\u6570\u7528\u6765\u8f85\u52a9\u8fd4\u56de\u6bcf\u4e2a\u7ef4\u5ea6\u7684\u8303\u56f4\uff08\u6700\u5927\u503c\u51cf\u53bb\u6700\u5c0f\u503c\uff09\u3002 \u4e0b\u4e00\u6b65\u6211\u4eec\u5b9a\u4e49 k \u4e2a\u7c07\u5e76\u521d\u59cb\u5176\u968f\u673a\u7684\u91cd\u5fc3\u4f4d\u7f6e function initMeans(k) { if (!k) { k = 3; } while (k--) { var mean = []; for (var dimension in dataExtremes) { mean[dimension] = dataExtremes[dimension].min + (Math.random() * dataRange[dimension]); } means.push(mean); } return means; }; \u7528\u8be5\u65b9\u6cd5\u6211\u4eec\u53ef\u4ee5\u5728\u6570\u636e\u96c6\u8303\u56f4\u4e4b\u5185\u968f\u673a\u5730\u751f\u6210\u51e0\u4e2a\u65b0\u7684\u6570\u636e\u70b9\uff0c\u4e00\u65e6\u6211\u4eec\u62e5\u6709\u4e86\u8fd9\u4e9b\u50cf\u79cd\u5b50\u4e00\u6837\u7684\u91cd\u5fc3\uff0c\u5c31\u53ef\u4ee5\u8fdb\u5165k-means\u5faa\u73af\u8fc7\u7a0b\u4e86\u3002\u5982\u524d\u6240\u8ff0\uff0c \u8be5\u5faa\u73af\u8fc7\u7a0b\u5305\u62ec\u9996\u6b21\u4e3a\u91cd\u5fc3\u5206\u914d\u6570\u636e\u96c6\u91cc\u79bb\u8be5\u91cd\u5fc3\u6700\u8fd1\u7684\u90a3\u4e9b\u70b9\u7ed9\u5b83\uff0c\u7136\u540e\u79fb\u52a8\u91cd\u5fc3\u4f4d\u7f6e\u5230\u8fbe\u8fd9\u4e9b\u70b9\u7684\u5e73\u5747\u91cd\u5fc3\u4f4d\u7f6e\uff0c\u91cd\u590d\u6b64\u8fc7\u7a0b\u76f4\u81f3\u91cd\u5fc3\u505c\u6b62\u79fb\u52a8\u3002 function makeAssignments() { for (var i in data) { var point = data[i]; var distances = []; for (var j in means) { var mean = means[j]; var sum = 0; for (var dimension in point) { var difference = point[dimension] - mean[dimension]; difference *= difference; sum += difference; } distances[j] = Math.sqrt(sum); } assignments[i] = distances.indexOf( Math.min.apply(null, distances) ); } } \u4e0a\u9762\u7684\u51fd\u6570\u4f1a\u88ab\u6211\u4eec\u7684\u904d\u5386\u51fd\u6570\u8c03\u7528\u4ee5\u8ba1\u7b97\u6bcf\u4e2a\u70b9\u4e4b\u95f4\u7684\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u548c\u7c07\u7684\u91cd\u5fc3\u4f4d\u7f6e\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u7b97\u6cd5\u4f1a\u904d\u5386\u6bcf\u4e00\u4e2a\u70b9\u5230\u7c07\u91cd\u5fc3\u7684\u8ddd\u79bb\uff0c\u8fd9\u662f\u4e00\u4e2a\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(k*n) \u7684\u7b97\u6cd5\uff0c\u590d\u6742\u5ea6\u4e0d\u662f\u5f88\u6050\u6016\uff0c\u4f46\u662f\u5982\u679c\u6570\u636e\u96c6\u6bd4\u8f83\u5e9e\u5927\u6216\u8005\u7c07\u7684\u6570\u76ee\u8f83\u591a\uff0c\u53ef\u80fd\u8ba1\u7b97\u5c31\u6bd4\u8f83\u5bc6\u96c6\u4e86\u3002\u4e0d\u8fc7\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u9014\u5f84\u6765\u4f18\u5316\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u7eed\u6587\u7ae0\u4e2d\u8c08\u5230\u3002\u6709\u4e00\u4e2a\u6211\u4eec\u73b0\u5728\u5c31\u53ef\u4ee5\u7740\u624b\u5904\u7406\u7684\u662fMath.sqrt()\u7684\u6548\u7387\u95ee\u9898\uff0c\u5176\u5b9e\u8fd9\u4e2a\u8c03\u7528\u4e0d\u5fc5\u51fa\u73b0\u5728\u5bf9\u6bcf\u4e2a\u70b9\u7684\u8fed\u4ee3\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u65e6\u786e\u5b9a\u4e86\u5206\u914d\u5217\u8868\uff0c\u672c\u4f8b\u4e2d\u8fd9\u4e2a\u5217\u8868\u5c31\u662f\u4e00\u7cfb\u5217\u70b9\u7684\u7d22\u5f15\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u6240\u6709\u70b9\u4f4d\u7f6e\u7684\u5e73\u5747\u503c\u6765\u66f4\u65b0\u7c07\u91cd\u5fc3\u7684\u4f4d\u7f6e\u4e86\u3002 \u8bd1\u8005\u6ce8\uff1a \u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u662f\u6307\u5728\u6b27\u5f0f\u7a7a\u95f4\u4e2d\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\uff0c\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff0c\u5047\u8bbep\uff0cq\u4e24\u70b9\u4e3a\u6b27\u5f0f\u7a7a\u95f4\u4e2d\u7684\u4e24\u4e2a\u70b9\uff0c\u5176\u5404\u81ea\u7684\u7a7a\u95f4\u5750\u6807\u4e3a\uff1a p(p1,p2,p3,... pn) q(q1,q2,q3,... qn) \u5219\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\u53ef\u8868\u793a\u4e3a\uff1a function moveMeans() { makeAssignments(); var sums = Array( means.length ); var counts = Array( means.length ); var moved = false; for (var j in means) { counts[j] = 0; sums[j] = Array( means[j].length ); for (var dimension in means[j]) { sums[j][dimension] = 0; } } for (var point_index in assignments){ var mean_index = assignments[point_index]; var point = data[point_index]; var mean = means[mean_index]; counts[mean_index]++; for (var dimension in mean){ sums[mean_index][dimension] += point[dimension]; } } for (var mean_index in sums){ // console.log(counts[mean_index]); if ( 0 === counts[mean_index] ) { sums[mean_index] = means[mean_index]; // console.log( Mean with no points ); // console.log(sums[mean_index]); for (var dimension in dataExtremes){ sums[mean_index][dimension] = dataExtremes[dimension].min + ( Math.random() * dataRange[dimension] ); } continue; } for (var dimension in sums[mean_index]) { sums[mean_index][dimension] /= counts[mean_index]; } } if (means.toString() !== sums.toString()) { moved = true; } means = sums; return moved; } moveMeans() \u65b9\u6cd5\u5728\u5f00\u59cb\u5904\u8c03\u7528 makeAssignments() \u3002\u4e00\u65e6\u5206\u914d\u5de5\u4f5c\u7ed3\u675f\uff0c\u6211\u4eec\u9700\u8981\u521d\u59cb\u5316\u4e24\u4e2a\u6570\u7ec4\uff1a\"sums\" \u548c \"counts\"\u3002\u65e2\u7136\u6211\u4eec\u8981\u8ba1\u7b97\u7b97\u6570\u5e73\u5747\u503c\uff0c\u6211\u4eec\u5c31\u9700\u8981\u77e5\u9053\u6240\u6709\u70b9\u5728\u6bcf\u4e2a\u7ef4\u5ea6\u4e0a\u7684\u603b\u548c\u8fd8\u6709\u70b9\u7684\u6570\u91cf\u3002 \u6211\u4eec\u542f\u7528\u4e09\u4e2a\u904d\u5386\u8fc7\u7a0b\uff1a \u4e00\uff1a\u904d\u5386\u6bcf\u4e2a\u7c07\u91cd\u5fc3\uff0c\u521d\u59cb\u5316\u6570\u7ec4sums\u5728\u6bcf\u4e2a\u7ef4\u5ea6\u4e0a\u7684\u503c\u4e3a0\uff0c\u4ee5\u53ca\u6570\u7ec4\u6570\u91cfcounts\u4e5f\u4e3a0\u3002\u6240\u4ee5sums\u6570\u7ec4\u662f\u4e00\u4e2a\u591a\u7ef4\u6570\u7ec4\uff0c\u539f\u56e0\u5c31\u5728\u4e8e\u6211\u4eec\u5904\u7406\u7684\u662f\u6bcf\u4e2a\u7c07\u4e2d\u7684\u6bcf\u4e2a\u70b9\u5728\u6bcf\u4e2a\u7ef4\u5ea6\u4e0a\u7684\u6570\u636e\u3002 \u4e8c\uff1a\u904d\u5386\u6bcf\u4e2a\u88ab\u5206\u914d\u7684\u6570\u636e\u70b9\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u7c07\u91cd\u5fc3\u62e5\u6709\u7684\u6570\u636e\u70b9\u7684\u6570\u91cf\uff0c\u5e76\u4e14\u904d\u5386\u6570\u636e\u70b9\u7684\u6240\u6709\u7ef4\u5ea6\u586b\u5145 sums \u6570\u7ec4\u3002\u5230\u6b64\uff0c\u6211\u4eec\u62e5\u6709\u4e86\u4e3a\u7c07\u91cd\u5fc3\u8ba1\u7b97\u65b0\u4f4d\u7f6e\u7684\u6240\u6709\u6570\u636e\u3002\u904d\u5386\u7ed3\u679c\uff0c\u4e3a\u6bcf\u4e2a\u7c07\u91cd\u5fc3\u8ba1\u7b97\u65b0\u7684\u5e73\u5747\u4f4d\u7f6e\uff0c\u5e76\u628a\u91cd\u5fc3\u79fb\u52a8\u5230\u8be5\u4f4d\u7f6e\u3002 \u4e09\uff1a\u68c0\u6d4b\u7c07\u91cd\u5fc3\u662f\u5426\u8fd8\u6709\u6570\u636e\u88ab\u5206\u914d\u7ed9\u5b83\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u6211\u4eec\u5c31\u7ed9\u5b83\u4e00\u4e2a\u968f\u673a\u7684\u65b0\u4f4d\u7f6e\uff0c\u5c31\u662f\u6211\u4eec\u4e4b\u524d\u8bf4\u7684\u8e22\u5b83\u4e00\u811a\u3002 \u6700\u540e\uff0c\u5de1\u89c6\u6240\u6709\u7684\u7c07\u91cd\u5fc3\u662f\u5426\u8fd8\u6709\u79fb\u52a8\u60c5\u51b5\uff0c\u5e76\u8fd4\u56de\u771f\u6216\u5047\u3002\u4f7f\u7528\u5982\u4e0b setup \u51fd\u6570\u5f00\u59cb\u6267\u884c\u7b97\u6cd5\uff1a function setup() { canvas = document.getElementById('canvas'); ctx = canvas.getContext('2d'); dataExtremes = getDataExtremes(data); dataRange = getDataRanges(dataExtremes); means = initMeans(3); makeAssignments(); draw(); setTimeout(run, drawDelay); } function run() { var moved = moveMeans(); draw(); if (moved) { setTimeout(run, drawDelay); } } \u6211\u4eec\u9700\u8981\u7684\u8bbe\u5b9a\u90fd\u5728 setup()\u4e2d\u521d\u59cb\u5316\u5b8c\u6210\uff0c\u4e4b\u540e run() \u51fd\u6570\u68c0\u6d4b\u7b97\u6cd5\u662f\u5426\u505c\u6b62\u4e86\uff0c\u5e76\u6839\u636e\u65f6\u949f\u7684\u95f4\u9694\u8bbe\u5b9a\u5faa\u73af\u6267\u884c\uff0c\u6211\u4eec\u4e5f\u5c31\u80fd\u5b9e\u65f6\u770b\u5230\u7b97\u6cd5\u7684\u8fd0\u884c\u60c5\u51b5\u4e86\u3002 k-medians \u4f7f\u7528\u52a0\u6743\u5e73\u5747\uff0c\u7ed3\u679c\u53ef\u80fd\u53d7\u5230\u6781\u503c\u5f71\u54cd\uff0c\u4f7f\u7528\u4e2d\u503c\u8fdb\u884c\u805a\u7c7b\u6548\u679c\u66f4\u597d\u3002 k-means\u7b97\u6cd5\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5176\u5b9e\u5e76\u4e0d\u662f\u7b97\u6cd5\u672c\u8eab\u7684\u95ee\u9898\uff0c\u800c\u662f\u7b97\u6570\u5e73\u5747\u503c\u81ea\u8eab\u5b58\u5728\u7684\u7f3a\u9677\uff0c\u5c31\u662f\u5f53\u6570\u636e\u4e2d\u51fa\u73b0\u4e86\u67d0\u4e9b\u6570\u636e\u98de\u5730\uff08\u504f\u79bb\u6574\u4f53\u6570\u636e\u5f88\u8fdc\uff09\uff0c\u4f1a\u7ed9\u7b97\u6570\u5e73\u5747\u503c\u5e26\u6765\u4e0d\u5229\u5f71\u54cd\u3002\u6bd4\u5982\uff0c\u4f60\u6240\u5728\u7684\u516c\u53f8\u6709\u4e94\u4e2a\u4eba\u6bcf\u5e74\u7684\u85aa\u6c34\u662f5\u4e07\u5143\uff0c\u4f46\u662f\u6709\u53e6\u5916\u4e00\u4e2a\u4eba\u6bcf\u5e74\u7684\u85aa\u6c34\u9ad8\u8fbe100\u4e07\uff0c\u90a3\u4e48\u85aa\u6c34\u4e2d\u95f4\u503c\u4f1a\u662f5\u4e07\uff08\u80fd\u4ee3\u8868\u516c\u53f8\u7684\u85aa\u6c34\u60c5\u51b5\uff09\uff0c\u800c\u5e73\u5747\u503c\u8fbe\u5230\u4e8620\u4e07\uff08\u5b8c\u5168\u4e0d\u80fd\u4ee3\u8868\u516c\u53f8\u85aa\u8d44\u60c5\u51b5\uff09\uff01 \u8fd9\u79cd\u95ee\u9898\u5f53\u7136\u4e5f\u4f1a\u5728k-means\u7b97\u6cd5\u4e2d\u53d1\u751f\u3002\u5982\u679c\u4f60\u62ff\u5230\u7684\u6570\u636e\u4e2d\u6709\u98de\u5730\u60c5\u51b5\uff0c\u4f60\u4f1a\u53d1\u73b0k-means\u7b97\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u5f88\u7cdf\u7cd5\uff0c\u4e00\u4e2a\u89e3\u51b3\u529e\u6cd5\u5c31\u662f\u4f7f\u7528 k-medians \u4ee3\u66ff k-means, \u4e8c\u8005\u7b97\u6cd5\u76f8\u4f3c\uff0c\u53ea\u662f\u7528\u4e2d\u503c\u4ee3\u66ff\u5e73\u5747\u503c\uff0c\u8fd9\u6837\u53ef\u4ee5\u6ee4\u6389\u6570\u636e\u98de\u5730\u7684\u5f71\u54cd\u3002\u53e6\u5916\uff0c\u6211\u8ba4\u4e3a\u5728\u8ba1\u7b97\u6548\u7387\u4e0a\u4e5f\u4f1a\u6bd4\u5e73\u5747\u503c\u6cd5\u66f4\u9ad8\u6548\u3002 \u7ed3\u679c k-meeans \u7b97\u6cd5\u5bf9\u4e8e\u6211\u4eec\u5b9a\u4e49\u7684\u6574\u6d01\u5e72\u51c0\u7684\u6570\u636e\u6765\u8bf4\u8fd0\u884c\u7684\u975e\u5e38\u5b8c\u7f8e\u3002\u5f88\u663e\u7136\uff0c\u5982\u679c\u6570\u636e\u810f\u4e71\uff0c\u4e5f\u4f1a\u50cf\u5176\u5b83\u7b97\u6cd5\u4e00\u6837\u9047\u5230\u56f0\u96be\u3002\u5982\u679c\u4e0d\u538c\u5176\u70e6\u5730\u591a\u8fd0\u884c\u51e0\u6b21\u6211\u7684\u4ee3\u7801\uff0c\u4f60\u4e5f\u4f1a\u9047\u5230\u9677\u4e8e\u5c40\u90e8\u6700\u4f18\u89e3\u7684\u95ee\u9898\u3002\u8fd9\u5c31\u9700\u8981\u901a\u8fc7\u201c\u673a\u5668\u59d4\u5458\u4f1a\u201d\u7684\u6280\u5de7\u6765\u89e3\u51b3\u4e86\uff1a\u901a\u8fc7\u4e00\u6b21\u6b21\u7684\u8fd0\u884c\uff0c \u90a3\u4e9b\u7ecf\u5e38\u5f97\u51fa\u7684\u7ed3\u679c\u5c31\u662f\u6211\u4eec\u8981\u7684\u7b54\u6848 \u3002","title":"\u805a\u7c7b\u7b97\u6cd5"},{"location":"K-means/#k-means","text":"\u5728\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u7684\u5e2e\u52a9\u4e0b\u6211\u4eec\u80fd\u591f\u5904\u7406\u4f53\u91cf\u5de8\u5927\u7684\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u5411\u6570\u636e\u8be2\u95ee\u4e00\u7cfb\u5217\u7684\u95ee\u9898\uff0c\u5e0c\u671b\u673a\u5668\u5b66\u4e60\u80fd\u7ed9\u51fa\u7b54\u6848\u3002\u6bd4\u5982\uff1a\u67d0\u4e2a\u6570\u636e\u70b9\u548c\u54ea\u4e9b\u76f8\u4f3c\uff1f\u901a\u8fc7\u5bf9\u8fd9\u4e9b\u6570\u636e\u7684\u5206\u6790\u80fd\u5426\u603b\u7ed3\u51fa\u67d0\u79cd\u6a21\u5f0f\uff1f\u7ed9\u51fa\u5386\u53f2\u8d8b\u52bf\u6570\u636e\u7684\u524d\u63d0\u4e0b\uff0c\u80fd\u5426\u5224\u65ad\u672a\u6765\u8d70\u52bf? \u8bf8\u5982\u6b64\u7c7b\u7684\u95ee\u9898\u90fd\u9002\u7528\u4e8e\u5728\u673a\u5668\u5b66\u4e60\u9886\u57df\u5bfb\u627e\u7b54\u6848\u3002","title":"K-means \u805a\u7c7b\u7b97\u6cd5"},{"location":"K-means/#_1","text":"\u4eca\u5929\u7684\u8bae\u9898\u662f\u600e\u4e48\u628a\u6570\u636e\u5206\u7c7b\u3002\u6bd4\u5982\uff0c\u4f60\u6b63\u5728\u4e3a\u4e00\u5bb6\u533b\u7597\u5f71\u50cf\u8bbe\u5907\u516c\u53f8\u5de5\u4f5c\uff0c\u5047\u5982\u4f60\u5df2\u7ecf\u627e\u5230\u4e86\u8bc6\u522b\u80bf\u7624\u7ec6\u80de\u7684\u65b9\u6cd5\uff0c\u4f46\u662f\u5982\u679c\u80fd\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u627e\u51fa\u80bf\u7624\u7ec6\u80de\u7fa4\u7684\u4e2d\u5fc3\u4f4d\u7f6e\u5c31\u66f4\u597d\u4e86\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528\u673a\u5668\u4eba\u7cbe\u51c6\u5730\u8fbe\u5230\u76ee\u7684\u5730\u5e76\u6e05\u9664\u5b83\u4eec\u3002\u6211\u4eec\u9700\u8981\u627e\u51fa\u4e00\u79cd\u805a\u7c7b\u7b97\u6cd5\uff0c\u8fd9\u5c31\u662f\u4eca\u5929\u8981\u7279\u522b\u8ba8\u8bba\u7684 k-means\u3002","title":"\u95ee\u9898\u6765\u6e90"},{"location":"K-means/#_2","text":"\u805a\u7c7b\u7b97\u6cd5\u901a\u5e38\u6765\u8bb2\u5c31\u662f\u8981\u6309\u7167\u76f8\u4f3c\u6027\u7ed9\u6570\u636e\u5206\u7c7b\u3002\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u7535\u5546\u7ecf\u8425\u8005\uff0c\u5c31\u53ef\u4ee5\u7528\u805a\u7c7b\u7b97\u6cd5\u8bc6\u522b\u51fa\u5404\u79cd\u8d2d\u7269\u8005\u7684\u7c7b\u578b\u3002\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u6709\u4e00\u79cd\u987e\u5ba2\u5728\u6d4f\u89c8\u4e09\u4e94\u4e2a\u4ea7\u54c1\u9875\u9762\u4e4b\u540e\u5c31\u4f1a\u4e0b\u5355\u8d2d\u4e70\uff0c\u53e6\u5916\u4e00\u7ec4\u7528\u6237\u53ef\u80fd\u9700\u8981\u6d4f\u89c8\u591a\u8fbe15\u4e2a\u9875\u9762\u8fd8\u8981\u770b\u5f88\u591a\u8bc4\u8bba\u624d\u51b3\u5b9a\u8d2d\u4e70\uff0c\u800c\u4e14\u4f1a\u662f\u4e00\u5355\u9ad8\u4ef7\u503c\u7684\u8d2d\u4e70\u884c\u4e3a\uff0c\u53e6\u5916\u4f60\u53ef\u80fd\u8fd8\u4f1a\u6ce8\u610f\u5230\u6709\u4e00\u7ec4\u51b2\u52a8\u6d88\u8d39\u578b\u7684\u7528\u6237\uff0c\u4ed6\u4eec\u4e0d\u7528\u6d4f\u89c8\u592a\u6df1\u5165\u5c31\u4f1a\u53d1\u751f\u591a\u6b21\u5c0f\u989d\u8d2d\u4e70\u884c\u4e3a\u3002\u4e00\u65e6\u5b8c\u6210\u4e86\u5bf9\u8fd9\u4e9b\u7ebf\u4e0a\u6d88\u8d39\u8005\u7684\u4eba\u53e3\u8c03\u67e5\uff0c\u4f60\u5c31\u80fd\u66f4\u597d\u5730\u4f18\u5316\u7ad9\u70b9\u63d0\u9ad8\u9500\u552e\u989d\u3002\u56e0\u4e3a\u77e5\u9053\u4e86\u81ea\u5df1\u7684\u5ba2\u6237\u4e2d\u5b58\u5728\u51b2\u52a8\u578b\u6d88\u8d39\u8005\uff0c\u4f60\u5c31\u53ef\u4ee5\u9488\u5bf9\u6027\u5730\u6dfb\u52a0\u4e00\u4e9b\u529f\u80fd\u523a\u6fc0\u8fd9\u90e8\u5206\u6d88\u8d39\u8005\u3002","title":"\u805a\u7c7b\u7b97\u6cd5"},{"location":"K-means/#k-means_1","text":"\u548c\u8fd1\u90bb\u7b97\u6cd5\uff08k-nearest-neighbor\uff09\u4e00\u6837\uff0ck-means \u4e2d\u7684 k \u4e5f\u662f\u4e00\u4e2a\u6570\u91cf\u503c\uff0c\u662f\u7b97\u6cd5\u4e2d\u7684\u91cd\u8981\u53c2\u6570\u3002\u9700\u8981\u7279\u522b\u6307\u51fa\u7684\u662f\uff0c\u8fd9\u91cc\u7684 \u201ck\u201d \u5c31\u662f\u6211\u4eec\u8981\u5728\u6570\u636e\u4e2d\u627e\u51fa\u6765\u7684\u7c07\uff08\u5206\u7ec4\uff09\u7684\u6570\u91cf\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5f88\u96be\u5728\u95ee\u9898\u89e3\u51b3\u524d\u77e5\u6653\u8fd9\u4e2a\u6570\u91cf\u503c\uff0c\u6240\u4ee5 k-means \u7b97\u6cd5\u901a\u5e38\u9700\u8981\u5728 \u53e6\u5916\u4e00\u4e2a\u7b97\u6cd5\u7684\u5e2e\u52a9\u4e0b\u627e\u5230\u6700\u6070\u5f53\u7684 k \u503c \u3002 \u95ee\u9898\u662f k-means \u7b97\u6cd5\u4f1a\u628a\u6570\u636e\u5206\u5272\u6210 k \u4e2a\u72ec\u7279\u7684\u7c07\uff0c \u4f46\u662f\u7b97\u6cd5\u4e0d\u4f1a\u544a\u8bc9\u4f60 k \u503c\u662f\u5426\u6b63\u786e\u3002\u6bd4\u5982\uff0c\u4f60\u7684\u6570\u636e\u5728\u7406\u60f3\u60c5\u51b5\u4e0b\u5e94\u8be5\u88ab\u5206\u62105\u4e2a\u7c07\uff0c\u4f46\u662f\u5982\u679c\u4eba\u4e3a\u5730\u628a k \u8bbe\u5b9a\u4e3a3\uff0c\u90a3\u4e48\u4f60\u5c31\u4f1a\u5f97\u52303\u4e2a\u7c07\uff0c\u5f53\u7136\u8fd9\u4e9b\u7c07\u7684\u89c4\u6a21\u80af\u5b9a\u5927\u4e86\u4e00\u4e9b\uff0c\u76f8\u5bf9\u4e8e\u7406\u60f3\u72b6\u6001\u4e0b\u76845\u4e2a\u7c07\uff0c\u7cbe\u786e\u5ea6\u4e5f\u4e0b\u964d\u4e86\u3002 \u8fd9\u4e2a\u7b97\u6cd5\u6709\u4f18\u70b9\u4e5f\u6709\u77ed\u677f\uff0c\u4e3a\u4e86\u4f7f\u7528 k-means \u7b97\u6cd5\u4f60\u9700\u8981\u9884\u5148\u77e5\u9053k\u7684\u503c\uff0c\u6216\u8005\u7528\u53e6\u5916\u7684\u7b97\u6cd5\u5e2e\u4f60\u731c\u6d4b\u8fd9\u4e2a\u503c\u3002 k-means \u53ea\u662f\u5e2e\u4f60\u628a\u6570\u636e\u5206\u5230\u4e0d\u540c\u7684\u7c7b\u522b\u91cc\uff0c\u4f60\u8fd8\u9700\u8981\u505a\u4e9b\u989d\u5916\u7684\u5de5\u4f5c\u627e\u5230\u7c07\u7684\u5408\u9002\u6570\u76ee\u3002 \u5728\u4eca\u5929\u4f8b\u5b50\u4e2d\u6211\u4eec\u5148\u8bbe\u5b9a\u7c07\u7684\u6570\u76ee\u4e3a3\uff0c\u4e0b\u4e00\u7bc7\u6587\u7ae0\u5c06\u4f1a\u8ba8\u8bba\u81ea\u52a8\u731c\u6d4b k \u503c\u7684\u7b97\u6cd5\uff0c\u6700\u5e38\u7528\u5230\u7684\u5c31\u662f \u8bef\u5dee\u5206\u6790\u6cd5 \u7ed3\u5408 \u53cd\u590d\u8c03\u7528 k-means \u7b97\u6cd5\u4ee5\u4f18\u5316\u7ed3\u679c \uff0c\u4f7f\u8bef\u5dee\u6700\u5c0f\u5316\u3002","title":"k-means"},{"location":"K-means/#_3","text":"\u867d\u7136 k-means \u7b97\u6cd5\u7b80\u5355\uff0c\u4f46\u662f\u5982\u679c\u7528\u5728\u591a\u7ef4\u6570\u636e\u96c6\u4e0a\u4f1a\u8868\u73b0\u51fa\u5b83\u5f3a\u5927\u7684\u751f\u547d\u529b\u3002\u4eca\u5929\u6211\u4eec\u4f1a\u5904\u7406\u4e00\u7ec42\u7ef4\u6570\u636e\uff0c\u4e0b\u6b21\u6211\u4eec\u518d\u628a\u5b83\u505a\u7684\u590d\u6742\u4e9b\u3002 \u7b97\u6cd5\u8fc7\u7a0b\u5982\u4e0b\uff1a \u4ee5\u6563\u70b9\u56fe\u7684\u65b9\u5f0f\uff0c\u53ef\u89c6\u5316\u6570\u636e\u3002 \u521b\u5efa k \u4e2a\u65b0\u7684\u6570\u636e\u70b9\uff0c\u968f\u673a\u5206\u5e03\u5728\u56fe\u4e0a\uff0c\u628a\u8fd9\u4e9b\u6570\u636e\u70b9\u4f5c\u4e3a\u7c07\u7684\u201c\u91cd\u5fc3\u201d\uff0c\u4e5f\u79f0\u201c\u7c07\u91cd\u5fc3\u5907\u9009\u8005\u201d\u3002 \u91cd\u590d\u4e0b\u9762\u7684\u8fc7\u7a0b\uff1a \u628a\u8ddd\u79bb\u91cd\u5fc3\u6700\u8fd1\u7684\u90a3\u4e9b\u6570\u636e\u70b9\u5206\u914d\u7ed9\u5b83 \u79fb\u52a8\u91cd\u5fc3\u7684\u4f4d\u7f6e\u5230\u6240\u6709\u5c5e\u4e8e\u5b83\u7684\u6570\u636e\u70b9\u7684\u5e73\u5747\u4f4d\u7f6e\u4e0a \u5982\u679c\u91cd\u5fc3\u7684\u4f4d\u7f6e\u5728\u6700\u540e\u4e00\u6b65\u4e2d\u79fb\u52a8\u4e86\uff0c\u7ee7\u7eed\u91cd\u590d\u4e0a\u8bc9\u8fc7\u7a0b\uff0c\u5426\u5219\u9000\u51fa\u3002 \u8fd9\u662f\u4e00\u4e2a\u8fed\u4ee3\u8fc7\u7a0b\u3002\u53ef\u80fd\u4f1a\u8fed\u4ee3\u4e24\u4e09\u6b21\u751a\u81f3\u6570\u5341\u6b21\uff0c\u4f46\u662f\u6700\u7ec8\u4f60\u7684\u7c07\u91cd\u5fc3\u4f1a\u9760\u8fd1\u76ee\u7684\u5730\u5e76\u505c\u6b62\u79fb\u52a8\uff0c\u6700\u540e\u4f1a\u5f97\u5230\u4f60\u60f3\u8981\u7684\u7c07\u96c6\u5408\u3002","title":"\u8fc7\u7a0b"},{"location":"K-means/#_4","text":"\u8be5\u7b97\u6cd5\u548c\u5f88\u591a\u6211\u4eec\u5728\u8fd9\u4e2a\u7cfb\u5217\u4e2d\u5c06\u8981\u8bb2\u5230\u7b97\u6cd5\u7684\u4e00\u6837\uff0c\u5bb9\u6613\u9677\u5165 \u5c40\u90e8\u6700\u4f18\u89e3 \u3002\u5982\u679c\u4f60\u591a\u8fd0\u884c\u4e0b\u9762\u7684\u4f8b\u5b50\u51e0\u6b21\uff0c\u5c31\u4f1a\u53d1\u73b0\u6bcf\u6b21\u5f97\u5230\u7684\u7ed3\u679c\u90fd\u4f1a\u6709\u5dee\u522b\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u4e9b\u7ed3\u679c\u9677\u5165\u4e86\u4e0d\u540c\u7684\u5c40\u90e8\u6700\u4f18\u89e3\u3002 \u7b97\u6cd5\u4ece\u4e00\u4e9b\u968f\u673a\u7684\uff0c\u672c\u8eab\u5c31\u5bb9\u6613\u53d7\u5c40\u90e8\u6700\u4f18\u5f71\u54cd\u7684\u79cd\u5b50\u5f00\u59cb\uff0c\u56e0\u4e3a\u6c38\u8fdc\u4e0d\u77e5\u9053\u7b97\u6cd5\u5177\u4f53\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u679c\u7684\u8d70\u5411\uff0c\u79cd\u5b50\u7684\u72b6\u6001\u4f1a\u5bfc\u81f4\u5c40\u90e8\u6700\u4f18\u8fd8\u662f\u5168\u5c40\u6700\u4f18\uff1f\u8fd9\u4e9b\u90fd\u65e0\u4ece\u77e5\u6653\u3002\u5c31\u50cf\u9057\u4f20\u7b97\u6cd5\u4e00\u6837\uff0c\u80fd\u8df3\u51fa\u5c40\u90e8\u6700\u4f18\u89e3\u7684\u4e00\u4e2a\u65b9\u6cd5\u5c31\u662f\u4f7f\u201c\u89e3\u201d\u53d1\u751f\u4e00\u70b9\u513f\u7a81\u53d8\u3002\u5728\u6b64 k-means \u4f8b\u5b50\u4e2d, \u6211\u4eec\u4f1a\u5728\u7b97\u6cd5\u4e2d\u52a0\u5165\u4e00\u6761\u89c4\u5219\uff0c \u5c31\u662f\u5f53\u53d1\u73b0\u91cd\u5fc3\u6570\u636e\u70b9\u7ecf\u8fc7\u4e00\u8f6e\u8fed\u4ee3\u540e\u6ca1\u6709\u53d1\u751f\u79fb\u52a8\uff0c\u90a3\u4e48\u5c31\u5728\u4e00\u4e2a\u5728\u968f\u673a\u65b9\u5411\u4e0a\u63a8\u4e00\u628a \u3002\u7ed3\u679c\u5c31\u662f\u5b83\u53ef\u80fd\u53c8\u56de\u5230\u4e86\u539f\u6765\u7684\u4f4d\u7f6e\uff0c\u4e5f\u53ef\u80fd\u627e\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u89e3\u3002\u8fd9\u4e2a\u63a8\u52a8\u4e0d\u8981\u5927\u5230\u8ba9\u8ba1\u7b97\u4ece\u56de\u8d77\u70b9\uff0c\u4f46\u662f\u4e5f\u8981\u8db3\u591f\u628a\u5b83\u8e22\u51fa\u67d0\u4e2a\u5c40\u90e8\u6700\u4f18\u533a\u57df\u3002\u53e6\u5916\u4e00\u4e2a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7684\u6280\u5de7\u88ab\u79f0\u4e4b\u4e3a\u201c\u673a\u5668\u59d4\u5458\u4f1a\u201d\uff0c\u5982\u679c\u4f60\u7684\u7b97\u6cd5\u80fd\u7ed3\u675f\u7684\u5f88\u5feb\u6216\u8005\u80fd\u4f7f\u7528\u5e76\u884c\u8ba1\u7b97\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6280\u5de7\u5f88\u7ba1\u7528\u3002\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u8fd0\u884c k-means \u7b97\u6cd53\u6b21\uff0c5\u6b21\uff0c51\u6b21\u621610000\u6b21\uff0c\u9009\u62e9\u90a3\u4e9b\u6700\u7ecf\u5e38\u5f97\u5230\u7684\u89e3\u3002\u201c\u673a\u5668\u59d4\u5458\u4f1a\u201d \u662f\u6307\u4e00\u4e9b\u4eba\u9009\u62e9\u5728\u4e0d\u540c\u786c\u4ef6\u4e0a\u8fd0\u884c\u5e76\u884c\u7b97\u6cd5\uff0c\u4e00\u4e2a\u5b57\u9762\u4e0a\u7684\u673a\u5668\u59d4\u5458\u4f1a\u80fd\u7ed9\u8fd9\u4e9b\u201c\u89e3\u201d\u6295\u7968\u3002","title":"\u5c40\u9650\u6027"},{"location":"K-means/#_5","text":"\u6211\u4eec\u5f00\u59cb\u4ee3\u7801\u90e8\u5206\uff0c\u548c\u81f3\u4eca\u4e3a\u6b62\u7684\u5176\u4ed6\u4f8b\u5b50\u4e0d\u540c\uff0c\u6211\u4f1a\u653e\u5f03\u9762\u5411\u5bf9\u8c61\u7684\u65b9\u6cd5\u800c\u91c7\u7528\u76f4\u63a5\u4e86\u5f53\u7684\u7b56\u7565\u3002\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u6211\u559c\u6b22OOP\uff0c\u4f46\u662f\u91cd\u70b9\u662f\u4e0d\u8981\u592a\u4f9d\u8d56\u4e8e\u4e60\u60ef\uff0c\u8fd8\u6709\u5c31\u662f\u6211\u4eec\u5728\u4f8b\u5b50\u4e2d\u4f7f\u7528\u7684\u6570\u636e\u53ea\u662f\u4e8c\u7ef4\u7684\uff0c\u6211\u613f\u610f\u628a\u8fd9\u4e2a\u7b97\u6cd5\u5199\u6210\u53ef\u4ee5\u5904\u7406\u4efb\u4f55\u7ef4\u5ea6\u7684\u6570\u636e\u3002\u73b0\u5728\u6765\u770b\u770b\u6211\u4eec\u8981\u4f7f\u7528\u5230\u7684\u6570\u636e\uff0c\u975e\u5e38\u7b80\u5355\u7684\u6570\u7ec4\uff0c\u6bcf\u4e2a\u6570\u636e\u4e2d\u7684\u4e24\u4e2a\u503c\u5206\u522b\u8868\u793ax\uff0cy\u3002 var data = [ [1, 2], [2, 1], [2, 4], [1, 3], [2, 2], [3, 1], [1, 1], [7, 3], [8, 2], [6, 4], [7, 4], [8, 1], [9, 2], [10, 8], [9, 10], [7, 8], [7, 9], [8, 11], [9, 9], ]; \u63a5\u4e0b\u6765\u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u65b9\u6cd5\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u70b9\u7684\u5217\u8868\uff0c\u6211\u60f3\u77e5\u9053\u5176\u4e2d\u5728x\u548cy\u4e24\u4e2a\u65b9\u5411\u4e0a\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u8fd8\u6709\u5728\u4e24\u4e2a\u65b9\u5411\u4e0a\u7684\u8de8\u5ea6\uff08\u5faa\u73af\u6570\u7ec4\uff0c\u8ba1\u7b97\u6570\u7ec4\u5185\u90e8 X \u548c Y\u7684\u6700\u503c\uff0c\u7136\u540e\u6c42\u8303\u56f4\uff09\u3002\u6bd4\u5982\u5728X\u65b9\u5411\u4e0a\u662f\u4ece1\u523011\uff0c\u5728Y\u65b9\u5411\u4e0a\u662f\u4ece3\u52307\uff0c\u4e86\u89e3\u8fd9\u4e9b\u6709\u5229\u4e8e\u6211\u4eec\u968f\u673a\u4ea7\u751f\u7c07\u91cd\u5fc3\u65f6\u53c2\u8003\u3002 \u6211\u4eec\u5e94\u8be5\u5728\u5934\u8111\u4e2d\u59cb\u7ec8\u4fdd\u6301\u4e00\u4e2a\u7406\u5ff5\uff0c \u5c31\u662f\u8981\u8ba9\u51fd\u6570\u5728\u5904\u7406\u4e0d\u540c\u7ef4\u5ea6\u7684\u6570\u636e\u65f6\u5177\u6709\u901a\u7528\u6027 \uff1a // \u7ed9\u5b9a\u4e00\u4e2an\u7ef4\u6570\u7ec4extremes\uff0c\u83b7\u53d6\u8fd9\u4e2a\u6570\u7ec4\u5728\u4e0d\u540c\u7ef4\u5ea6\u7684\u8303\u56f4\u6570\u7ec4 ranges \u4f8b\u5982\u4e0a\u9762\u7684\u6570\u7ec4 [1, 11]; function getDataRanges(extremes) { var ranges = []; for (var dimension in extremes) { ranges[dimension] = extremes[dimension].max - extremes[dimension].min; } return ranges; } // \u628a\u6bcf\u4e00\u4e2a\u7ef4\u5ea6\u7684\u53c2\u6570\u63d0\u53d6\u6210\u4e3a\u516c\u5171\u6570\u636e\uff0c\u83b7\u53d6\u516c\u5171\u6570\u7ec4\u7684\u6700\u503c\uff0c\u518d\u4f7f\u7528\u4e0a\u9762\u7684\u51fd\u6570\u83b7\u53d6\u4e0d\u540c\u7ef4\u5ea6\u7684\u8303\u56f4\u3002\u5728\u8fd9\u4e2a\u8303\u56f4\u4e2d\u8fdb\u884c\u5dee\u503c\uff0c\u9ed8\u8ba4k\uff0c\u8ba1\u7b97\u9ed8\u8ba4\u4e2d\u5fc3\u7684\u5e73\u5747\u503c\u3002 function getDataExtremes(points) { var extremes = []; for (var i in data) { var point = data[i]; for (var dimension in point) { // \u8bbe\u7f6e\u9ed8\u8ba4\u7684\u6700\u503c if (!extremes[dimension] ) { extremes[dimension] = {min: 1000, max: 0}; } // \u5982\u679c\u4e00\u4e2a\u503c\u5c0f\u4e8e\u6700\u503c\uff0c\u8fdb\u884c\u53d6\u4ee3 if (point[dimension] extremes[dimension].min) { extremes[dimension].min = point[dimension]; } if (point[dimension] extremes[dimension].max) { extremes[dimension].max = point[dimension]; } } } // \u6700\u7ec8\u8fd4\u56de\u8fd9\u4e2a\u6570\u7ec4\u7684\u6700\u503c\u96c6\u5408 return extremes; } getDataExtremes() \u51fd\u6570\u7528\u6765\u904d\u5386\u6bcf\u4e00\u4e2a\u6570\u636e\u70b9\u5e76\u5728\u6240\u6709\u7ef4\u5ea6\u4e0a\u627e\u51fa\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c(\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u6709\u4e2a\u4e00\u4e2a\u786c\u7f16\u7801\u7684\u6570\u503c\u201c1000\u201d\uff0c\u4f60\u9700\u8981\u6839\u636e\u5177\u4f53\u60c5\u51b5\u505a\u6539\u53d8\uff09\u3002 getDataRanges() \u51fd\u6570\u7528\u6765\u8f85\u52a9\u8fd4\u56de\u6bcf\u4e2a\u7ef4\u5ea6\u7684\u8303\u56f4\uff08\u6700\u5927\u503c\u51cf\u53bb\u6700\u5c0f\u503c\uff09\u3002 \u4e0b\u4e00\u6b65\u6211\u4eec\u5b9a\u4e49 k \u4e2a\u7c07\u5e76\u521d\u59cb\u5176\u968f\u673a\u7684\u91cd\u5fc3\u4f4d\u7f6e function initMeans(k) { if (!k) { k = 3; } while (k--) { var mean = []; for (var dimension in dataExtremes) { mean[dimension] = dataExtremes[dimension].min + (Math.random() * dataRange[dimension]); } means.push(mean); } return means; }; \u7528\u8be5\u65b9\u6cd5\u6211\u4eec\u53ef\u4ee5\u5728\u6570\u636e\u96c6\u8303\u56f4\u4e4b\u5185\u968f\u673a\u5730\u751f\u6210\u51e0\u4e2a\u65b0\u7684\u6570\u636e\u70b9\uff0c\u4e00\u65e6\u6211\u4eec\u62e5\u6709\u4e86\u8fd9\u4e9b\u50cf\u79cd\u5b50\u4e00\u6837\u7684\u91cd\u5fc3\uff0c\u5c31\u53ef\u4ee5\u8fdb\u5165k-means\u5faa\u73af\u8fc7\u7a0b\u4e86\u3002\u5982\u524d\u6240\u8ff0\uff0c \u8be5\u5faa\u73af\u8fc7\u7a0b\u5305\u62ec\u9996\u6b21\u4e3a\u91cd\u5fc3\u5206\u914d\u6570\u636e\u96c6\u91cc\u79bb\u8be5\u91cd\u5fc3\u6700\u8fd1\u7684\u90a3\u4e9b\u70b9\u7ed9\u5b83\uff0c\u7136\u540e\u79fb\u52a8\u91cd\u5fc3\u4f4d\u7f6e\u5230\u8fbe\u8fd9\u4e9b\u70b9\u7684\u5e73\u5747\u91cd\u5fc3\u4f4d\u7f6e\uff0c\u91cd\u590d\u6b64\u8fc7\u7a0b\u76f4\u81f3\u91cd\u5fc3\u505c\u6b62\u79fb\u52a8\u3002 function makeAssignments() { for (var i in data) { var point = data[i]; var distances = []; for (var j in means) { var mean = means[j]; var sum = 0; for (var dimension in point) { var difference = point[dimension] - mean[dimension]; difference *= difference; sum += difference; } distances[j] = Math.sqrt(sum); } assignments[i] = distances.indexOf( Math.min.apply(null, distances) ); } } \u4e0a\u9762\u7684\u51fd\u6570\u4f1a\u88ab\u6211\u4eec\u7684\u904d\u5386\u51fd\u6570\u8c03\u7528\u4ee5\u8ba1\u7b97\u6bcf\u4e2a\u70b9\u4e4b\u95f4\u7684\u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u548c\u7c07\u7684\u91cd\u5fc3\u4f4d\u7f6e\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u7b97\u6cd5\u4f1a\u904d\u5386\u6bcf\u4e00\u4e2a\u70b9\u5230\u7c07\u91cd\u5fc3\u7684\u8ddd\u79bb\uff0c\u8fd9\u662f\u4e00\u4e2a\u8ba1\u7b97\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(k*n) \u7684\u7b97\u6cd5\uff0c\u590d\u6742\u5ea6\u4e0d\u662f\u5f88\u6050\u6016\uff0c\u4f46\u662f\u5982\u679c\u6570\u636e\u96c6\u6bd4\u8f83\u5e9e\u5927\u6216\u8005\u7c07\u7684\u6570\u76ee\u8f83\u591a\uff0c\u53ef\u80fd\u8ba1\u7b97\u5c31\u6bd4\u8f83\u5bc6\u96c6\u4e86\u3002\u4e0d\u8fc7\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u9014\u5f84\u6765\u4f18\u5316\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u7eed\u6587\u7ae0\u4e2d\u8c08\u5230\u3002\u6709\u4e00\u4e2a\u6211\u4eec\u73b0\u5728\u5c31\u53ef\u4ee5\u7740\u624b\u5904\u7406\u7684\u662fMath.sqrt()\u7684\u6548\u7387\u95ee\u9898\uff0c\u5176\u5b9e\u8fd9\u4e2a\u8c03\u7528\u4e0d\u5fc5\u51fa\u73b0\u5728\u5bf9\u6bcf\u4e2a\u70b9\u7684\u8fed\u4ee3\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u65e6\u786e\u5b9a\u4e86\u5206\u914d\u5217\u8868\uff0c\u672c\u4f8b\u4e2d\u8fd9\u4e2a\u5217\u8868\u5c31\u662f\u4e00\u7cfb\u5217\u70b9\u7684\u7d22\u5f15\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u6240\u6709\u70b9\u4f4d\u7f6e\u7684\u5e73\u5747\u503c\u6765\u66f4\u65b0\u7c07\u91cd\u5fc3\u7684\u4f4d\u7f6e\u4e86\u3002 \u8bd1\u8005\u6ce8\uff1a \u6b27\u51e0\u91cc\u5fb7\u8ddd\u79bb\u662f\u6307\u5728\u6b27\u5f0f\u7a7a\u95f4\u4e2d\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\uff0c\u8ba1\u7b97\u516c\u5f0f\u5982\u4e0b\uff0c\u5047\u8bbep\uff0cq\u4e24\u70b9\u4e3a\u6b27\u5f0f\u7a7a\u95f4\u4e2d\u7684\u4e24\u4e2a\u70b9\uff0c\u5176\u5404\u81ea\u7684\u7a7a\u95f4\u5750\u6807\u4e3a\uff1a p(p1,p2,p3,... pn) q(q1,q2,q3,... qn) \u5219\u4e24\u70b9\u95f4\u7684\u8ddd\u79bb\u53ef\u8868\u793a\u4e3a\uff1a function moveMeans() { makeAssignments(); var sums = Array( means.length ); var counts = Array( means.length ); var moved = false; for (var j in means) { counts[j] = 0; sums[j] = Array( means[j].length ); for (var dimension in means[j]) { sums[j][dimension] = 0; } } for (var point_index in assignments){ var mean_index = assignments[point_index]; var point = data[point_index]; var mean = means[mean_index]; counts[mean_index]++; for (var dimension in mean){ sums[mean_index][dimension] += point[dimension]; } } for (var mean_index in sums){ // console.log(counts[mean_index]); if ( 0 === counts[mean_index] ) { sums[mean_index] = means[mean_index]; // console.log( Mean with no points ); // console.log(sums[mean_index]); for (var dimension in dataExtremes){ sums[mean_index][dimension] = dataExtremes[dimension].min + ( Math.random() * dataRange[dimension] ); } continue; } for (var dimension in sums[mean_index]) { sums[mean_index][dimension] /= counts[mean_index]; } } if (means.toString() !== sums.toString()) { moved = true; } means = sums; return moved; } moveMeans() \u65b9\u6cd5\u5728\u5f00\u59cb\u5904\u8c03\u7528 makeAssignments() \u3002\u4e00\u65e6\u5206\u914d\u5de5\u4f5c\u7ed3\u675f\uff0c\u6211\u4eec\u9700\u8981\u521d\u59cb\u5316\u4e24\u4e2a\u6570\u7ec4\uff1a\"sums\" \u548c \"counts\"\u3002\u65e2\u7136\u6211\u4eec\u8981\u8ba1\u7b97\u7b97\u6570\u5e73\u5747\u503c\uff0c\u6211\u4eec\u5c31\u9700\u8981\u77e5\u9053\u6240\u6709\u70b9\u5728\u6bcf\u4e2a\u7ef4\u5ea6\u4e0a\u7684\u603b\u548c\u8fd8\u6709\u70b9\u7684\u6570\u91cf\u3002 \u6211\u4eec\u542f\u7528\u4e09\u4e2a\u904d\u5386\u8fc7\u7a0b\uff1a \u4e00\uff1a\u904d\u5386\u6bcf\u4e2a\u7c07\u91cd\u5fc3\uff0c\u521d\u59cb\u5316\u6570\u7ec4sums\u5728\u6bcf\u4e2a\u7ef4\u5ea6\u4e0a\u7684\u503c\u4e3a0\uff0c\u4ee5\u53ca\u6570\u7ec4\u6570\u91cfcounts\u4e5f\u4e3a0\u3002\u6240\u4ee5sums\u6570\u7ec4\u662f\u4e00\u4e2a\u591a\u7ef4\u6570\u7ec4\uff0c\u539f\u56e0\u5c31\u5728\u4e8e\u6211\u4eec\u5904\u7406\u7684\u662f\u6bcf\u4e2a\u7c07\u4e2d\u7684\u6bcf\u4e2a\u70b9\u5728\u6bcf\u4e2a\u7ef4\u5ea6\u4e0a\u7684\u6570\u636e\u3002 \u4e8c\uff1a\u904d\u5386\u6bcf\u4e2a\u88ab\u5206\u914d\u7684\u6570\u636e\u70b9\u8ba1\u7b97\u51fa\u6bcf\u4e2a\u7c07\u91cd\u5fc3\u62e5\u6709\u7684\u6570\u636e\u70b9\u7684\u6570\u91cf\uff0c\u5e76\u4e14\u904d\u5386\u6570\u636e\u70b9\u7684\u6240\u6709\u7ef4\u5ea6\u586b\u5145 sums \u6570\u7ec4\u3002\u5230\u6b64\uff0c\u6211\u4eec\u62e5\u6709\u4e86\u4e3a\u7c07\u91cd\u5fc3\u8ba1\u7b97\u65b0\u4f4d\u7f6e\u7684\u6240\u6709\u6570\u636e\u3002\u904d\u5386\u7ed3\u679c\uff0c\u4e3a\u6bcf\u4e2a\u7c07\u91cd\u5fc3\u8ba1\u7b97\u65b0\u7684\u5e73\u5747\u4f4d\u7f6e\uff0c\u5e76\u628a\u91cd\u5fc3\u79fb\u52a8\u5230\u8be5\u4f4d\u7f6e\u3002 \u4e09\uff1a\u68c0\u6d4b\u7c07\u91cd\u5fc3\u662f\u5426\u8fd8\u6709\u6570\u636e\u88ab\u5206\u914d\u7ed9\u5b83\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u6211\u4eec\u5c31\u7ed9\u5b83\u4e00\u4e2a\u968f\u673a\u7684\u65b0\u4f4d\u7f6e\uff0c\u5c31\u662f\u6211\u4eec\u4e4b\u524d\u8bf4\u7684\u8e22\u5b83\u4e00\u811a\u3002 \u6700\u540e\uff0c\u5de1\u89c6\u6240\u6709\u7684\u7c07\u91cd\u5fc3\u662f\u5426\u8fd8\u6709\u79fb\u52a8\u60c5\u51b5\uff0c\u5e76\u8fd4\u56de\u771f\u6216\u5047\u3002\u4f7f\u7528\u5982\u4e0b setup \u51fd\u6570\u5f00\u59cb\u6267\u884c\u7b97\u6cd5\uff1a function setup() { canvas = document.getElementById('canvas'); ctx = canvas.getContext('2d'); dataExtremes = getDataExtremes(data); dataRange = getDataRanges(dataExtremes); means = initMeans(3); makeAssignments(); draw(); setTimeout(run, drawDelay); } function run() { var moved = moveMeans(); draw(); if (moved) { setTimeout(run, drawDelay); } } \u6211\u4eec\u9700\u8981\u7684\u8bbe\u5b9a\u90fd\u5728 setup()\u4e2d\u521d\u59cb\u5316\u5b8c\u6210\uff0c\u4e4b\u540e run() \u51fd\u6570\u68c0\u6d4b\u7b97\u6cd5\u662f\u5426\u505c\u6b62\u4e86\uff0c\u5e76\u6839\u636e\u65f6\u949f\u7684\u95f4\u9694\u8bbe\u5b9a\u5faa\u73af\u6267\u884c\uff0c\u6211\u4eec\u4e5f\u5c31\u80fd\u5b9e\u65f6\u770b\u5230\u7b97\u6cd5\u7684\u8fd0\u884c\u60c5\u51b5\u4e86\u3002","title":"\u4ee3\u7801"},{"location":"K-means/#k-medians","text":"\u4f7f\u7528\u52a0\u6743\u5e73\u5747\uff0c\u7ed3\u679c\u53ef\u80fd\u53d7\u5230\u6781\u503c\u5f71\u54cd\uff0c\u4f7f\u7528\u4e2d\u503c\u8fdb\u884c\u805a\u7c7b\u6548\u679c\u66f4\u597d\u3002 k-means\u7b97\u6cd5\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5176\u5b9e\u5e76\u4e0d\u662f\u7b97\u6cd5\u672c\u8eab\u7684\u95ee\u9898\uff0c\u800c\u662f\u7b97\u6570\u5e73\u5747\u503c\u81ea\u8eab\u5b58\u5728\u7684\u7f3a\u9677\uff0c\u5c31\u662f\u5f53\u6570\u636e\u4e2d\u51fa\u73b0\u4e86\u67d0\u4e9b\u6570\u636e\u98de\u5730\uff08\u504f\u79bb\u6574\u4f53\u6570\u636e\u5f88\u8fdc\uff09\uff0c\u4f1a\u7ed9\u7b97\u6570\u5e73\u5747\u503c\u5e26\u6765\u4e0d\u5229\u5f71\u54cd\u3002\u6bd4\u5982\uff0c\u4f60\u6240\u5728\u7684\u516c\u53f8\u6709\u4e94\u4e2a\u4eba\u6bcf\u5e74\u7684\u85aa\u6c34\u662f5\u4e07\u5143\uff0c\u4f46\u662f\u6709\u53e6\u5916\u4e00\u4e2a\u4eba\u6bcf\u5e74\u7684\u85aa\u6c34\u9ad8\u8fbe100\u4e07\uff0c\u90a3\u4e48\u85aa\u6c34\u4e2d\u95f4\u503c\u4f1a\u662f5\u4e07\uff08\u80fd\u4ee3\u8868\u516c\u53f8\u7684\u85aa\u6c34\u60c5\u51b5\uff09\uff0c\u800c\u5e73\u5747\u503c\u8fbe\u5230\u4e8620\u4e07\uff08\u5b8c\u5168\u4e0d\u80fd\u4ee3\u8868\u516c\u53f8\u85aa\u8d44\u60c5\u51b5\uff09\uff01 \u8fd9\u79cd\u95ee\u9898\u5f53\u7136\u4e5f\u4f1a\u5728k-means\u7b97\u6cd5\u4e2d\u53d1\u751f\u3002\u5982\u679c\u4f60\u62ff\u5230\u7684\u6570\u636e\u4e2d\u6709\u98de\u5730\u60c5\u51b5\uff0c\u4f60\u4f1a\u53d1\u73b0k-means\u7b97\u6cd5\u5f97\u5230\u7684\u7ed3\u679c\u5f88\u7cdf\u7cd5\uff0c\u4e00\u4e2a\u89e3\u51b3\u529e\u6cd5\u5c31\u662f\u4f7f\u7528 k-medians \u4ee3\u66ff k-means, \u4e8c\u8005\u7b97\u6cd5\u76f8\u4f3c\uff0c\u53ea\u662f\u7528\u4e2d\u503c\u4ee3\u66ff\u5e73\u5747\u503c\uff0c\u8fd9\u6837\u53ef\u4ee5\u6ee4\u6389\u6570\u636e\u98de\u5730\u7684\u5f71\u54cd\u3002\u53e6\u5916\uff0c\u6211\u8ba4\u4e3a\u5728\u8ba1\u7b97\u6548\u7387\u4e0a\u4e5f\u4f1a\u6bd4\u5e73\u5747\u503c\u6cd5\u66f4\u9ad8\u6548\u3002","title":"k-medians"},{"location":"K-means/#_6","text":"k-meeans \u7b97\u6cd5\u5bf9\u4e8e\u6211\u4eec\u5b9a\u4e49\u7684\u6574\u6d01\u5e72\u51c0\u7684\u6570\u636e\u6765\u8bf4\u8fd0\u884c\u7684\u975e\u5e38\u5b8c\u7f8e\u3002\u5f88\u663e\u7136\uff0c\u5982\u679c\u6570\u636e\u810f\u4e71\uff0c\u4e5f\u4f1a\u50cf\u5176\u5b83\u7b97\u6cd5\u4e00\u6837\u9047\u5230\u56f0\u96be\u3002\u5982\u679c\u4e0d\u538c\u5176\u70e6\u5730\u591a\u8fd0\u884c\u51e0\u6b21\u6211\u7684\u4ee3\u7801\uff0c\u4f60\u4e5f\u4f1a\u9047\u5230\u9677\u4e8e\u5c40\u90e8\u6700\u4f18\u89e3\u7684\u95ee\u9898\u3002\u8fd9\u5c31\u9700\u8981\u901a\u8fc7\u201c\u673a\u5668\u59d4\u5458\u4f1a\u201d\u7684\u6280\u5de7\u6765\u89e3\u51b3\u4e86\uff1a\u901a\u8fc7\u4e00\u6b21\u6b21\u7684\u8fd0\u884c\uff0c \u90a3\u4e9b\u7ecf\u5e38\u5f97\u51fa\u7684\u7ed3\u679c\u5c31\u662f\u6211\u4eec\u8981\u7684\u7b54\u6848 \u3002","title":"\u7ed3\u679c"},{"location":"diverce/","text":"\u5206\u6cbb\u7b97\u6cd5 \u5206\u6cbb\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u5c06\u4e00\u4e2a\u89c4\u6a21\u4e3aN\u7684\u95ee\u9898\u5206\u89e3\u4e3aK\u4e2a\u89c4\u6a21\u8f83\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u8fd9\u4e9b\u5b50\u95ee\u9898\u76f8\u4e92\u72ec\u7acb\u4e14\u4e0e\u539f\u95ee\u9898\u6027\u8d28\u76f8\u540c\u3002\u6c42\u51fa\u5b50\u95ee\u9898\u7684\u89e3\uff0c\u5c31\u53ef\u5f97\u5230\u539f\u95ee\u9898\u7684\u89e3\u3002\u5373\u4e00\u79cd\u5206\u76ee\u6807\u5b8c\u6210\u7a0b\u5e8f\u7b97\u6cd5\uff0c\u7b80\u5355\u95ee\u9898\u53ef\u7528\u4e8c\u5206\u6cd5\u5b8c\u6210\u3002 \u5f53\u6211\u4eec\u6c42\u89e3\u67d0\u4e9b\u95ee\u9898\u65f6\uff0c\u7531\u4e8e\u8fd9\u4e9b\u95ee\u9898\u8981\u5904\u7406\u7684\u6570\u636e\u76f8\u5f53\u591a\uff0c\u6216\u6c42\u89e3\u8fc7\u7a0b\u76f8\u5f53\u590d\u6742\uff0c\u4f7f\u5f97\u76f4\u63a5\u6c42\u89e3\u6cd5\u5728\u65f6\u95f4\u4e0a\u76f8\u5f53\u957f\uff0c\u6216\u8005\u6839\u672c\u65e0\u6cd5\u76f4\u63a5\u6c42\u51fa\u3002\u5bf9\u4e8e\u8fd9\u7c7b\u95ee\u9898\uff0c\u6211\u4eec\u5f80\u5f80\u5148\u628a\u5b83\u5206\u89e3\u6210\u51e0\u4e2a\u5b50\u95ee\u9898\uff0c\u627e\u5230\u6c42\u51fa\u8fd9\u51e0\u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u6cd5\u540e\uff0c\u518d\u627e\u5230\u5408\u9002\u7684\u65b9\u6cd5\uff0c\u628a\u5b83\u4eec\u7ec4\u5408\u6210\u6c42\u6574\u4e2a\u95ee\u9898\u7684\u89e3\u6cd5\u3002\u5982\u679c\u8fd9\u4e9b\u5b50\u95ee\u9898\u8fd8\u8f83\u5927\uff0c\u96be\u4ee5\u89e3\u51b3\uff0c\u53ef\u4ee5\u518d\u628a\u5b83\u4eec\u5206\u6210\u51e0\u4e2a\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u81f3\u53ef\u4ee5\u76f4\u63a5\u6c42\u51fa\u89e3\u4e3a\u6b62\u3002 \u5229\u7528\u5206\u6cbb\u7b56\u7565\u6c42\u89e3\u65f6\uff0c\u6240\u9700\u65f6\u95f4\u53d6\u51b3\u4e8e\u5206\u89e3\u540e\u5b50\u95ee\u9898\u7684\u4e2a\u6570\u3001\u5b50\u95ee\u9898\u7684\u89c4\u6a21\u5927\u5c0f\u7b49\u56e0\u7d20\uff0c\u800c\u4e8c\u5206\u6cd5\uff0c\u7531\u4e8e\u5176\u5212\u5206\u7684\u7b80\u5355\u548c\u5747\u5300\u7684\u7279\u70b9\uff0c\u662f\u7ecf\u5e38\u91c7\u7528\u7684\u4e00\u79cd\u6709\u6548\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982\u4e8c\u5206\u6cd5\u68c0\u7d22\u3002 \u89e3\u9898\u7684\u4e00\u822c\u6b65\u9aa4\uff1a \uff081\uff09\u5206\u89e3\uff0c\u5c06\u8981\u89e3\u51b3\u7684\u95ee\u9898\u5212\u5206\u6210\u82e5\u5e72\u89c4\u6a21\u8f83\u5c0f\u7684\u540c\u7c7b\u95ee\u9898\uff1b \uff082\uff09\u6c42\u89e3\uff0c\u5f53\u5b50\u95ee\u9898\u5212\u5206\u5f97\u8db3\u591f\u5c0f\u65f6\uff0c\u7528\u8f83\u7b80\u5355\u7684\u65b9\u6cd5\u89e3\u51b3\uff1b \uff083\uff09\u5408\u5e76\uff0c\u6309\u539f\u95ee\u9898\u7684\u8981\u6c42\uff0c\u5c06\u5b50\u95ee\u9898\u7684\u89e3\u9010\u5c42\u5408\u5e76\u6784\u6210\u539f\u95ee\u9898\u7684\u89e3\u3002 \u5e94\u7528\u573a\u666f \u8fd0\u7528\u5206\u6cbb\u7b56\u7565\u89e3\u51b3\u7684\u95ee\u9898\u4e00\u822c\u6765\u8bf4\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a 1\u3001\u539f\u95ee\u9898\u53ef\u4ee5\u5206\u89e3\u4e3a\u591a\u4e2a\u5b50\u95ee\u9898 \u8fd9\u4e9b\u5b50\u95ee\u9898\u4e0e\u539f\u95ee\u9898\u76f8\u6bd4\uff0c\u53ea\u662f\u95ee\u9898\u7684\u89c4\u6a21\u6709\u6240\u964d\u4f4e\uff0c\u5176\u7ed3\u6784\u548c\u6c42\u89e3\u65b9\u6cd5\u4e0e\u539f\u95ee\u9898\u76f8\u540c\u6216\u76f8\u4f3c\u3002 2\u3001\u539f\u95ee\u9898\u5728\u5206\u89e3\u8fc7\u7a0b\u4e2d\uff0c\u9012\u5f52\u5730\u6c42\u89e3\u5b50\u95ee\u9898 \u7531\u4e8e\u9012\u5f52\u90fd\u5fc5\u987b\u6709\u4e00\u4e2a\u7ec8\u6b62\u6761\u4ef6\uff0c\u56e0\u6b64\uff0c\u5f53\u5206\u89e3\u540e\u7684\u5b50\u95ee\u9898\u89c4\u6a21\u8db3\u591f\u5c0f\u65f6\uff0c\u5e94\u80fd\u591f\u76f4\u63a5\u6c42\u89e3\u3002 3\u3001\u5728\u6c42\u89e3\u5e76\u5f97\u5230\u5404\u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u540e \u5e94\u80fd\u591f\u91c7\u7528\u67d0\u79cd\u65b9\u5f0f\u3001\u65b9\u6cd5\u5408\u5e76\u6216\u6784\u9020\u51fa\u539f\u95ee\u9898\u7684\u89e3\u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u7531\u4e8e\u5b50\u95ee\u9898\u4e0e\u539f\u95ee\u9898\u5728\u7ed3\u6784\u548c\u89e3\u6cd5\u4e0a\u7684\u76f8\u4f3c\u6027\uff0c\u7528\u5206\u6cbb\u65b9\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u5927\u90fd\u91c7\u7528\u4e86\u9012\u5f52\u7684\u5f62\u5f0f\u3002\u5728\u5404\u79cd\u6392\u5e8f\u65b9\u6cd5\u4e2d\uff0c\u5982\u5f52\u5e76\u6392\u5e8f\u3001\u5806\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u7b49\uff0c\u90fd\u5b58\u5728\u6709\u5206\u6cbb\u7684\u601d\u60f3\u3002 pow(x, n) // \u8ba1\u7b97\u9636\u4e58\uff08\u628a\u9636\u4e58\u8f6c\u6362\u6210\u666e\u901a\u4e58\u6cd5\uff0c\u5206\u6cbb\u7b97\u6cd5\uff0c\u9012\u5f52\u5b9e\u73b0\uff09 var myPow = function(x, n) { if(n == 0) return 1; // \u8d1f\u6570\u7684\u9636\u4e58 if(n 0) { return 1 / myPow(x, -n); } // \u67d0\u4e2a\u6570\u7684\u5947\u6570\u6b21\u65b9 else if(n % 2) { return x * myPow(x, n - 1); } // \u67d0\u4e2a\u6570\u7684\u5076\u6570\u6b21\u65b9 else { return myPow(x * x, n / 2); } }; // \u7b2c\u4e8c\u79cd\u5b9e\u73b0\u601d\u8def var myPow = function(x, n) { if(n 0) { n = -n; x = 1 / x; } if (x == 1) return 1; let res = 1; // \u4e0b\u9762\u662f\u4f4d\u8fd0\u7b97\uff0c\u901f\u5ea6\u5feb\uff0c\u65e5\u5e38\u4e0d\u4f1a\u8fd9\u6837\u4f7f\u7528 for(let i = n; i != 0; i = i 1){ if(i 1) res *= x; x *= x; } return res; };","title":"\u5206\u6cbb\u7b97\u6cd5"},{"location":"diverce/#_1","text":"\u5206\u6cbb\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\u5c06\u4e00\u4e2a\u89c4\u6a21\u4e3aN\u7684\u95ee\u9898\u5206\u89e3\u4e3aK\u4e2a\u89c4\u6a21\u8f83\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u8fd9\u4e9b\u5b50\u95ee\u9898\u76f8\u4e92\u72ec\u7acb\u4e14\u4e0e\u539f\u95ee\u9898\u6027\u8d28\u76f8\u540c\u3002\u6c42\u51fa\u5b50\u95ee\u9898\u7684\u89e3\uff0c\u5c31\u53ef\u5f97\u5230\u539f\u95ee\u9898\u7684\u89e3\u3002\u5373\u4e00\u79cd\u5206\u76ee\u6807\u5b8c\u6210\u7a0b\u5e8f\u7b97\u6cd5\uff0c\u7b80\u5355\u95ee\u9898\u53ef\u7528\u4e8c\u5206\u6cd5\u5b8c\u6210\u3002 \u5f53\u6211\u4eec\u6c42\u89e3\u67d0\u4e9b\u95ee\u9898\u65f6\uff0c\u7531\u4e8e\u8fd9\u4e9b\u95ee\u9898\u8981\u5904\u7406\u7684\u6570\u636e\u76f8\u5f53\u591a\uff0c\u6216\u6c42\u89e3\u8fc7\u7a0b\u76f8\u5f53\u590d\u6742\uff0c\u4f7f\u5f97\u76f4\u63a5\u6c42\u89e3\u6cd5\u5728\u65f6\u95f4\u4e0a\u76f8\u5f53\u957f\uff0c\u6216\u8005\u6839\u672c\u65e0\u6cd5\u76f4\u63a5\u6c42\u51fa\u3002\u5bf9\u4e8e\u8fd9\u7c7b\u95ee\u9898\uff0c\u6211\u4eec\u5f80\u5f80\u5148\u628a\u5b83\u5206\u89e3\u6210\u51e0\u4e2a\u5b50\u95ee\u9898\uff0c\u627e\u5230\u6c42\u51fa\u8fd9\u51e0\u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u6cd5\u540e\uff0c\u518d\u627e\u5230\u5408\u9002\u7684\u65b9\u6cd5\uff0c\u628a\u5b83\u4eec\u7ec4\u5408\u6210\u6c42\u6574\u4e2a\u95ee\u9898\u7684\u89e3\u6cd5\u3002\u5982\u679c\u8fd9\u4e9b\u5b50\u95ee\u9898\u8fd8\u8f83\u5927\uff0c\u96be\u4ee5\u89e3\u51b3\uff0c\u53ef\u4ee5\u518d\u628a\u5b83\u4eec\u5206\u6210\u51e0\u4e2a\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u81f3\u53ef\u4ee5\u76f4\u63a5\u6c42\u51fa\u89e3\u4e3a\u6b62\u3002 \u5229\u7528\u5206\u6cbb\u7b56\u7565\u6c42\u89e3\u65f6\uff0c\u6240\u9700\u65f6\u95f4\u53d6\u51b3\u4e8e\u5206\u89e3\u540e\u5b50\u95ee\u9898\u7684\u4e2a\u6570\u3001\u5b50\u95ee\u9898\u7684\u89c4\u6a21\u5927\u5c0f\u7b49\u56e0\u7d20\uff0c\u800c\u4e8c\u5206\u6cd5\uff0c\u7531\u4e8e\u5176\u5212\u5206\u7684\u7b80\u5355\u548c\u5747\u5300\u7684\u7279\u70b9\uff0c\u662f\u7ecf\u5e38\u91c7\u7528\u7684\u4e00\u79cd\u6709\u6548\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982\u4e8c\u5206\u6cd5\u68c0\u7d22\u3002 \u89e3\u9898\u7684\u4e00\u822c\u6b65\u9aa4\uff1a \uff081\uff09\u5206\u89e3\uff0c\u5c06\u8981\u89e3\u51b3\u7684\u95ee\u9898\u5212\u5206\u6210\u82e5\u5e72\u89c4\u6a21\u8f83\u5c0f\u7684\u540c\u7c7b\u95ee\u9898\uff1b \uff082\uff09\u6c42\u89e3\uff0c\u5f53\u5b50\u95ee\u9898\u5212\u5206\u5f97\u8db3\u591f\u5c0f\u65f6\uff0c\u7528\u8f83\u7b80\u5355\u7684\u65b9\u6cd5\u89e3\u51b3\uff1b \uff083\uff09\u5408\u5e76\uff0c\u6309\u539f\u95ee\u9898\u7684\u8981\u6c42\uff0c\u5c06\u5b50\u95ee\u9898\u7684\u89e3\u9010\u5c42\u5408\u5e76\u6784\u6210\u539f\u95ee\u9898\u7684\u89e3\u3002","title":"\u5206\u6cbb\u7b97\u6cd5"},{"location":"diverce/#_2","text":"\u8fd0\u7528\u5206\u6cbb\u7b56\u7565\u89e3\u51b3\u7684\u95ee\u9898\u4e00\u822c\u6765\u8bf4\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a 1\u3001\u539f\u95ee\u9898\u53ef\u4ee5\u5206\u89e3\u4e3a\u591a\u4e2a\u5b50\u95ee\u9898 \u8fd9\u4e9b\u5b50\u95ee\u9898\u4e0e\u539f\u95ee\u9898\u76f8\u6bd4\uff0c\u53ea\u662f\u95ee\u9898\u7684\u89c4\u6a21\u6709\u6240\u964d\u4f4e\uff0c\u5176\u7ed3\u6784\u548c\u6c42\u89e3\u65b9\u6cd5\u4e0e\u539f\u95ee\u9898\u76f8\u540c\u6216\u76f8\u4f3c\u3002 2\u3001\u539f\u95ee\u9898\u5728\u5206\u89e3\u8fc7\u7a0b\u4e2d\uff0c\u9012\u5f52\u5730\u6c42\u89e3\u5b50\u95ee\u9898 \u7531\u4e8e\u9012\u5f52\u90fd\u5fc5\u987b\u6709\u4e00\u4e2a\u7ec8\u6b62\u6761\u4ef6\uff0c\u56e0\u6b64\uff0c\u5f53\u5206\u89e3\u540e\u7684\u5b50\u95ee\u9898\u89c4\u6a21\u8db3\u591f\u5c0f\u65f6\uff0c\u5e94\u80fd\u591f\u76f4\u63a5\u6c42\u89e3\u3002 3\u3001\u5728\u6c42\u89e3\u5e76\u5f97\u5230\u5404\u4e2a\u5b50\u95ee\u9898\u7684\u89e3\u540e \u5e94\u80fd\u591f\u91c7\u7528\u67d0\u79cd\u65b9\u5f0f\u3001\u65b9\u6cd5\u5408\u5e76\u6216\u6784\u9020\u51fa\u539f\u95ee\u9898\u7684\u89e3\u3002 \u4e0d\u96be\u53d1\u73b0\uff0c\u7531\u4e8e\u5b50\u95ee\u9898\u4e0e\u539f\u95ee\u9898\u5728\u7ed3\u6784\u548c\u89e3\u6cd5\u4e0a\u7684\u76f8\u4f3c\u6027\uff0c\u7528\u5206\u6cbb\u65b9\u6cd5\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u5927\u90fd\u91c7\u7528\u4e86\u9012\u5f52\u7684\u5f62\u5f0f\u3002\u5728\u5404\u79cd\u6392\u5e8f\u65b9\u6cd5\u4e2d\uff0c\u5982\u5f52\u5e76\u6392\u5e8f\u3001\u5806\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u7b49\uff0c\u90fd\u5b58\u5728\u6709\u5206\u6cbb\u7684\u601d\u60f3\u3002","title":"\u5e94\u7528\u573a\u666f"},{"location":"diverce/#powx-n","text":"// \u8ba1\u7b97\u9636\u4e58\uff08\u628a\u9636\u4e58\u8f6c\u6362\u6210\u666e\u901a\u4e58\u6cd5\uff0c\u5206\u6cbb\u7b97\u6cd5\uff0c\u9012\u5f52\u5b9e\u73b0\uff09 var myPow = function(x, n) { if(n == 0) return 1; // \u8d1f\u6570\u7684\u9636\u4e58 if(n 0) { return 1 / myPow(x, -n); } // \u67d0\u4e2a\u6570\u7684\u5947\u6570\u6b21\u65b9 else if(n % 2) { return x * myPow(x, n - 1); } // \u67d0\u4e2a\u6570\u7684\u5076\u6570\u6b21\u65b9 else { return myPow(x * x, n / 2); } }; // \u7b2c\u4e8c\u79cd\u5b9e\u73b0\u601d\u8def var myPow = function(x, n) { if(n 0) { n = -n; x = 1 / x; } if (x == 1) return 1; let res = 1; // \u4e0b\u9762\u662f\u4f4d\u8fd0\u7b97\uff0c\u901f\u5ea6\u5feb\uff0c\u65e5\u5e38\u4e0d\u4f1a\u8fd9\u6837\u4f7f\u7528 for(let i = n; i != 0; i = i 1){ if(i 1) res *= x; x *= x; } return res; };","title":"pow(x, n)"},{"location":"double-pointer/","text":"\u53cc\u6307\u9488\u95ee\u9898 \u4ec0\u4e48\u662f\u53cc\u6307\u9488 \u53cc\u6307\u9488 \uff0c\u6307\u7684\u662f\u5728\u904d\u5386\u5bf9\u8c61\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u662f\u666e\u901a\u7684\u4f7f\u7528\u5355\u4e2a\u6307\u9488\u8fdb\u884c\u8bbf\u95ee\uff0c\u800c\u662f\u4f7f\u7528\u4e24\u4e2a\u76f8\u540c\u65b9\u5411\uff08 \u5feb\u6162\u6307\u9488 \uff09\u6216\u8005\u76f8\u53cd\u65b9\u5411\uff08 \u5bf9\u649e\u6307\u9488 \uff09\u7684\u6307\u9488\u8fdb\u884c\u626b\u63cf\uff0c\u4ece\u800c\u8fbe\u5230\u76f8\u5e94\u7684\u76ee\u7684\u3002 \u5206\u7c7b\uff1a\u5bf9\u649e\u6307\u9488\u3001\u5feb\u6162\u6307\u9488 \u6362\u8a00\u4e4b\uff0c\u53cc\u6307\u9488\u6cd5\u5145\u5206\u4f7f\u7528\u4e86\u6570\u7ec4\u6709\u5e8f\u8fd9\u4e00\u7279\u5f81\uff0c\u4ece\u800c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u80fd\u591f\u7b80\u5316\u4e00\u4e9b\u8fd0\u7b97\u3002 \u5728 LeetCode \u9898\u5e93\u4e2d\uff0c\u5173\u4e8e \u53cc\u6307\u9488 \u7684\u95ee\u9898\u8fd8\u662f\u633a\u591a\u7684\u3002 \u53cc\u6307\u9488 JS\u4f8b\u5b50 \u5bf9\u649e\u6307\u9488 \u5bf9\u649e\u6307\u9488 \u662f\u6307\u5728\u6709\u5e8f\u6570\u7ec4\u4e2d\uff0c\u5c06\u6307\u5411\u6700\u5de6\u4fa7\u7684\u7d22\u5f15\u5b9a\u4e49\u4e3a \u5de6\u6307\u9488(left) \uff0c\u6700\u53f3\u4fa7\u7684\u5b9a\u4e49\u4e3a \u53f3\u6307\u9488(right) \uff0c\u7136\u540e\u4ece\u4e24\u5934\u5411\u4e2d\u95f4\u8fdb\u884c\u6570\u7ec4\u904d\u5386\u3002\u5bf9\u649e\u6570\u7ec4\u9002\u7528\u4e8e \u6709\u5e8f\u6570\u7ec4 \uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u4f60\u9047\u5230\u9898\u76ee\u7ed9\u5b9a\u6709\u5e8f\u6570\u7ec4\u65f6\uff0c\u5e94\u8be5\u7b2c\u4e00\u65f6\u95f4\u60f3\u5230\u7528\u5bf9\u649e\u6307\u9488\u89e3\u9898\u3002 \u4f2a\u4ee3\u7801\u5927\u81f4\u5982\u4e0b\uff1a function fn (list) { var left = 0; var right = list.length - 1; //\u904d\u5386\u6570\u7ec4 while (left = right) { left++; // \u4e00\u4e9b\u6761\u4ef6\u5224\u65ad \u548c\u5904\u7406 ... ... right--; } } \u4e3e\u4e2aLeetCode\u4e0a\u7684\u4f8b\u5b50\uff1a \u4ee5 LeetCode 881 \u6551\u751f\u8247 \u95ee\u9898\u4e3a\u4f8b \u7531\u4e8e\u672c\u9898\u53ea\u8981\u6c42\u8ba1\u7b97\u51fa \u6700\u5c0f\u8239\u6570 \uff0c\u6240\u4ee5\u539f\u6570\u7ec4\u662f\u5426\u88ab\u6539\u53d8\uff0c\u548c\u5143\u7d20\u7d22\u5f15\u4f4d\u7f6e\u90fd\u4e0d\u8003\u8651\u5728\u5185\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u5bf9\u4e8e\u7ed9\u5b9a\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u518d\u4ece\u6570\u7ec4\u4e24\u4fa7\u5411\u4e2d\u95f4\u904d\u5386\u3002\u6240\u4ee5\u89e3\u9898\u601d\u8def\u5982\u4e0b\uff1a \u5bf9\u7ed9\u5b9a\u6570\u7ec4\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f \u521d\u59cb\u5316\u5de6\u53f3\u6307\u9488 \u6bcf\u6b21\u90fd\u7528\u4e00\u4e2a\u201d\u6700\u91cd\u7684\u201c\u548c\u4e00\u4e2a\u201d\u6700\u8f7b\u7684\u201c\u8fdb\u884c\u914d\u5bf9\uff0c\u5982\u679c\u4e8c\u4eba\u91cd\u91cf\u5c0f\u4e8e Limit \uff0c\u5219\u6b64\u65f6\u7684\u201d\u6700\u8f7b\u7684\u201c\u4e0a\u8239\uff0c\u5373\uff08 left++ \uff09\u3002\u4e0d\u7ba1\u201d\u6700\u8f7b\u7684\u201c\u662f\u5426\u4e0a\u8239\uff0c\u201d\u6700\u91cd\u7684\u201c\u90fd\u8981\u4e0a\u8239\uff0c\u5373\uff08 right-- \uff09\u5e76\u4e14\u6240\u9700\u8239\u6570\u91cf\u52a0\u4e00\uff0c\u5373\uff08 num++ \uff09 \u4ee3\u7801\u5982\u4e0b\uff1a var numRescueBoats = function(people, limit) { people.sort((a, b) = (a - b)); var num = 0 let left = 0 let right = people.length - 1 while (left = right) { if ((people[left] + people[right]) = limit) { left++ } right-- num++ } return num }; \u5feb\u6162\u6307\u9488 \u5feb\u6162\u6307\u9488 \u4e5f\u662f\u53cc\u6307\u9488\uff0c\u4f46\u662f\u4e24\u4e2a\u6307\u9488\u4ece\u540c\u4e00\u4fa7\u5f00\u59cb\u904d\u5386\u6570\u7ec4\uff0c\u5c06\u8fd9\u4e24\u4e2a\u6307\u9488\u5206\u522b\u5b9a\u4e49\u4e3a \u5feb\u6307\u9488\uff08fast\uff09 \u548c \u6162\u6307\u9488\uff08slow\uff09 \uff0c\u4e24\u4e2a\u6307\u9488\u4ee5\u4e0d\u540c\u7684\u7b56\u7565\u79fb\u52a8\uff0c\u76f4\u5230\u4e24\u4e2a\u6307\u9488\u7684\u503c\u76f8\u7b49\uff08\u6216\u5176\u4ed6\u7279\u6b8a\u6761\u4ef6\uff09\u4e3a\u6b62\uff0c\u5982fast\u6bcf\u6b21\u589e\u957f\u4e24\u4e2a\uff0cslow\u6bcf\u6b21\u589e\u957f\u4e00\u4e2a\u3002 \u4ee5 LeetCode 141.\u73af\u5f62\u94fe\u8868 \u4e3a\u4f8b,\uff0c\u5224\u65ad\u7ed9\u5b9a\u94fe\u8868\u4e2d\u662f\u5426\u5b58\u5728\u73af\uff0c\u53ef\u4ee5\u5b9a\u4e49\u5feb\u6162\u4e24\u4e2a\u6307\u9488\uff0c\u5feb\u6307\u9488\u6bcf\u6b21\u589e\u957f\u4e00\u4e2a\uff0c\u800c\u6162\u6307\u9488\u6bcf\u6b21\u589e\u957f\u4e24\u4e2a\uff0c\u6700\u540e\u4e24\u4e2a\u6307\u9488\u6307\u5411\u8282\u70b9\u7684\u503c\u76f8\u7b49\uff0c\u5219\u8bf4\u660e\u6709\u73af\u3002\u5c31\u597d\u50cf\u4e00\u4e2a\u73af\u5f62\u8dd1\u9053\u4e0a\u6709\u4e00\u5feb\u4e00\u6162\u4e24\u4e2a\u8fd0\u52a8\u5458\u8d5b\u8dd1\uff0c\u5982\u679c\u65f6\u95f4\u8db3\u591f\u957f\uff0c\u8dd1\u5730\u5feb\u7684\u8fd0\u52a8\u5458\u4e00\u5b9a\u4f1a\u8d76\u4e0a\u6162\u7684\u8fd0\u52a8\u5458\u3002 \u89e3\u9898\u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * function ListNode(val) { * this.val = val; * this.next = null; * } */ /** * @param {ListNode} head * @return {boolean} */ var hasCycle = function(head) { if (head === null || head.next === null) { return false; } let slow = head; let fast = head.next; while (slow !== fast) { if (fast === null || fast.next === null) { return false } slow = slow.next fast = fast.next.next } return true }; \u518d\u6bd4\u5982 LeetCode 26 \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 \uff0c\u8fd9\u91cc\u8fd8\u662f\u5b9a\u4e49\u5feb\u6162\u4e24\u4e2a\u6307\u9488\u3002\u5feb\u6307\u9488\u6bcf\u6b21\u589e\u957f\u4e00\u4e2a\uff0c\u6162\u6307\u9488\u53ea\u6709\u5f53\u5feb\u6162\u6307\u9488\u4e0a\u7684\u503c\u4e0d\u540c\u65f6\uff0c\u624d\u589e\u957f\u4e00\u4e2a\uff08\u7531\u4e8e\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u5feb\u6162\u6307\u9488\u503c\u4e0d\u7b49\u8bf4\u660e\u627e\u5230\u4e86\u65b0\u503c\uff09\u3002 \u771f\u5b9e\u4ee3\u7801\uff1a var removeDuplicates = function (nums) { if (nums.length === 0) { return 0; } let slow = 0; for (let fast = 0; fast nums.length; fast++) { if (nums[fast] !== nums[slow]) { slow++; nums[slow] = nums[fast]; } } // Michael\uff1a\u8fd9\u91cc\u7684\u7b97\u6cd5\u4e0d\u5b8c\u5584\uff0c\u73b0\u5728\u53ea\u83b7\u53d6\u4e86\u8fd4\u56de\u7684\u4e0d\u91cd\u590d\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u539f\u6765\u7684\u6570\u7ec4\u540e\u9762\u7684\u5143\u7d20\u5e94\u8be5\u5220\u9664[1,1,1,1,2,3] \u53d8\u6210 [1,2,3,1,2,3] \u540e\u9762\u7684\u9700\u8981\u76f4\u63a5\u53bb\u6389\uff0c\u8fd9\u6837\u624d\u80fd\u6ee1\u8db3\u8981\u6c42\u3002\u8fd9\u4e2a\u601d\u8def\u6bd4\u5faa\u73af\u4e00\u6b21spliec\u66f4\u597d return slow + 1; }; \u603b\u7ed3 \u5f53\u9047\u5230\u6709\u5e8f\u6570\u7ec4\u65f6\uff0c\u5e94\u8be5\u4f18\u5148\u60f3\u5230 \u53cc\u6307\u9488 \u6765\u89e3\u51b3\u95ee\u9898\uff0c\u56e0\u4e24\u4e2a\u6307\u9488\u7684\u540c\u65f6\u904d\u5386\uff0c\u4f1a\u51cf\u5c11\u7a7a\u95f4\u590d\u6742\u5ea6\u548c\u65f6\u95f4\u590d\u6742\u5ea6\u3002 Go\u4f8b\u5b50 \u53cc\u6307\u9488\u4e3b\u8981\u7528\u4e8e\u904d\u5386\u6570\u7ec4\uff0c\u4e24\u4e2a\u6307\u9488\u6307\u5411\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u4ece\u800c\u534f\u540c\u5b8c\u6210\u4efb\u52a1\u3002\u53cc\u6307\u9488\u53ef\u4ee5\u4ece\u4e0d\u540c\u7684\u65b9\u5411\u5411\u4e2d\u95f4\u903c\u8fd1\u4e5f\u53ef\u4ee5\u671d\u7740\u540c\u4e00\u4e2a\u65b9\u5411\u904d\u5386\u3002 \u5728LeedCode\u4e2d\u6709\u5f88\u591a\u9898\u76ee\u53ef\u4ee5\u901a\u8fc7\u53cc\u6307\u9488\u7684\u601d\u60f3\u6765\u89e3\u7b54\u3002\u5176\u4e2d\u5305\u62ec\uff1a 1\u3001\u6709\u5e8f\u6570\u7ec4\u7684 Two Sum Leetcode \uff1a167. Two Sum II - Input array is sorted (Easy) Input: numbers={2, 7, 11, 15}, target=9 Output: index1=1, index2=2 \u9898\u76ee\u63cf\u8ff0\uff1a\u5728\u6709\u5e8f\u6570\u7ec4\u4e2d\u627e\u51fa\u4e24\u4e2a\u6570\uff0c\u4f7f\u5b83\u4eec\u7684\u548c\u4e3a target\u3002 \u4f7f\u7528\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u503c\u8f83\u5c0f\u7684\u5143\u7d20\uff0c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u503c\u8f83\u5927\u7684\u5143\u7d20\u3002 \u6307\u5411\u8f83\u5c0f\u5143\u7d20\u7684\u6307\u9488\u4ece\u5934\u5411\u5c3e\u904d\u5386\uff0c\u6307\u5411\u8f83\u5927\u5143\u7d20\u7684\u6307\u9488\u4ece\u5c3e\u5411\u5934\u904d\u5386\u3002 \u5982\u679c\u4e24\u4e2a\u6307\u9488\u6307\u5411\u5143\u7d20\u7684\u548c sum == target\uff0c\u90a3\u4e48\u5f97\u5230\u8981\u6c42\u7684\u7ed3\u679c\uff1b \u5982\u679c sum target\uff0c\u79fb\u52a8\u8f83\u5927\u7684\u5143\u7d20\uff0c\u4f7f sum \u53d8\u5c0f\u4e00\u4e9b\uff1b \u5982\u679c sum target\uff0c\u79fb\u52a8\u8f83\u5c0f\u7684\u5143\u7d20\uff0c\u4f7f sum \u53d8\u5927\u4e00\u4e9b\u3002 func twoSum(numbers []int, target int) []int { for i,j :=0,len(numbers)-1;i j;{ if numbers[i] + numbers[j] == target { return []int{i+1,j+1} } if numbers[i] + numbers[j] target { i++ continue } if numbers[i] + numbers[j] target { j-- continue } } return []int{} } 2\u3001\u4e24\u6570\u5e73\u65b9\u548c 633. Sum of Square Numbers (Easy) Input: 5 Output: True Explanation: 1 * 1 + 2 * 2 = 5 \u9898\u76ee\u63cf\u8ff0\uff1a\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u4e24\u4e2a\u6570\u7684\u5e73\u65b9\u548c\u3002 /*\u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u4ece\u524d\uff080\uff09\u5f00\u59cb\u904d\u5386\uff0c\u4e00\u4e2a\u4ece\u540e\uff08sqrt(n)\uff09\u5f00\u59cb\u904d\u5386\uff0c\u76f4\u5230\u627e\u5230\u5408\u9002\u7684\u89e3 */ func judgeSquareSum(c int) bool { for i,j:=0,int(math.Sqrt(float64(c)));i =j;{ if i*i + j*j == c { return true } if i*i + j*j c { i++ continue } if i*i + j*j c { j-- continue } } return false } 3\u3001\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u97f3\u5b57\u7b26 345. Reverse Vowels of a String (Easy) Given s = leetcode , return leotcede . /*\u4f7f\u7528\u53cc\u6307\u9488\u6307\u5411\u5f85\u53cd\u8f6c\u7684\u4e24\u4e2a\u5143\u97f3\u5b57\u7b26\uff0c\u4e00\u4e2a\u6307\u9488\u4ece\u5934\u5411\u5c3e\u904d\u5386\uff0c\u4e00\u4e2a\u6307\u9488\u4ece\u5c3e\u5230\u5934\u904d\u5386\uff0c\u53d1\u73b0\u4e24\u4e2a\u5143\u97f3\u540e\u4ea4\u6362*/ func reverseVowels(s string) string { bs := []byte(s) for i,j:=0,len(bs)-1;i j;{ if !isVowel(bs[i]){ i++ continue } if !isVowel(bs[j]){ j-- continue } temp:=bs[i] bs[i]=bs[j] bs[j]=temp i++ j-- } return string(bs) } func isVowel(b byte) bool { return b == 'a' || b == 'e' || b == 'i' || b == 'o' || b == 'u' || b == 'A' || b == 'E' || b == 'I' || b == 'O' || b == 'U' } 4\u3001\u56de\u6587\u5b57\u7b26\u4e32 680. Valid Palindrome II (Easy) Input: abca Output: True Explanation: You could delete the character 'c'. \u9898\u76ee\u63cf\u8ff0\uff1a\u53ef\u4ee5\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\uff0c\u5224\u65ad\u662f\u5426\u80fd\u6784\u6210\u56de\u6587\u5b57\u7b26\u4e32\u3002 /*\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u4ece\u524d\u4e00\u4e2a\u5f80\u540e\uff0c\u4e00\u81f4\u7ee7\u7eed\u5f80\u524d\uff0c\u4e0d\u4e00\u81f4\u5219\u5206\u522b\u770b\u8fc7\u6ee4\u54ea\u4e00\u8fb9\u53ef\u4ee5\u7ee7\u7eed*/ func validPalindrome(s string) bool { bs := []byte(s) for i,j:=0,len(bs)-1;i j;{ if bs[i] != bs[j] { //\u53d1\u73b0\u4e0d\u4e00\u81f4\uff0c\u5206\u522b\u770b\u53bb\u6389\u5de6\u8fb9\u8fd8\u662f\u53bb\u6389\u53f3\u8fb9\u4efb\u610f\u4e00\u4e2a\u53ef\u4ee5\u5c31\u901a\u8fc7 return ispalindrome(bs,i+1,j) || ispalindrome(bs,i,j-1) } i++ j-- } return true } func ispalindrome(bs []byte, left,right int) bool { for ;left right;{ if bs[left] != bs[right]{ return false } left++ right-- } return true } 5\u3001\u5f52\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 88. Merge Sorted Array (Easy) Input: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] \u9898\u76ee\u63cf\u8ff0\uff1a\u628a\u5f52\u5e76\u7ed3\u679c\u5b58\u5230\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e0a\u3002 /*\u4ece\u5c3e\u5f00\u59cb\u904d\u5386,\u9010\u4e2a\u6bd4\u8f83\u6dfb\u52a0\u5230nums1\u4e0a*/ func merge(nums1 []int, m int, nums2 []int, n int) { index := m+n-1 for index1,index2 := m-1,n-1;index1 =0 || index2 =0;index--{ if index1 0 { nums1[index] = nums2[index2] index2-- }else if index2 0 { nums1[index] = nums1[index1] index1-- }else if nums1[index1] = nums2[index2] { nums1[index] = nums2[index2] index2-- }else if nums1[index1] nums2[index2]{ nums1[index] = nums1[index1] index1-- } } } 6\u3001\u5224\u65ad\u94fe\u8868\u662f\u5426\u5b58\u5728\u73af 141. Linked List Cycle (Easy) /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ /*\u4f7f\u7528\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u6bcf\u6b21\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\uff0c\u4e00\u4e2a\u6307\u9488\u6bcf\u6b21\u79fb\u52a8\u4e24\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u5b58\u5728\u73af\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u6307\u9488\u4e00\u5b9a\u4f1a\u76f8\u9047\u3002*/ class Solution { public: bool hasCycle(ListNode *head) { if (head == NULL || head- next==NULL){ return false; } ListNode* l1 = head; ListNode* l2 = head- next; while(l2!=NULL l2- next!=NULL){ if (l1==l2){ return true; }else{ l1=l1- next; l2=l2- next- next; } } return false; } }; 7\u3001\u6700\u957f\u5b50\u5e8f\u5217 524. Longest Word in Dictionary through Deleting (Medium) Input: s = abpcplea , d = [ ale , apple , monkey , plea ] Output: apple \u9898\u76ee\u63cf\u8ff0\uff1a\u5220\u9664 s \u4e2d\u7684\u4e00\u4e9b\u5b57\u7b26\uff0c\u4f7f\u5f97\u5b83\u6784\u6210\u5b57\u7b26\u4e32\u5217\u8868 d \u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u80fd\u6784\u6210\u7684\u6700\u957f\u5b57\u7b26\u4e32\u3002\u5982\u679c\u6709\u591a\u4e2a\u76f8\u540c\u957f\u5ea6\u7684\u7ed3\u679c\uff0c\u8fd4\u56de\u5b57\u5178\u5e8f\u7684\u6700\u5927\u5b57\u7b26\u4e32\u3002 /*\u4e24\u4e2a\u6307\u9488\u4ece\u5934\u5f00\u59cb\u67e5\u770b\u662f\u5426\u80fd\u543b\u5408\uff0c\u5982\u679c\u67e5\u5230d\u4e2d\u5b57\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e5f\u543b\u5408\u4ee3\u8868\u80fd\u591f\u5b8c\u5168match\uff0c\u518d\u5904\u7406\u540c\u957f\u5ea6\u7684\u95ee\u9898*/ func findLongestWord(s string, d []string) string { result := for _,v := range d { if len(result) len(v) || len(result) == len(v) result = v { continue } if isValid(s,v) { result = v } } return result } func isValid(s string,v string) bool{ //\u770b\u662f\u4e0d\u662f\u80fdmatch\u4e0a bs := []byte(s) bv := []byte(v) i,j:= 0,0 for i len(bs) j len(bv){ if bs[i] == bv[j]{ j++ } i++ } if j== len(bv) { //\u6700\u540e\u4e00\u4e2a\u4e5f\u7b26\u5408\u3002 return true } return false } C++\u4f8b\u5b50 \u6b64\u7c7b\u95ee\u9898\u4e00\u822c\u6d89\u53ca\u51e0\u79cd\u60c5\u5f62\uff1a in place \u7684\u66f4\u65b0\u6570\u7ec4\uff0c\u9700\u8981\u4e00\u4e2aindex\u8bb0\u5f55\u66f4\u65b0\u4e4b\u540e\u7684\u6570\u7ec4\uff0c\u53e6\u4e00\u4e2aindex\u8dd1\u904d\u539f\u6765\u7684\u6570\u7ec4\uff1b \u8fd8\u6709\u5c31\u662f\u627e\u5230\u6570\u7ec4\u91cc\u9762\u7684N\u4e2a\u6570\u4f7f\u5f97\u8fd9\u51e0\u4e2a\u6570\u6ee1\u8db3\u4e00\u5b9a\u7684\u6761\u4ef6\uff08\u5982\u51e0\u4e2a\u6570\u4e4b\u548c\u5fc5\u987b\u4e3a\u67d0\u4e00\u4e2a\u7279\u5b9a\u7684\u6570\uff09\uff1b\u8fd8\u6709\u5c31\u662f\u4e00\u7c7b\u7279\u6b8a\u7684\u95ee\u9898\u96e8\u6c34\u50a8\u5b58\u95ee\u9898\u3002 \u8fd9\u91cc\u6709\u51e0\u4e2a\u5173\u952e\u95ee\u9898\u9700\u8981\u7406\u89e3: \u9996\u5148\u6570\u7ec4\u662f\u5426\u6392\u5e8f\uff0c\u6839\u636e\u4fe1\u606f\u8bba\u7684\u770b\u6cd5\u6216\u8005\u80fd\u91cf\u5b88\u6052\u7684\u539f\u7406\uff0c\u6570\u7ec4\u662f\u5426\u6392\u5e8f\u4e0e\u5892\u6709\u5173\uff0c\u5892\u7684\u672c\u8d28\u5c31\u662f\u63cf\u8ff0\u4e8b\u7269\u6709\u5e8f\u7a0b\u5ea6\u7684\u5ea6\u91cf\uff0c\u6362\u53e5\u8bdd\u8bf4\u4e8b\u7269\u8d8a\u6709\u5e8f\u5892\u7684\u503c\u8d8a\u4f4e\uff0c\u5e76\u4e14\u672c\u8d28\u662f\u5892\u4f1a\u81ea\u7136\u7684\u4f1a\u589e\u5927\u5728\u65e0\u5916\u529b\u5e72\u6270\u7684\u72b6\u51b5\u4e0b\uff0c\u4e5f\u5c31\u662f\u4e8b\u7269\u603b\u662f\u5411\u7740\u65e0\u5e8f\u53d1\u5c55\u7684\u3002\u800c\u600e\u6837\u8ba9\u4e8b\u7269\u53d8\u7684\u6709\u5e8f\u5462\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5916\u529b\u80fd\u91cf\u7684\u8f93\u5165\u6765\u4f7f\u5f97\u5892\u53d8\u5c0f\u6216\u8005\u53d8\u7684\u6709\u5e8f\u3002\u90a3\u4e48\u5728\u6570\u7ec4\u662f\u5426\u6709\u5e8f\u7684\u95ee\u9898\u4e0a\uff0c\u6211\u4eec\u5e0c\u671b\u5b83\u662f\u6709\u5e8f\u7684\uff0c\u5982\u679c\u4e0d\u662f\u90a3\u4e48\u5c31\u9700\u8981\u82b1\u8d39\u201c\u80fd\u91cf\u201d\u8ba9\u4ed6\u7684\u5892\u53d8\u5c0f\uff0c\u8fd9\u6837\u590d\u6742\u5ea6O(nlogn)\u5c31\u4e0a\u53bb\u4e86\uff0c\u8fd9\u91cc\u590d\u6742\u5ea6\u53ef\u4ee5\u770b\u4f5c\u4e3a\u5916\u4f5c\u7528\u529b\u7684\u4f53\u73b0\u3002 \u5176\u6b21\u53cc\u6307\u9488\u95ee\u9898\u7684\u672c\u8d28\u5176\u5b9e\u662f\u7531\u4e8e\u6709\u4e24\u4e2a\u6216\u8005\u591a\u4e2a\u5143\u7d20\u6709\u76f8\u4e92\u4f5c\u7528\u6216\u8005\u76f8\u5173\u8054\uff0c\u56e0\u6b64\u5728\u6539\u53d8\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u7684\u540c\u65f6\u5176\u4ed6\u51e0\u4e2a\u5143\u7d20\u4e5f\u9700\u8981\u8ddf\u7740\u6539\u53d8\uff0c\u56e0\u6b64\u53cc\u6307\u9488\u95ee\u9898\u4e00\u822c\u662f\u5728\u6ee1\u8db3\u51e0\u4e2a\u5143\u7d20\u5173\u7cfb\u4e0d\u53d8\u7684\u60c5\u51b5\u4e4b\u4e0b\uff0c\u6539\u53d8\u4e00\u4e2a\u5143\u7d20\u7684\u540c\u65f6\uff0c\u5bfb\u627e\u5176\u4ed6\u51e0\u4e2a\u5143\u7d20\u6ee1\u8db3\u73b0\u6709\u7684\u5173\u7cfb\u60c5\u51b5\u3002 \u5b9e\u65f6\u66f4\u65b0\u6570\u7ec4 \u4f8b\u9898\uff1a Remove Element \u5206\u6790\uff1a \u8fd9\u9053\u9898\u6709\u51e0\u4e2a\u5173\u952e\u5b57\u9700\u8981\u6ce8\u610f: in place , the order of elements can be changed .\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7528two pointers\uff0c\u4e00\u4e2a\u8bb0\u5f55remove\u8fc7\u540e\u7684\u6570\u7ec4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4f4d\u7f6e\uff0c\u4e00\u4e2a\u7528\u6765\u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5224\u65ad\u6761\u4ef6\u5c31\u662f\u6bd4\u8f83\u8be5\u5143\u7d20\u548ctarget\u7684\u503c\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u5c31\u628a\u5b83copy\u7ed9\u53e6\u4e00\u4e2apointer.\u56e0\u4e3a\u9898\u76ee\u53ea\u9700\u8981\u6c42\u6700\u540e\u7684\u6570\u7ec4\u957f\u5ea6\uff0c\u6240\u4ee5\u8fd4\u56de\u6700\u540e\u8bb0\u5f55\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u4e86\u3002 \u590d\u6742\u5ea6\uff1a \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1). class Solution { public: int removeElement(int A[], int n, int elem) { if(A == nullptr || n == 0) return 0; int index = 0; for(int i = 0; i n ; ++i){ if(A[i] != elem){ A[index++] = A[i]; } } return index; } }; \u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u770b\u8fd9\u9053\u9898\u7684\u4e00\u4e2a\u53d8\u5f62\uff1a \u4f8b\u9898\uff1a Remove Duplicates from Sorted Array \u5206\u6790\uff1a\u8fd9\u9053\u9898\u51e0\u4e4e\u548c\u4e0a\u4e00\u9898\u4e00\u6837\uff0c\u8fd9\u91cc\u6ce8\u610f\u6570\u7ec4\u662f\u6392\u5e8f\u7684\uff0c \u5173\u952e\u8bcd\uff1a in place with constant memory . \u6709\u4e00\u4e2a\u5730\u65b9\u503c\u5f97\u6ce8\u610f\u7b2c\u4e8c\u4e2apointer\u7684\u8d77\u59cb\u70b9\u5e94\u8be5\u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u7b2c\u4e8c\u4e2a\u6307\u9488\u662f\u7528\u6765\u6bd4\u8f83\u548c\u524d\u4e00\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u76f8\u7b49\u5c31skip. \u590d\u6742\u5ea6\uff1a \u65f6\u95f4\u590d\u6742\u5ea6O(n), \u7a7a\u95f4\u590d\u6742\u5ea6O(1). class Solution { public: int removeDuplicates(int A[], int n) { if(A == nullptr || n == 0) return 0; int index = 0; for(int i = 1; i n ; ++i){ if(A[index] != A[i]){ A[++index] = A[i]; } } return index + 1; } }; \u4e0b\u9762\u589e\u52a0\u4e86\u4e00\u70b9\u96be\u5ea6\uff0c\u5982\u679c\u540c\u4e00\u4e2a\u5143\u7d20\u5141\u8bb8\u51fa\u73b0\u4e24\u6b21\u3002 \u4f8b\u9898\uff1a \uff3bRemove Duplicates from Sorted Array II]( https://oj.leetcode.com/problems/remove-duplicates-from-sorted-array-ii/ ) \u5206\u6790\uff1a \u9996\u5148\u60f3\u5230\u7684\u662fhashtable\u50a8\u5b58\u6bcf\u4e2a\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u4ed4\u7ec6\u89c2\u5bdf\u9898\u76ee\u53ef\u4ee5\u53d1\u73b0\u5176\u5b9e\u4e0d\u9700\u8981hashtable\uff0c\u56e0\u4e3a\u6570\u7ec4\u662f\u6392\u5e8f\u7684\uff0c\u91cd\u590d\u7684\u5143\u7d20\u5e94\u8be5\u4f1a\u8fde\u5728\u4e00\u8d77\uff0c\u8fd9\u6837\u904d\u5386\u7684\u65f6\u5019\u591a\u52a0\u4e00\u4e2a\u5224\u65ad\u5c31\u53ef\u4ee5\u89e3\u51b3\u3002 \u590d\u6742\u5ea6\uff1a \u65f6\u95f4\u590d\u6742\u5ea6O(n),\u7a7a\u95f4\u590d\u6742\u5ea6O(1). \u5148\u770b\u4e00\u4e2a\u89e3\u6cd5\u5efa\u7acb\u5728\u4e0a\u4e00\u9898\u7684\u57fa\u7840\u4e0a\uff0c\u5176\u4e2d\u5224\u65ad\u4e86\u524d\u540e\u5143\u7d20\u662f\u5426\u76f8\u7b49\uff0c\u8fd9\u6837\u4fdd\u8bc1\u6700\u591a\u53ea\u6709\u4e24\u4e2a\u76f8\u540c\u7684\u5143\u7d20\uff1a class Solution { public: int removeDuplicates(int A[], int n) { if(A == nullptr || n == 0) return 0; int index = 0; for(int i = 1; i n ; ++i){ if(A[index] == A[i] (index == 0 || A[index-1] != A[index])) A[++index] = A[i]; if(A[index] != A[i]) A[++index] = A[i]; } return index + 1; } }; \u5176\u5b9e\u53ef\u4ee5\u7a0d\u52a0\u6539\u53d8\uff0c\u4f7f\u5f97\u89e3\u6cd5\u66f4\u6709\u53ef\u6269\u5c55\u6027\uff0c\u5904\u7406N\u4e2a\u91cd\u590d\u7684\u5143\u7d20\u7684\u60c5\u5f62\uff1a class Solution { public: int removeDuplicates(int A[], int n) { if(A == nullptr || n == 0) return 0; if(n = 2) return n; int index = 2; for(int i = 2; i n ; ++i){ if(A[i] != A[index - 2]) A[index++] = A[i]; } return index; } }; \u8fd9\u91cc\u76f4\u63a5\u4ece\u7b2c\u4e09\u4e2a\u5143\u7d20\u5f00\u59cb\u6bd4\u8f83\uff0c\u5982\u679c\u662f\u5141\u8bb8N\u4e2a\u91cd\u590d\u5143\u7d20\uff0c2\u53ef\u4ee5\u6539\u4e3aN,\u4ee3\u7801\u6bd4\u4e0a\u4e2a\u89e3\u6cd5\u7b80\u6d01\u4e5f\u66f4\u5177\u6709\u53ef\u62d3\u5c55\u6027\u3002 \u524d\u9762\u51e0\u9053\u9898\u90fd\u662f\u5220\u9664\u5143\u7d20\uff0c\u8fd8\u6709\u4e00\u7c7b\u95ee\u9898\u5c31\u662f\u6392\u5e8f\u95ee\u9898\u6709\u65f6\u5019\u4e5f\u53ef\u4ee5\u7528Two Pointers\u7684\u89e3\u6cd5. \u4f8b\u9898: [Sort Colors] ( https://oj.leetcode.com/problems/sort-colors/ ) \u5206\u6790\uff1a\u8fd9\u91cc\u6709\u4e09\u4e2a\u6307\u9488\uff0c\u4f46\u662f\u5b9e\u9645\u662f\u4e24\u4e2a\u5728\u64cd\u4f5c\uff0c\u4e00\u4e2a\u5b58red\u7684index\uff0c\u4e00\u4e2a\u5b58blue\u7684index, \u7136\u540e\u4e24\u8fb9\u5f80\u4e2d\u95f4\u8d70\u3002 \u590d\u6742\u5ea6\uff1a \u65f6\u95f4\u590d\u6742\u5ea6O(n), \u7a7a\u95f4\u590d\u6742\u5ea6O(1). class Solution { public: void sortColors(int A[], int n) { int j = 0, k = n-1; int i = 0; while(i k + 1){ if(A[i] == 0){ int t = A[j]; A[j] = A[i]; A[i] = t; j++; i++; }else if(A[i] == 2){ int t = A[k]; A[k] = A[i]; A[i] = t; k--; }else{ i++; } } } }; \u6b64\u5916\u8fd9\u9053\u9898\u8fd8\u6709\u4e2a\u975e\u5e38\u5de7\u5999\u7684\u89e3\u6cd5\uff0c\u5229\u7528\u5230\u4e86partition\u4e2d\u7684\u539f\u7406\uff1a class Solution { public: void sortColors(int A[], int n) { int j = 0; int k = 0; int i = 0; for(int m = 0; m n ; ++m){ if(A[m] == 2){ A[k++] = 2; }else if(A[m] == 1){ A[k++] = 2; A[j++] = 1; }else if(A[m] == 0){ A[k++] = 2; A[j++] = 1; A[i++] = 0; } } } }; \u96e8\u6c34\u95ee\u9898 \u6b64\u7c7b\u95ee\u9898\u8868\u9762\u4e0a\u770b\u8ddf\u53cc\u6307\u9488\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u4f46\u662f\u7ecf\u8fc7\u4ed4\u7ec6\u5206\u6790\uff0c\u4f1a\u53d1\u73b0\u6709\u5f88\u591a\u5171\u540c\u4e4b\u5904\u3002 \u4f8b\u9898\uff1a Container with Most water \u5206\u6790\uff1a\u8fd9\u9053\u9898\u53ef\u4ee5\u5148\u627e\u51e0\u4e2a\u6570\u6a21\u62df\u4e00\u4e0b\uff0c\u4f1a\u53d1\u73b0\u5982\u679c\u60f3\u8ba9\u5bb9\u5668\u50a8\u5b58\u7684\u6c34\u591a\uff0c\u9700\u8981\u5de6\u53f3\u4e24\u4e2a\u6570\u8ddd\u79bb\u8d8a\u8fdc\u8d8a\u597d\uff0c\u5e76\u4e14\u4e24\u4e2a\u6570\u4e2d\u8f83\u5c0f\u7684\u6570\u503c\u8d8a\u5927\u8d8a\u597d\u3002\u9996\u5148\u8003\u8651\u66b4\u529b\u89e3\u6cd5\uff0c\u56fa\u5b9a\u4e00\u8fb9\uff0c\u7136\u540e\u627e\u53e6\u4e00\u8fb9\u8d8a\u5927\u8d8a\u597d\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u6570\u90fd\u67e5\u627e\u4e00\u4e0b\uff0c\u5c31\u9700\u8981O(n^2).\u4ed4\u7ec6\u7814\u7a76\u53d1\u73b0\uff0c\u8fd9\u9053\u9898\u662f\u53ef\u4ee5\u7528\u53cc\u6307\u9488\u7684\uff0c\u56e0\u4e3a\u6700\u540e\u7684\u7ed3\u679c\u88ab\u51b3\u5b9a\u4e8e\u5de6\u53f3\u4e24\u4e2a\u6570\uff0c\u90a3\u4e48\u600e\u4e48\u8fdb\u884c\u904d\u5386\u5462\uff0c\u5982\u679c\u56fa\u5b9a\u4e00\u8fb9\uff0c\u6c38\u8fdc\u5e0c\u671b\u627e\u6bd4\u8fd9\u4e00\u8fb9\u5927\u7684\u6570\uff0c\u56e0\u6b64\u5982\u679c\u6bd4\u8fd9\u4e00\u8fb9\u5c0f\u53ef\u4ee5skip\u6389\u3002\u4e8e\u662fleft \u548cright\u4e24\u8fb9\u5de6\u53f3\u5939\u903c\uff0c\u9047\u5230\u8f83\u5c0f\u7684\u6570\u5c31skip\u6389\u76f4\u5230\u91cd\u5408\u3002 \u590d\u6742\u5ea6\uff1a \u65f6\u95f4\u590d\u6742\u5ea6O(n), \u7a7a\u95f4\u590d\u6742\u5ea6O(1). class Solution { public: int maxArea(vector int height) { if(height.size() == 0) return 0; int i = 0; int j = height.size() -1; int maxA = INT_MIN; while(i j){ int area = min(height[j],height[i]) * (j-i); maxA = max(maxA, area); if(height[i] height[j]){ i++; }else { j--; } } return maxA; } }; \u518d\u6765\u770b\u4e00\u4e2a\u7c7b\u4f3c\u7684\u9898\u76ee\uff0c\u8fd9\u91cccontainer\u4e0d\u6b62\u4e00\u4e2a\u4e86\u3002 \u9898\u76ee\uff1a Trapping Rain Water \u5206\u6790\uff1a\u8fd9\u91cc\u4e5f\u662f\u7c7b\u4f3c\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u67f1\u5b50\u9700\u8981\u5206\u522b\u5bfb\u627e\u5b83\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u6700\u9ad8\u7684\u67f1\u5b50\uff0c\u8fd9\u6837\u8be5\u67f1\u5b50\u80fd\u5bb9\u7eb3\u7684\u9762\u79ef\u5c31\u662fmin(max_left, max_right) - height.\u56e0\u6b64\u89e3\u6cd5\u81ea\u7136\u53d8\u6210\u4e86\u4ece\u5de6\u5f80\u53f3\u904d\u5386\uff0c\u627e\u5230\u6bcf\u4e2a\u67f1\u5b50\u5de6\u8fb9\u6700\u5927\u503c\uff0c\u7136\u540e\u4ece\u53f3\u5411\u5de6\u904d\u5386\u627e\u5230\u6bcf\u4e2a\u67f1\u5b50\u53f3\u8fb9\u6700\u5927\u503c\u3002\u6700\u540e\u4e00\u6b21\u904d\u5386\u8ba1\u7b97\u6bcf\u4e2a\u67f1\u5b50\u53ef\u4ee5\u5bb9\u7eb3\u7684\u9762\u79ef\u3002 \u590d\u6742\u5ea6\uff1a\u65f6\u95f4\u590d\u6742\u5ea6O(n), \u7a7a\u95f4\u590d\u6742\u5ea6O(n). class Solution { public: int trap(int A[], int n) { if(A == nullptr || n == 0) return 0; vector int right_height(n); vector int left_height(n); int height = 0, total = 0; for(int i = 0; i n; ++i){ if(A[i] height) height = A[i]; right_height[i] = height; } height = 0; for(int i = n -1; i = 0; --i){ if(A[i] height) height = A[i]; left_height[i] = height; } for(int i = 0; i n; ++i){ total += min(right_height[i], left_height[i]) - A[i]; } return total; } }; \u8fd9\u9053\u9898\u8fd8\u6709\u4e00\u4e2a\u5206\u800c\u6cbb\u4e4b\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5148\u904d\u5386\u4e00\u8fb9\u6570\u7ec4\u627e\u5230\u6700\u5927\u503c\uff0c\u7136\u540e\u5728\u6700\u9ad8\u67f1\u5b50\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u5206\u522b\u904d\u5386\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6700\u540e\u7684\u7ed3\u679c\u3002 \u590d\u6742\u5ea6\uff1a \u65f6\u95f4\u590d\u6742\u5ea6O(n), \u7a7a\u95f4\u590d\u6742\u5ea6O(1). class Solution { public: int trap(int A[], int n) { if(A == nullptr || n == 0) return 0; int result = 0; int max = -1, index = 0; for(int i = 0; i n ; ++i){ if(A[i] max){ max = A[i]; index = i; } } int left = -1; for(int i = 0; i index; ++i){ if(A[i] left) left = A[i]; else result += left - A[i]; } int right = -1; for(int i = n-1; i index; --i){ if(A[i] right) right = A[i]; else result += right - A[i]; } return result; } }; \u6c42\u548c\u95ee\u9898 \u4e0b\u9762\u6211\u4eec\u5f00\u59cb\u5206\u6790\u4e00\u4e0b\u4e00\u7cfb\u5217\u5173\u4e8e\u5143\u7d20\u6c42\u548c\u7684\u95ee\u9898\uff0c\u8fd9\u4e00\u7cfb\u5217\u95ee\u9898\u7279\u5f81\u5982\u4e0b\uff0c\u5728\u4e00\u7ec4\u4efb\u610f\u6392\u5e8f\u6570\u7ec4\u4e2d\uff0c\u5bfb\u627eN\u4e2a\u6570\u4f7f\u5f97\u5b83\u4eec\u7684\uff08\u79ef\u548c\u5dee\u9664\uff09\u6ee1\u8db3\u67d0\u4e00\u4e2a\u6761\u4ef6\uff0c\u8fd9\u91cc\u53ef\u4ee5\u662f\u5b83\u4eec\u7ecf\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\u6ee1\u8db3\u67d0\u4e00\u4e2a\u503c\uff0c\u6216\u8005\u6c42\u4ed6\u4eec\u7684\u6700\u5927\u503c\u7b49\u7b49\u3002\u5904\u7406\u6b64\u7c7b\u95ee\u9898\u7684\u65f6\u5019\uff0c\u9996\u5148\u770b\u6570\u7ec4\u662f\u5426\u662f\u6709\u5e8f\u7684\uff0c\u6839\u636e\u4e4b\u524d\u7684\u7406\u8bba\u5982\u679c\u6570\u7ec4\u662f\u65e0\u5e8f\u7684\uff0c\u90a3\u4e48\u9700\u8981\u989d\u5916\u7684\u529b\u4f7f\u5176\u6709\u5e8f\uff0c\u4e00\u822c\u662f\u6392\u5e8f\u6216\u8005hashtable\u6765\u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\uff0c\u590d\u6742\u5ea6\u4f1a\u4e0a\u5347\u3002\u7136\u540e\u5728\u6570\u7ec4\u6709\u5e8f\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u5de6\u53f3\u5939\u903c\uff0c\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\u3002 \u4f8b\u9898\uff1b Two Sum \u5206\u6790\uff1a \u4e00\u4e2a\u7ecf\u5178\u7684\u6c42\u548c\u95ee\u9898\uff0c\u9996\u5148\u770b\u6570\u7ec4\u662f\u5426\u6709\u5e8f\uff0c \u5f88\u9057\u61be\uff0c\u6ca1\u6709\uff01\u56e0\u6b64\u9700\u8981\u6392\u5e8f\uff0c\u4f46\u662f\u6ce8\u610f\u8fd9\u6837\u590d\u6742\u5ea6\u5c31\u53d8\u6210O(nlgn)\u4e86\uff0c\u6709\u6ca1\u6709\u66f4\u597d\u7684\u65b9\u6cd5\uff0chashtable!\u53ef\u4ee5\u4fdd\u6301\u590d\u6742\u5ea6\u5728O(n)\u53c8\u53ef\u4ee5\u8d77\u5230\u6392\u5e8f\u7684\u6548\u679c\u3002\u8fd9\u91cc\u6ce8\u610f\u5728\u5faa\u73af\u91cc\u9762\u7684\u5224\u65ad\u6761\u4ef6\uff0c\u9996\u5148\u770btarget - number[i]\u662f\u5426\u5728hashtable\u91cc\u9762\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u5c31\u8f93\u51fa\u7ed3\u679c\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8bb0\u5f55\u5f53\u524d\u7684\u6570\u8fdb\u5165hashtable\u91cc\u9762\u3002 \u590d\u6742\u5ea6\uff1a \u65f6\u95f4\u590d\u6742\u5ea6O(n),\u7a7a\u95f4\u590d\u6742\u5ea6O(1). class Solution { public: vector int twoSum(vector int numbers, int target) { vector int answer(2,0); unordered_map int, int record; for(int i = 0; i numbers.size(); ++i){ int x = numbers[i]; if(record.find(target - x) != record.end()){ answer[1] = i + 1; answer[0] = record[target - numbers[i]]; break; } record[numbers[i]] = i + 1; } return answer; } }; \u4f8b\u9898\uff1a 3Sum Closest \u5206\u6790\uff1a\u8fd8\u662f\u9996\u5148\u770b\u662f\u5426\u6570\u7ec4\u662f\u6709\u5e8f\u7684\uff0c\u5982\u679c\u4e0d\u662f\u6709\u5e8f\u7684\u5c31\u5f97\u6392\u5e8f\uff0c\u8fd9\u9053\u9898\u6d89\u53ca\u5230\u4e09\u4e2a\u5143\u7d20\uff08\u4e09\u4f53\u95ee\u9898\uff09\uff0c\u539f\u5219\u4e0a\u4e09\u4f53\u95ee\u9898\u5305\u542b\u4e86\u4e00\u5207\u4e09\u4e2a\u5143\u7d20\u53ca\u4ee5\u4e0a\u7684\u95ee\u9898\uff0c\u5982\u679c\u8bf4\u4e24\u4f53\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u6280\u5de7\uff08\u5982hashtable)\u89e3\u51b3\u7684\u8bdd\uff0c\u4e09\u4f53\u95ee\u9898\u5c31\u662f\u590d\u6742\u5ea6\u63d0\u9ad8\u4e86\u4e00\u4e2a\u53f0\u9636\uff0c\u4e00\u4e9b\u666e\u9002\u4e8e\u4e24\u4f53\u7684\u6280\u5de7\u5728\u4e09\u4f53\u95ee\u9898\u8fd9\u91cc\u884c\u4e0d\u901a\u4e86\u3002\u56e0\u6b64\u5728\u8fd9\u91cc\u9996\u5148\u8981\u5bf9\u6570\u7ec4\u6392\u5e8f\uff0c \u6b64\u9898\u6d89\u53ca\u5230\u4e09\u4e2a\u5143\u7d20\uff0c\u9996\u5148\u5934\u5c3e\u5404\u653e\u4e00\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u4e2d\u95f4\u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff0c\u5de6\u53f3\u5939\u903c\uff0c\u6211\u4eec\u7528\u4e00\u4e2agap\u6765\u8ba1\u7b97target\u548c\u73b0\u5728\u6240\u6709\u503c\u7684\u548c\u4e4b\u5dee\uff0c\u7531\u4e8e\u5df2\u7ecf\u6392\u597d\u5e8f\uff0c\u53ea\u8981\u6bd4\u8f83target\u548c\u73b0\u5728sum\u7684\u503c\uff0c\u5982\u679ctarget\u503c\u8f83\u5c0f\uff0c\u90a3\u4e48\u8bf4\u660emid\u7684\u503c\u8fc7\u5c0f\u56e0\u6b64\u5f80\u4e2d\u95f4\u9760\u62e2\uff0c\u53cd\u4e4bright\u7684\u503c\u8fc7\u5927\u56e0\u6b64\u5411\u4e2d\u95f4\u9760\u62e2\u3002\u5c31\u8fd9\u6837\u505a\u4e24\u91cd\u904d\u5386\u53ef\u4ee5\u8ba1\u7b97\u5230\u6700\u63a5\u8fd1target\u7684\u503c\uff0c\u56e0\u4e3a\u8fd9\u9053\u9898\u53ea\u8981\u627e\u6700\u63a5\u8fd1\u7684\u6570\u56e0\u6b64\u6ca1\u67093Sum\u90a3\u4e48\u9650\u5236\u6761\u4ef6\u591a\u3002 \u590d\u6742\u5ea6\uff1a \u65f6\u95f4\u590d\u6742\u5ea6O(n^2),\u7a7a\u95f4\u590d\u6742\u5ea6O(1). class Solution { public: int threeSumClosest(vector int num, int target) { int sum = 0; sort(num.begin(), num.end()); int min_gap = INT_MAX; for(auto start = num.begin(); start != prev(num.end(), 2); ++start){ auto mid = next(start); auto last = prev(num.end(), 1); while(mid last){ int sumup = *start + *mid + *last; int gap = abs(target -sumup); if(gap min_gap){ min_gap = gap; sum = sumup; } if(sumup target){ mid++; }else{ last--; } } } return sum; } }; \u4f8b\u9898\uff1a 3Sum \u5206\u6790\uff1a\u8fd9\u9053\u9898\u662f\u6807\u51c6\u7684\u6c42\u548c\u95ee\u9898\uff0c\u65b9\u6cd5\u4e0e\u524d\u9762\u7c7b\u4f3c\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u91cd\u590d\u6570\u7684\u51fa\u73b0\u4e5f\u5c31\u662fwhile(b c)\u91cc\u9762\u4e0d\u65ad\u5939\u903c\u5982\u679c\u51fa\u73b0\u8fd1\u90bb\u7684\u5143\u7d20\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u9700\u8981\u4e00\u4e2awhile\u8bed\u53e5\u6765\u79fb\u52a8,\u8fd9\u6837\u5f97\u5230\u7684\u6700\u540e\u6570\u7ec4\u4e00\u5b9a\u6ca1\u6709\u91cd\u590d\u6570\u3002\u8fd8\u6709\u5c31\u662fa\u7684\u91cd\u590d\u60c5\u51b5\u4e5f\u9700\u8981\u8003\u8651\u3002 \u590d\u6742\u5ea6\uff1a\u65f6\u95f4\u590d\u6742\u5ea6O(n^2), \u7a7a\u95f4\u590d\u6742\u5ea6O(1). Solution { public: vector vector int threeSum(vector int num) { vector vector int result; if(num.size() 3) return result; sort(num.begin(), num.end()); const int target = 0; for(auto a = 0; a num.size()-2; ++a){ if( a 0 num[a] == num[a-1]) continue; auto b = a + 1; auto c = num.size() - 1; while(b c){ if(num[a] + num[b] + num[c] target){ do{b++;}while(b c num[b] == num[b-1]); }else if (num[a] + num[b] + num[c] target){ do{c--;}while(b c num[c] == num[c+1]); }else{ result.push_back({num[a], num[b],num[c]}); do{b++;} while(b c num[b] == num[b-1]); do{c--;} while(b c num[c] == num[c+1]); } } } return result; } }; \u4f8b\u9898\uff1a 4Sum \u5206\u6790\uff1a\u5982\u679c\u4f7f\u7528\u4e0a\u9762\u7c7b\u4f3c\u7684\u65b9\u6cd5\u590d\u6742\u5ea6\u8fbe\u5230\u4e86O(N^3),\u6709\u6ca1\u6709\u66f4\u7701\u65f6\u95f4\u7684\u65b9\u6cd5\u5462\uff1f\u60f3\u5230\u4e00\u5171\u662f\u56db\u4e2a\u6570\u4e4b\u548c\uff0c\u81ea\u7136\u60f3\u5230\u53ef\u4e0d\u53ef\u4ee5\u4e24\u4e24\u914d\u5bf9\uff0c\u8fd9\u6837\u628a\u95ee\u9898\u53ef\u4ee5\u7b80\u5316\u4e3a2Sum. \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 multimap \u6765\u50a8\u5b58\u4e24\u4e2a\u6570\u7684\u548c\uff0c\u9996\u5148\u8981\u5f04\u6e05\u695akey\u662f\u4ec0\u4e48\uff0c\u56e0\u4e3a\u4e0d\u540c\u7684\u4e24\u4e2a\u6570\u53ef\u80fd\u6709\u76f8\u540c\u7684\u548c\uff0c\u56e0\u6b64key\u4e3a\u4e24\u4e2a\u6570\u7684\u548c\uff0cvalue\u5219\u662fa pair of indexes\u8bb0\u5f55\u4e24\u4e2a\u6570\u5728\u6570\u7ec4\u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u904d\u5386multimap\u7684\u540c\u65f6\uff0c\u627e\u5230\u53e6\u4e00\u7ec4\u6570\u4f7f\u5f97\u4e24\u7ec4\u6570\u4e4b\u540e\u4e3atarget. \u590d\u6742\u5ea6\uff1a\u65f6\u95f4\u590d\u6742\u5ea6O(N^2), \u7a7a\u95f4\u590d\u6742\u5ea6O(N^2). class Solution { public: vector vector int fourSum(vector int num, int target) { vector vector int result; if (num.size() 4) return result; sort(num.begin(), num.end()); unordered_multimap int, pair int, int cache; for (int i = 0; i + 1 num.size(); ++i) for (int j = i + 1; j num.size(); ++j) cache.insert(make_pair(num[i] + num[j], make_pair(i, j))); for (auto i = cache.begin(); i != cache.end(); ++i) { int x = target - i- first; auto range = cache.equal_range(x); for (auto j = range.first; j != range.second; ++j) { auto a = i- second.first; auto b = i- second.second; auto c = j- second.first; auto d = j- second.second; if (a != c a != d b != c b != d) { vector int vec = { num[a], num[b], num[c], num[d] }; sort(vec.begin(), vec.end()); result.push_back(vec); } } } sort(result.begin(), result.end()); result.erase(unique(result.begin(), result.end()), result.end()); return result; } };","title":"\u53cc\u6307\u9488"},{"location":"double-pointer/#_1","text":"","title":"\u53cc\u6307\u9488\u95ee\u9898"},{"location":"double-pointer/#_2","text":"\u53cc\u6307\u9488 \uff0c\u6307\u7684\u662f\u5728\u904d\u5386\u5bf9\u8c61\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u662f\u666e\u901a\u7684\u4f7f\u7528\u5355\u4e2a\u6307\u9488\u8fdb\u884c\u8bbf\u95ee\uff0c\u800c\u662f\u4f7f\u7528\u4e24\u4e2a\u76f8\u540c\u65b9\u5411\uff08 \u5feb\u6162\u6307\u9488 \uff09\u6216\u8005\u76f8\u53cd\u65b9\u5411\uff08 \u5bf9\u649e\u6307\u9488 \uff09\u7684\u6307\u9488\u8fdb\u884c\u626b\u63cf\uff0c\u4ece\u800c\u8fbe\u5230\u76f8\u5e94\u7684\u76ee\u7684\u3002 \u5206\u7c7b\uff1a\u5bf9\u649e\u6307\u9488\u3001\u5feb\u6162\u6307\u9488 \u6362\u8a00\u4e4b\uff0c\u53cc\u6307\u9488\u6cd5\u5145\u5206\u4f7f\u7528\u4e86\u6570\u7ec4\u6709\u5e8f\u8fd9\u4e00\u7279\u5f81\uff0c\u4ece\u800c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u80fd\u591f\u7b80\u5316\u4e00\u4e9b\u8fd0\u7b97\u3002 \u5728 LeetCode \u9898\u5e93\u4e2d\uff0c\u5173\u4e8e \u53cc\u6307\u9488 \u7684\u95ee\u9898\u8fd8\u662f\u633a\u591a\u7684\u3002 \u53cc\u6307\u9488","title":"\u4ec0\u4e48\u662f\u53cc\u6307\u9488"},{"location":"double-pointer/#js","text":"","title":"JS\u4f8b\u5b50"},{"location":"double-pointer/#_3","text":"\u5bf9\u649e\u6307\u9488 \u662f\u6307\u5728\u6709\u5e8f\u6570\u7ec4\u4e2d\uff0c\u5c06\u6307\u5411\u6700\u5de6\u4fa7\u7684\u7d22\u5f15\u5b9a\u4e49\u4e3a \u5de6\u6307\u9488(left) \uff0c\u6700\u53f3\u4fa7\u7684\u5b9a\u4e49\u4e3a \u53f3\u6307\u9488(right) \uff0c\u7136\u540e\u4ece\u4e24\u5934\u5411\u4e2d\u95f4\u8fdb\u884c\u6570\u7ec4\u904d\u5386\u3002\u5bf9\u649e\u6570\u7ec4\u9002\u7528\u4e8e \u6709\u5e8f\u6570\u7ec4 \uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u4f60\u9047\u5230\u9898\u76ee\u7ed9\u5b9a\u6709\u5e8f\u6570\u7ec4\u65f6\uff0c\u5e94\u8be5\u7b2c\u4e00\u65f6\u95f4\u60f3\u5230\u7528\u5bf9\u649e\u6307\u9488\u89e3\u9898\u3002 \u4f2a\u4ee3\u7801\u5927\u81f4\u5982\u4e0b\uff1a function fn (list) { var left = 0; var right = list.length - 1; //\u904d\u5386\u6570\u7ec4 while (left = right) { left++; // \u4e00\u4e9b\u6761\u4ef6\u5224\u65ad \u548c\u5904\u7406 ... ... right--; } } \u4e3e\u4e2aLeetCode\u4e0a\u7684\u4f8b\u5b50\uff1a \u4ee5 LeetCode 881 \u6551\u751f\u8247 \u95ee\u9898\u4e3a\u4f8b \u7531\u4e8e\u672c\u9898\u53ea\u8981\u6c42\u8ba1\u7b97\u51fa \u6700\u5c0f\u8239\u6570 \uff0c\u6240\u4ee5\u539f\u6570\u7ec4\u662f\u5426\u88ab\u6539\u53d8\uff0c\u548c\u5143\u7d20\u7d22\u5f15\u4f4d\u7f6e\u90fd\u4e0d\u8003\u8651\u5728\u5185\uff0c\u6240\u4ee5\u53ef\u4ee5\u5148\u5bf9\u4e8e\u7ed9\u5b9a\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u518d\u4ece\u6570\u7ec4\u4e24\u4fa7\u5411\u4e2d\u95f4\u904d\u5386\u3002\u6240\u4ee5\u89e3\u9898\u601d\u8def\u5982\u4e0b\uff1a \u5bf9\u7ed9\u5b9a\u6570\u7ec4\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f \u521d\u59cb\u5316\u5de6\u53f3\u6307\u9488 \u6bcf\u6b21\u90fd\u7528\u4e00\u4e2a\u201d\u6700\u91cd\u7684\u201c\u548c\u4e00\u4e2a\u201d\u6700\u8f7b\u7684\u201c\u8fdb\u884c\u914d\u5bf9\uff0c\u5982\u679c\u4e8c\u4eba\u91cd\u91cf\u5c0f\u4e8e Limit \uff0c\u5219\u6b64\u65f6\u7684\u201d\u6700\u8f7b\u7684\u201c\u4e0a\u8239\uff0c\u5373\uff08 left++ \uff09\u3002\u4e0d\u7ba1\u201d\u6700\u8f7b\u7684\u201c\u662f\u5426\u4e0a\u8239\uff0c\u201d\u6700\u91cd\u7684\u201c\u90fd\u8981\u4e0a\u8239\uff0c\u5373\uff08 right-- \uff09\u5e76\u4e14\u6240\u9700\u8239\u6570\u91cf\u52a0\u4e00\uff0c\u5373\uff08 num++ \uff09 \u4ee3\u7801\u5982\u4e0b\uff1a var numRescueBoats = function(people, limit) { people.sort((a, b) = (a - b)); var num = 0 let left = 0 let right = people.length - 1 while (left = right) { if ((people[left] + people[right]) = limit) { left++ } right-- num++ } return num };","title":"\u5bf9\u649e\u6307\u9488"},{"location":"double-pointer/#_4","text":"\u5feb\u6162\u6307\u9488 \u4e5f\u662f\u53cc\u6307\u9488\uff0c\u4f46\u662f\u4e24\u4e2a\u6307\u9488\u4ece\u540c\u4e00\u4fa7\u5f00\u59cb\u904d\u5386\u6570\u7ec4\uff0c\u5c06\u8fd9\u4e24\u4e2a\u6307\u9488\u5206\u522b\u5b9a\u4e49\u4e3a \u5feb\u6307\u9488\uff08fast\uff09 \u548c \u6162\u6307\u9488\uff08slow\uff09 \uff0c\u4e24\u4e2a\u6307\u9488\u4ee5\u4e0d\u540c\u7684\u7b56\u7565\u79fb\u52a8\uff0c\u76f4\u5230\u4e24\u4e2a\u6307\u9488\u7684\u503c\u76f8\u7b49\uff08\u6216\u5176\u4ed6\u7279\u6b8a\u6761\u4ef6\uff09\u4e3a\u6b62\uff0c\u5982fast\u6bcf\u6b21\u589e\u957f\u4e24\u4e2a\uff0cslow\u6bcf\u6b21\u589e\u957f\u4e00\u4e2a\u3002 \u4ee5 LeetCode 141.\u73af\u5f62\u94fe\u8868 \u4e3a\u4f8b,\uff0c\u5224\u65ad\u7ed9\u5b9a\u94fe\u8868\u4e2d\u662f\u5426\u5b58\u5728\u73af\uff0c\u53ef\u4ee5\u5b9a\u4e49\u5feb\u6162\u4e24\u4e2a\u6307\u9488\uff0c\u5feb\u6307\u9488\u6bcf\u6b21\u589e\u957f\u4e00\u4e2a\uff0c\u800c\u6162\u6307\u9488\u6bcf\u6b21\u589e\u957f\u4e24\u4e2a\uff0c\u6700\u540e\u4e24\u4e2a\u6307\u9488\u6307\u5411\u8282\u70b9\u7684\u503c\u76f8\u7b49\uff0c\u5219\u8bf4\u660e\u6709\u73af\u3002\u5c31\u597d\u50cf\u4e00\u4e2a\u73af\u5f62\u8dd1\u9053\u4e0a\u6709\u4e00\u5feb\u4e00\u6162\u4e24\u4e2a\u8fd0\u52a8\u5458\u8d5b\u8dd1\uff0c\u5982\u679c\u65f6\u95f4\u8db3\u591f\u957f\uff0c\u8dd1\u5730\u5feb\u7684\u8fd0\u52a8\u5458\u4e00\u5b9a\u4f1a\u8d76\u4e0a\u6162\u7684\u8fd0\u52a8\u5458\u3002 \u89e3\u9898\u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * function ListNode(val) { * this.val = val; * this.next = null; * } */ /** * @param {ListNode} head * @return {boolean} */ var hasCycle = function(head) { if (head === null || head.next === null) { return false; } let slow = head; let fast = head.next; while (slow !== fast) { if (fast === null || fast.next === null) { return false } slow = slow.next fast = fast.next.next } return true }; \u518d\u6bd4\u5982 LeetCode 26 \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 \uff0c\u8fd9\u91cc\u8fd8\u662f\u5b9a\u4e49\u5feb\u6162\u4e24\u4e2a\u6307\u9488\u3002\u5feb\u6307\u9488\u6bcf\u6b21\u589e\u957f\u4e00\u4e2a\uff0c\u6162\u6307\u9488\u53ea\u6709\u5f53\u5feb\u6162\u6307\u9488\u4e0a\u7684\u503c\u4e0d\u540c\u65f6\uff0c\u624d\u589e\u957f\u4e00\u4e2a\uff08\u7531\u4e8e\u662f\u6709\u5e8f\u6570\u7ec4\uff0c\u5feb\u6162\u6307\u9488\u503c\u4e0d\u7b49\u8bf4\u660e\u627e\u5230\u4e86\u65b0\u503c\uff09\u3002 \u771f\u5b9e\u4ee3\u7801\uff1a var removeDuplicates = function (nums) { if (nums.length === 0) { return 0; } let slow = 0; for (let fast = 0; fast nums.length; fast++) { if (nums[fast] !== nums[slow]) { slow++; nums[slow] = nums[fast]; } } // Michael\uff1a\u8fd9\u91cc\u7684\u7b97\u6cd5\u4e0d\u5b8c\u5584\uff0c\u73b0\u5728\u53ea\u83b7\u53d6\u4e86\u8fd4\u56de\u7684\u4e0d\u91cd\u590d\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u90a3\u4e48\u539f\u6765\u7684\u6570\u7ec4\u540e\u9762\u7684\u5143\u7d20\u5e94\u8be5\u5220\u9664[1,1,1,1,2,3] \u53d8\u6210 [1,2,3,1,2,3] \u540e\u9762\u7684\u9700\u8981\u76f4\u63a5\u53bb\u6389\uff0c\u8fd9\u6837\u624d\u80fd\u6ee1\u8db3\u8981\u6c42\u3002\u8fd9\u4e2a\u601d\u8def\u6bd4\u5faa\u73af\u4e00\u6b21spliec\u66f4\u597d return slow + 1; };","title":"\u5feb\u6162\u6307\u9488"},{"location":"double-pointer/#_5","text":"\u5f53\u9047\u5230\u6709\u5e8f\u6570\u7ec4\u65f6\uff0c\u5e94\u8be5\u4f18\u5148\u60f3\u5230 \u53cc\u6307\u9488 \u6765\u89e3\u51b3\u95ee\u9898\uff0c\u56e0\u4e24\u4e2a\u6307\u9488\u7684\u540c\u65f6\u904d\u5386\uff0c\u4f1a\u51cf\u5c11\u7a7a\u95f4\u590d\u6742\u5ea6\u548c\u65f6\u95f4\u590d\u6742\u5ea6\u3002","title":"\u603b\u7ed3"},{"location":"double-pointer/#go","text":"\u53cc\u6307\u9488\u4e3b\u8981\u7528\u4e8e\u904d\u5386\u6570\u7ec4\uff0c\u4e24\u4e2a\u6307\u9488\u6307\u5411\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u4ece\u800c\u534f\u540c\u5b8c\u6210\u4efb\u52a1\u3002\u53cc\u6307\u9488\u53ef\u4ee5\u4ece\u4e0d\u540c\u7684\u65b9\u5411\u5411\u4e2d\u95f4\u903c\u8fd1\u4e5f\u53ef\u4ee5\u671d\u7740\u540c\u4e00\u4e2a\u65b9\u5411\u904d\u5386\u3002 \u5728LeedCode\u4e2d\u6709\u5f88\u591a\u9898\u76ee\u53ef\u4ee5\u901a\u8fc7\u53cc\u6307\u9488\u7684\u601d\u60f3\u6765\u89e3\u7b54\u3002\u5176\u4e2d\u5305\u62ec\uff1a","title":"Go\u4f8b\u5b50"},{"location":"double-pointer/#1-two-sum","text":"Leetcode \uff1a167. Two Sum II - Input array is sorted (Easy) Input: numbers={2, 7, 11, 15}, target=9 Output: index1=1, index2=2 \u9898\u76ee\u63cf\u8ff0\uff1a\u5728\u6709\u5e8f\u6570\u7ec4\u4e2d\u627e\u51fa\u4e24\u4e2a\u6570\uff0c\u4f7f\u5b83\u4eec\u7684\u548c\u4e3a target\u3002 \u4f7f\u7528\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u503c\u8f83\u5c0f\u7684\u5143\u7d20\uff0c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u503c\u8f83\u5927\u7684\u5143\u7d20\u3002 \u6307\u5411\u8f83\u5c0f\u5143\u7d20\u7684\u6307\u9488\u4ece\u5934\u5411\u5c3e\u904d\u5386\uff0c\u6307\u5411\u8f83\u5927\u5143\u7d20\u7684\u6307\u9488\u4ece\u5c3e\u5411\u5934\u904d\u5386\u3002 \u5982\u679c\u4e24\u4e2a\u6307\u9488\u6307\u5411\u5143\u7d20\u7684\u548c sum == target\uff0c\u90a3\u4e48\u5f97\u5230\u8981\u6c42\u7684\u7ed3\u679c\uff1b \u5982\u679c sum target\uff0c\u79fb\u52a8\u8f83\u5927\u7684\u5143\u7d20\uff0c\u4f7f sum \u53d8\u5c0f\u4e00\u4e9b\uff1b \u5982\u679c sum target\uff0c\u79fb\u52a8\u8f83\u5c0f\u7684\u5143\u7d20\uff0c\u4f7f sum \u53d8\u5927\u4e00\u4e9b\u3002 func twoSum(numbers []int, target int) []int { for i,j :=0,len(numbers)-1;i j;{ if numbers[i] + numbers[j] == target { return []int{i+1,j+1} } if numbers[i] + numbers[j] target { i++ continue } if numbers[i] + numbers[j] target { j-- continue } } return []int{} }","title":"1\u3001\u6709\u5e8f\u6570\u7ec4\u7684 Two Sum"},{"location":"double-pointer/#2","text":"633. Sum of Square Numbers (Easy) Input: 5 Output: True Explanation: 1 * 1 + 2 * 2 = 5 \u9898\u76ee\u63cf\u8ff0\uff1a\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u4e24\u4e2a\u6570\u7684\u5e73\u65b9\u548c\u3002 /*\u8bbe\u7f6e\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u4ece\u524d\uff080\uff09\u5f00\u59cb\u904d\u5386\uff0c\u4e00\u4e2a\u4ece\u540e\uff08sqrt(n)\uff09\u5f00\u59cb\u904d\u5386\uff0c\u76f4\u5230\u627e\u5230\u5408\u9002\u7684\u89e3 */ func judgeSquareSum(c int) bool { for i,j:=0,int(math.Sqrt(float64(c)));i =j;{ if i*i + j*j == c { return true } if i*i + j*j c { i++ continue } if i*i + j*j c { j-- continue } } return false }","title":"2\u3001\u4e24\u6570\u5e73\u65b9\u548c"},{"location":"double-pointer/#3","text":"345. Reverse Vowels of a String (Easy) Given s = leetcode , return leotcede . /*\u4f7f\u7528\u53cc\u6307\u9488\u6307\u5411\u5f85\u53cd\u8f6c\u7684\u4e24\u4e2a\u5143\u97f3\u5b57\u7b26\uff0c\u4e00\u4e2a\u6307\u9488\u4ece\u5934\u5411\u5c3e\u904d\u5386\uff0c\u4e00\u4e2a\u6307\u9488\u4ece\u5c3e\u5230\u5934\u904d\u5386\uff0c\u53d1\u73b0\u4e24\u4e2a\u5143\u97f3\u540e\u4ea4\u6362*/ func reverseVowels(s string) string { bs := []byte(s) for i,j:=0,len(bs)-1;i j;{ if !isVowel(bs[i]){ i++ continue } if !isVowel(bs[j]){ j-- continue } temp:=bs[i] bs[i]=bs[j] bs[j]=temp i++ j-- } return string(bs) } func isVowel(b byte) bool { return b == 'a' || b == 'e' || b == 'i' || b == 'o' || b == 'u' || b == 'A' || b == 'E' || b == 'I' || b == 'O' || b == 'U' }","title":"3\u3001\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u97f3\u5b57\u7b26"},{"location":"double-pointer/#4","text":"680. Valid Palindrome II (Easy) Input: abca Output: True Explanation: You could delete the character 'c'. \u9898\u76ee\u63cf\u8ff0\uff1a\u53ef\u4ee5\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\uff0c\u5224\u65ad\u662f\u5426\u80fd\u6784\u6210\u56de\u6587\u5b57\u7b26\u4e32\u3002 /*\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u4ece\u524d\u4e00\u4e2a\u5f80\u540e\uff0c\u4e00\u81f4\u7ee7\u7eed\u5f80\u524d\uff0c\u4e0d\u4e00\u81f4\u5219\u5206\u522b\u770b\u8fc7\u6ee4\u54ea\u4e00\u8fb9\u53ef\u4ee5\u7ee7\u7eed*/ func validPalindrome(s string) bool { bs := []byte(s) for i,j:=0,len(bs)-1;i j;{ if bs[i] != bs[j] { //\u53d1\u73b0\u4e0d\u4e00\u81f4\uff0c\u5206\u522b\u770b\u53bb\u6389\u5de6\u8fb9\u8fd8\u662f\u53bb\u6389\u53f3\u8fb9\u4efb\u610f\u4e00\u4e2a\u53ef\u4ee5\u5c31\u901a\u8fc7 return ispalindrome(bs,i+1,j) || ispalindrome(bs,i,j-1) } i++ j-- } return true } func ispalindrome(bs []byte, left,right int) bool { for ;left right;{ if bs[left] != bs[right]{ return false } left++ right-- } return true }","title":"4\u3001\u56de\u6587\u5b57\u7b26\u4e32"},{"location":"double-pointer/#5","text":"88. Merge Sorted Array (Easy) Input: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] \u9898\u76ee\u63cf\u8ff0\uff1a\u628a\u5f52\u5e76\u7ed3\u679c\u5b58\u5230\u7b2c\u4e00\u4e2a\u6570\u7ec4\u4e0a\u3002 /*\u4ece\u5c3e\u5f00\u59cb\u904d\u5386,\u9010\u4e2a\u6bd4\u8f83\u6dfb\u52a0\u5230nums1\u4e0a*/ func merge(nums1 []int, m int, nums2 []int, n int) { index := m+n-1 for index1,index2 := m-1,n-1;index1 =0 || index2 =0;index--{ if index1 0 { nums1[index] = nums2[index2] index2-- }else if index2 0 { nums1[index] = nums1[index1] index1-- }else if nums1[index1] = nums2[index2] { nums1[index] = nums2[index2] index2-- }else if nums1[index1] nums2[index2]{ nums1[index] = nums1[index1] index1-- } } }","title":"5\u3001\u5f52\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4"},{"location":"double-pointer/#6","text":"141. Linked List Cycle (Easy) /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ /*\u4f7f\u7528\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u6bcf\u6b21\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\uff0c\u4e00\u4e2a\u6307\u9488\u6bcf\u6b21\u79fb\u52a8\u4e24\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u5b58\u5728\u73af\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u6307\u9488\u4e00\u5b9a\u4f1a\u76f8\u9047\u3002*/ class Solution { public: bool hasCycle(ListNode *head) { if (head == NULL || head- next==NULL){ return false; } ListNode* l1 = head; ListNode* l2 = head- next; while(l2!=NULL l2- next!=NULL){ if (l1==l2){ return true; }else{ l1=l1- next; l2=l2- next- next; } } return false; } };","title":"6\u3001\u5224\u65ad\u94fe\u8868\u662f\u5426\u5b58\u5728\u73af"},{"location":"double-pointer/#7","text":"524. Longest Word in Dictionary through Deleting (Medium) Input: s = abpcplea , d = [ ale , apple , monkey , plea ] Output: apple \u9898\u76ee\u63cf\u8ff0\uff1a\u5220\u9664 s \u4e2d\u7684\u4e00\u4e9b\u5b57\u7b26\uff0c\u4f7f\u5f97\u5b83\u6784\u6210\u5b57\u7b26\u4e32\u5217\u8868 d \u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u80fd\u6784\u6210\u7684\u6700\u957f\u5b57\u7b26\u4e32\u3002\u5982\u679c\u6709\u591a\u4e2a\u76f8\u540c\u957f\u5ea6\u7684\u7ed3\u679c\uff0c\u8fd4\u56de\u5b57\u5178\u5e8f\u7684\u6700\u5927\u5b57\u7b26\u4e32\u3002 /*\u4e24\u4e2a\u6307\u9488\u4ece\u5934\u5f00\u59cb\u67e5\u770b\u662f\u5426\u80fd\u543b\u5408\uff0c\u5982\u679c\u67e5\u5230d\u4e2d\u5b57\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u4e5f\u543b\u5408\u4ee3\u8868\u80fd\u591f\u5b8c\u5168match\uff0c\u518d\u5904\u7406\u540c\u957f\u5ea6\u7684\u95ee\u9898*/ func findLongestWord(s string, d []string) string { result := for _,v := range d { if len(result) len(v) || len(result) == len(v) result = v { continue } if isValid(s,v) { result = v } } return result } func isValid(s string,v string) bool{ //\u770b\u662f\u4e0d\u662f\u80fdmatch\u4e0a bs := []byte(s) bv := []byte(v) i,j:= 0,0 for i len(bs) j len(bv){ if bs[i] == bv[j]{ j++ } i++ } if j== len(bv) { //\u6700\u540e\u4e00\u4e2a\u4e5f\u7b26\u5408\u3002 return true } return false }","title":"7\u3001\u6700\u957f\u5b50\u5e8f\u5217"},{"location":"double-pointer/#c","text":"\u6b64\u7c7b\u95ee\u9898\u4e00\u822c\u6d89\u53ca\u51e0\u79cd\u60c5\u5f62\uff1a in place \u7684\u66f4\u65b0\u6570\u7ec4\uff0c\u9700\u8981\u4e00\u4e2aindex\u8bb0\u5f55\u66f4\u65b0\u4e4b\u540e\u7684\u6570\u7ec4\uff0c\u53e6\u4e00\u4e2aindex\u8dd1\u904d\u539f\u6765\u7684\u6570\u7ec4\uff1b \u8fd8\u6709\u5c31\u662f\u627e\u5230\u6570\u7ec4\u91cc\u9762\u7684N\u4e2a\u6570\u4f7f\u5f97\u8fd9\u51e0\u4e2a\u6570\u6ee1\u8db3\u4e00\u5b9a\u7684\u6761\u4ef6\uff08\u5982\u51e0\u4e2a\u6570\u4e4b\u548c\u5fc5\u987b\u4e3a\u67d0\u4e00\u4e2a\u7279\u5b9a\u7684\u6570\uff09\uff1b\u8fd8\u6709\u5c31\u662f\u4e00\u7c7b\u7279\u6b8a\u7684\u95ee\u9898\u96e8\u6c34\u50a8\u5b58\u95ee\u9898\u3002 \u8fd9\u91cc\u6709\u51e0\u4e2a\u5173\u952e\u95ee\u9898\u9700\u8981\u7406\u89e3: \u9996\u5148\u6570\u7ec4\u662f\u5426\u6392\u5e8f\uff0c\u6839\u636e\u4fe1\u606f\u8bba\u7684\u770b\u6cd5\u6216\u8005\u80fd\u91cf\u5b88\u6052\u7684\u539f\u7406\uff0c\u6570\u7ec4\u662f\u5426\u6392\u5e8f\u4e0e\u5892\u6709\u5173\uff0c\u5892\u7684\u672c\u8d28\u5c31\u662f\u63cf\u8ff0\u4e8b\u7269\u6709\u5e8f\u7a0b\u5ea6\u7684\u5ea6\u91cf\uff0c\u6362\u53e5\u8bdd\u8bf4\u4e8b\u7269\u8d8a\u6709\u5e8f\u5892\u7684\u503c\u8d8a\u4f4e\uff0c\u5e76\u4e14\u672c\u8d28\u662f\u5892\u4f1a\u81ea\u7136\u7684\u4f1a\u589e\u5927\u5728\u65e0\u5916\u529b\u5e72\u6270\u7684\u72b6\u51b5\u4e0b\uff0c\u4e5f\u5c31\u662f\u4e8b\u7269\u603b\u662f\u5411\u7740\u65e0\u5e8f\u53d1\u5c55\u7684\u3002\u800c\u600e\u6837\u8ba9\u4e8b\u7269\u53d8\u7684\u6709\u5e8f\u5462\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u5916\u529b\u80fd\u91cf\u7684\u8f93\u5165\u6765\u4f7f\u5f97\u5892\u53d8\u5c0f\u6216\u8005\u53d8\u7684\u6709\u5e8f\u3002\u90a3\u4e48\u5728\u6570\u7ec4\u662f\u5426\u6709\u5e8f\u7684\u95ee\u9898\u4e0a\uff0c\u6211\u4eec\u5e0c\u671b\u5b83\u662f\u6709\u5e8f\u7684\uff0c\u5982\u679c\u4e0d\u662f\u90a3\u4e48\u5c31\u9700\u8981\u82b1\u8d39\u201c\u80fd\u91cf\u201d\u8ba9\u4ed6\u7684\u5892\u53d8\u5c0f\uff0c\u8fd9\u6837\u590d\u6742\u5ea6O(nlogn)\u5c31\u4e0a\u53bb\u4e86\uff0c\u8fd9\u91cc\u590d\u6742\u5ea6\u53ef\u4ee5\u770b\u4f5c\u4e3a\u5916\u4f5c\u7528\u529b\u7684\u4f53\u73b0\u3002 \u5176\u6b21\u53cc\u6307\u9488\u95ee\u9898\u7684\u672c\u8d28\u5176\u5b9e\u662f\u7531\u4e8e\u6709\u4e24\u4e2a\u6216\u8005\u591a\u4e2a\u5143\u7d20\u6709\u76f8\u4e92\u4f5c\u7528\u6216\u8005\u76f8\u5173\u8054\uff0c\u56e0\u6b64\u5728\u6539\u53d8\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u7684\u540c\u65f6\u5176\u4ed6\u51e0\u4e2a\u5143\u7d20\u4e5f\u9700\u8981\u8ddf\u7740\u6539\u53d8\uff0c\u56e0\u6b64\u53cc\u6307\u9488\u95ee\u9898\u4e00\u822c\u662f\u5728\u6ee1\u8db3\u51e0\u4e2a\u5143\u7d20\u5173\u7cfb\u4e0d\u53d8\u7684\u60c5\u51b5\u4e4b\u4e0b\uff0c\u6539\u53d8\u4e00\u4e2a\u5143\u7d20\u7684\u540c\u65f6\uff0c\u5bfb\u627e\u5176\u4ed6\u51e0\u4e2a\u5143\u7d20\u6ee1\u8db3\u73b0\u6709\u7684\u5173\u7cfb\u60c5\u51b5\u3002","title":"C++\u4f8b\u5b50"},{"location":"double-pointer/#_6","text":"\u4f8b\u9898\uff1a Remove Element \u5206\u6790\uff1a \u8fd9\u9053\u9898\u6709\u51e0\u4e2a\u5173\u952e\u5b57\u9700\u8981\u6ce8\u610f: in place , the order of elements can be changed .\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7528two pointers\uff0c\u4e00\u4e2a\u8bb0\u5f55remove\u8fc7\u540e\u7684\u6570\u7ec4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4f4d\u7f6e\uff0c\u4e00\u4e2a\u7528\u6765\u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5224\u65ad\u6761\u4ef6\u5c31\u662f\u6bd4\u8f83\u8be5\u5143\u7d20\u548ctarget\u7684\u503c\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u5c31\u628a\u5b83copy\u7ed9\u53e6\u4e00\u4e2apointer.\u56e0\u4e3a\u9898\u76ee\u53ea\u9700\u8981\u6c42\u6700\u540e\u7684\u6570\u7ec4\u957f\u5ea6\uff0c\u6240\u4ee5\u8fd4\u56de\u6700\u540e\u8bb0\u5f55\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u4e86\u3002 \u590d\u6742\u5ea6\uff1a \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1). class Solution { public: int removeElement(int A[], int n, int elem) { if(A == nullptr || n == 0) return 0; int index = 0; for(int i = 0; i n ; ++i){ if(A[i] != elem){ A[index++] = A[i]; } } return index; } }; \u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u770b\u8fd9\u9053\u9898\u7684\u4e00\u4e2a\u53d8\u5f62\uff1a \u4f8b\u9898\uff1a Remove Duplicates from Sorted Array \u5206\u6790\uff1a\u8fd9\u9053\u9898\u51e0\u4e4e\u548c\u4e0a\u4e00\u9898\u4e00\u6837\uff0c\u8fd9\u91cc\u6ce8\u610f\u6570\u7ec4\u662f\u6392\u5e8f\u7684\uff0c \u5173\u952e\u8bcd\uff1a in place with constant memory . \u6709\u4e00\u4e2a\u5730\u65b9\u503c\u5f97\u6ce8\u610f\u7b2c\u4e8c\u4e2apointer\u7684\u8d77\u59cb\u70b9\u5e94\u8be5\u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u7b2c\u4e8c\u4e2a\u6307\u9488\u662f\u7528\u6765\u6bd4\u8f83\u548c\u524d\u4e00\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u5982\u679c\u76f8\u7b49\u5c31skip. \u590d\u6742\u5ea6\uff1a \u65f6\u95f4\u590d\u6742\u5ea6O(n), \u7a7a\u95f4\u590d\u6742\u5ea6O(1). class Solution { public: int removeDuplicates(int A[], int n) { if(A == nullptr || n == 0) return 0; int index = 0; for(int i = 1; i n ; ++i){ if(A[index] != A[i]){ A[++index] = A[i]; } } return index + 1; } }; \u4e0b\u9762\u589e\u52a0\u4e86\u4e00\u70b9\u96be\u5ea6\uff0c\u5982\u679c\u540c\u4e00\u4e2a\u5143\u7d20\u5141\u8bb8\u51fa\u73b0\u4e24\u6b21\u3002 \u4f8b\u9898\uff1a \uff3bRemove Duplicates from Sorted Array II]( https://oj.leetcode.com/problems/remove-duplicates-from-sorted-array-ii/ ) \u5206\u6790\uff1a \u9996\u5148\u60f3\u5230\u7684\u662fhashtable\u50a8\u5b58\u6bcf\u4e2a\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u4ed4\u7ec6\u89c2\u5bdf\u9898\u76ee\u53ef\u4ee5\u53d1\u73b0\u5176\u5b9e\u4e0d\u9700\u8981hashtable\uff0c\u56e0\u4e3a\u6570\u7ec4\u662f\u6392\u5e8f\u7684\uff0c\u91cd\u590d\u7684\u5143\u7d20\u5e94\u8be5\u4f1a\u8fde\u5728\u4e00\u8d77\uff0c\u8fd9\u6837\u904d\u5386\u7684\u65f6\u5019\u591a\u52a0\u4e00\u4e2a\u5224\u65ad\u5c31\u53ef\u4ee5\u89e3\u51b3\u3002 \u590d\u6742\u5ea6\uff1a \u65f6\u95f4\u590d\u6742\u5ea6O(n),\u7a7a\u95f4\u590d\u6742\u5ea6O(1). \u5148\u770b\u4e00\u4e2a\u89e3\u6cd5\u5efa\u7acb\u5728\u4e0a\u4e00\u9898\u7684\u57fa\u7840\u4e0a\uff0c\u5176\u4e2d\u5224\u65ad\u4e86\u524d\u540e\u5143\u7d20\u662f\u5426\u76f8\u7b49\uff0c\u8fd9\u6837\u4fdd\u8bc1\u6700\u591a\u53ea\u6709\u4e24\u4e2a\u76f8\u540c\u7684\u5143\u7d20\uff1a class Solution { public: int removeDuplicates(int A[], int n) { if(A == nullptr || n == 0) return 0; int index = 0; for(int i = 1; i n ; ++i){ if(A[index] == A[i] (index == 0 || A[index-1] != A[index])) A[++index] = A[i]; if(A[index] != A[i]) A[++index] = A[i]; } return index + 1; } }; \u5176\u5b9e\u53ef\u4ee5\u7a0d\u52a0\u6539\u53d8\uff0c\u4f7f\u5f97\u89e3\u6cd5\u66f4\u6709\u53ef\u6269\u5c55\u6027\uff0c\u5904\u7406N\u4e2a\u91cd\u590d\u7684\u5143\u7d20\u7684\u60c5\u5f62\uff1a class Solution { public: int removeDuplicates(int A[], int n) { if(A == nullptr || n == 0) return 0; if(n = 2) return n; int index = 2; for(int i = 2; i n ; ++i){ if(A[i] != A[index - 2]) A[index++] = A[i]; } return index; } }; \u8fd9\u91cc\u76f4\u63a5\u4ece\u7b2c\u4e09\u4e2a\u5143\u7d20\u5f00\u59cb\u6bd4\u8f83\uff0c\u5982\u679c\u662f\u5141\u8bb8N\u4e2a\u91cd\u590d\u5143\u7d20\uff0c2\u53ef\u4ee5\u6539\u4e3aN,\u4ee3\u7801\u6bd4\u4e0a\u4e2a\u89e3\u6cd5\u7b80\u6d01\u4e5f\u66f4\u5177\u6709\u53ef\u62d3\u5c55\u6027\u3002 \u524d\u9762\u51e0\u9053\u9898\u90fd\u662f\u5220\u9664\u5143\u7d20\uff0c\u8fd8\u6709\u4e00\u7c7b\u95ee\u9898\u5c31\u662f\u6392\u5e8f\u95ee\u9898\u6709\u65f6\u5019\u4e5f\u53ef\u4ee5\u7528Two Pointers\u7684\u89e3\u6cd5. \u4f8b\u9898: [Sort Colors] ( https://oj.leetcode.com/problems/sort-colors/ ) \u5206\u6790\uff1a\u8fd9\u91cc\u6709\u4e09\u4e2a\u6307\u9488\uff0c\u4f46\u662f\u5b9e\u9645\u662f\u4e24\u4e2a\u5728\u64cd\u4f5c\uff0c\u4e00\u4e2a\u5b58red\u7684index\uff0c\u4e00\u4e2a\u5b58blue\u7684index, \u7136\u540e\u4e24\u8fb9\u5f80\u4e2d\u95f4\u8d70\u3002 \u590d\u6742\u5ea6\uff1a \u65f6\u95f4\u590d\u6742\u5ea6O(n), \u7a7a\u95f4\u590d\u6742\u5ea6O(1). class Solution { public: void sortColors(int A[], int n) { int j = 0, k = n-1; int i = 0; while(i k + 1){ if(A[i] == 0){ int t = A[j]; A[j] = A[i]; A[i] = t; j++; i++; }else if(A[i] == 2){ int t = A[k]; A[k] = A[i]; A[i] = t; k--; }else{ i++; } } } }; \u6b64\u5916\u8fd9\u9053\u9898\u8fd8\u6709\u4e2a\u975e\u5e38\u5de7\u5999\u7684\u89e3\u6cd5\uff0c\u5229\u7528\u5230\u4e86partition\u4e2d\u7684\u539f\u7406\uff1a class Solution { public: void sortColors(int A[], int n) { int j = 0; int k = 0; int i = 0; for(int m = 0; m n ; ++m){ if(A[m] == 2){ A[k++] = 2; }else if(A[m] == 1){ A[k++] = 2; A[j++] = 1; }else if(A[m] == 0){ A[k++] = 2; A[j++] = 1; A[i++] = 0; } } } };","title":"\u5b9e\u65f6\u66f4\u65b0\u6570\u7ec4"},{"location":"double-pointer/#_7","text":"\u6b64\u7c7b\u95ee\u9898\u8868\u9762\u4e0a\u770b\u8ddf\u53cc\u6307\u9488\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\uff0c\u4f46\u662f\u7ecf\u8fc7\u4ed4\u7ec6\u5206\u6790\uff0c\u4f1a\u53d1\u73b0\u6709\u5f88\u591a\u5171\u540c\u4e4b\u5904\u3002 \u4f8b\u9898\uff1a Container with Most water \u5206\u6790\uff1a\u8fd9\u9053\u9898\u53ef\u4ee5\u5148\u627e\u51e0\u4e2a\u6570\u6a21\u62df\u4e00\u4e0b\uff0c\u4f1a\u53d1\u73b0\u5982\u679c\u60f3\u8ba9\u5bb9\u5668\u50a8\u5b58\u7684\u6c34\u591a\uff0c\u9700\u8981\u5de6\u53f3\u4e24\u4e2a\u6570\u8ddd\u79bb\u8d8a\u8fdc\u8d8a\u597d\uff0c\u5e76\u4e14\u4e24\u4e2a\u6570\u4e2d\u8f83\u5c0f\u7684\u6570\u503c\u8d8a\u5927\u8d8a\u597d\u3002\u9996\u5148\u8003\u8651\u66b4\u529b\u89e3\u6cd5\uff0c\u56fa\u5b9a\u4e00\u8fb9\uff0c\u7136\u540e\u627e\u53e6\u4e00\u8fb9\u8d8a\u5927\u8d8a\u597d\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u6570\u90fd\u67e5\u627e\u4e00\u4e0b\uff0c\u5c31\u9700\u8981O(n^2).\u4ed4\u7ec6\u7814\u7a76\u53d1\u73b0\uff0c\u8fd9\u9053\u9898\u662f\u53ef\u4ee5\u7528\u53cc\u6307\u9488\u7684\uff0c\u56e0\u4e3a\u6700\u540e\u7684\u7ed3\u679c\u88ab\u51b3\u5b9a\u4e8e\u5de6\u53f3\u4e24\u4e2a\u6570\uff0c\u90a3\u4e48\u600e\u4e48\u8fdb\u884c\u904d\u5386\u5462\uff0c\u5982\u679c\u56fa\u5b9a\u4e00\u8fb9\uff0c\u6c38\u8fdc\u5e0c\u671b\u627e\u6bd4\u8fd9\u4e00\u8fb9\u5927\u7684\u6570\uff0c\u56e0\u6b64\u5982\u679c\u6bd4\u8fd9\u4e00\u8fb9\u5c0f\u53ef\u4ee5skip\u6389\u3002\u4e8e\u662fleft \u548cright\u4e24\u8fb9\u5de6\u53f3\u5939\u903c\uff0c\u9047\u5230\u8f83\u5c0f\u7684\u6570\u5c31skip\u6389\u76f4\u5230\u91cd\u5408\u3002 \u590d\u6742\u5ea6\uff1a \u65f6\u95f4\u590d\u6742\u5ea6O(n), \u7a7a\u95f4\u590d\u6742\u5ea6O(1). class Solution { public: int maxArea(vector int height) { if(height.size() == 0) return 0; int i = 0; int j = height.size() -1; int maxA = INT_MIN; while(i j){ int area = min(height[j],height[i]) * (j-i); maxA = max(maxA, area); if(height[i] height[j]){ i++; }else { j--; } } return maxA; } }; \u518d\u6765\u770b\u4e00\u4e2a\u7c7b\u4f3c\u7684\u9898\u76ee\uff0c\u8fd9\u91cccontainer\u4e0d\u6b62\u4e00\u4e2a\u4e86\u3002 \u9898\u76ee\uff1a Trapping Rain Water \u5206\u6790\uff1a\u8fd9\u91cc\u4e5f\u662f\u7c7b\u4f3c\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u67f1\u5b50\u9700\u8981\u5206\u522b\u5bfb\u627e\u5b83\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u6700\u9ad8\u7684\u67f1\u5b50\uff0c\u8fd9\u6837\u8be5\u67f1\u5b50\u80fd\u5bb9\u7eb3\u7684\u9762\u79ef\u5c31\u662fmin(max_left, max_right) - height.\u56e0\u6b64\u89e3\u6cd5\u81ea\u7136\u53d8\u6210\u4e86\u4ece\u5de6\u5f80\u53f3\u904d\u5386\uff0c\u627e\u5230\u6bcf\u4e2a\u67f1\u5b50\u5de6\u8fb9\u6700\u5927\u503c\uff0c\u7136\u540e\u4ece\u53f3\u5411\u5de6\u904d\u5386\u627e\u5230\u6bcf\u4e2a\u67f1\u5b50\u53f3\u8fb9\u6700\u5927\u503c\u3002\u6700\u540e\u4e00\u6b21\u904d\u5386\u8ba1\u7b97\u6bcf\u4e2a\u67f1\u5b50\u53ef\u4ee5\u5bb9\u7eb3\u7684\u9762\u79ef\u3002 \u590d\u6742\u5ea6\uff1a\u65f6\u95f4\u590d\u6742\u5ea6O(n), \u7a7a\u95f4\u590d\u6742\u5ea6O(n). class Solution { public: int trap(int A[], int n) { if(A == nullptr || n == 0) return 0; vector int right_height(n); vector int left_height(n); int height = 0, total = 0; for(int i = 0; i n; ++i){ if(A[i] height) height = A[i]; right_height[i] = height; } height = 0; for(int i = n -1; i = 0; --i){ if(A[i] height) height = A[i]; left_height[i] = height; } for(int i = 0; i n; ++i){ total += min(right_height[i], left_height[i]) - A[i]; } return total; } }; \u8fd9\u9053\u9898\u8fd8\u6709\u4e00\u4e2a\u5206\u800c\u6cbb\u4e4b\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5148\u904d\u5386\u4e00\u8fb9\u6570\u7ec4\u627e\u5230\u6700\u5927\u503c\uff0c\u7136\u540e\u5728\u6700\u9ad8\u67f1\u5b50\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\u5206\u522b\u904d\u5386\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u6700\u540e\u7684\u7ed3\u679c\u3002 \u590d\u6742\u5ea6\uff1a \u65f6\u95f4\u590d\u6742\u5ea6O(n), \u7a7a\u95f4\u590d\u6742\u5ea6O(1). class Solution { public: int trap(int A[], int n) { if(A == nullptr || n == 0) return 0; int result = 0; int max = -1, index = 0; for(int i = 0; i n ; ++i){ if(A[i] max){ max = A[i]; index = i; } } int left = -1; for(int i = 0; i index; ++i){ if(A[i] left) left = A[i]; else result += left - A[i]; } int right = -1; for(int i = n-1; i index; --i){ if(A[i] right) right = A[i]; else result += right - A[i]; } return result; } };","title":"\u96e8\u6c34\u95ee\u9898"},{"location":"double-pointer/#_8","text":"\u4e0b\u9762\u6211\u4eec\u5f00\u59cb\u5206\u6790\u4e00\u4e0b\u4e00\u7cfb\u5217\u5173\u4e8e\u5143\u7d20\u6c42\u548c\u7684\u95ee\u9898\uff0c\u8fd9\u4e00\u7cfb\u5217\u95ee\u9898\u7279\u5f81\u5982\u4e0b\uff0c\u5728\u4e00\u7ec4\u4efb\u610f\u6392\u5e8f\u6570\u7ec4\u4e2d\uff0c\u5bfb\u627eN\u4e2a\u6570\u4f7f\u5f97\u5b83\u4eec\u7684\uff08\u79ef\u548c\u5dee\u9664\uff09\u6ee1\u8db3\u67d0\u4e00\u4e2a\u6761\u4ef6\uff0c\u8fd9\u91cc\u53ef\u4ee5\u662f\u5b83\u4eec\u7ecf\u8fc7\u4e00\u7cfb\u5217\u8fd0\u7b97\u6ee1\u8db3\u67d0\u4e00\u4e2a\u503c\uff0c\u6216\u8005\u6c42\u4ed6\u4eec\u7684\u6700\u5927\u503c\u7b49\u7b49\u3002\u5904\u7406\u6b64\u7c7b\u95ee\u9898\u7684\u65f6\u5019\uff0c\u9996\u5148\u770b\u6570\u7ec4\u662f\u5426\u662f\u6709\u5e8f\u7684\uff0c\u6839\u636e\u4e4b\u524d\u7684\u7406\u8bba\u5982\u679c\u6570\u7ec4\u662f\u65e0\u5e8f\u7684\uff0c\u90a3\u4e48\u9700\u8981\u989d\u5916\u7684\u529b\u4f7f\u5176\u6709\u5e8f\uff0c\u4e00\u822c\u662f\u6392\u5e8f\u6216\u8005hashtable\u6765\u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\uff0c\u590d\u6742\u5ea6\u4f1a\u4e0a\u5347\u3002\u7136\u540e\u5728\u6570\u7ec4\u6709\u5e8f\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u5de6\u53f3\u5939\u903c\uff0c\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\u3002 \u4f8b\u9898\uff1b Two Sum \u5206\u6790\uff1a \u4e00\u4e2a\u7ecf\u5178\u7684\u6c42\u548c\u95ee\u9898\uff0c\u9996\u5148\u770b\u6570\u7ec4\u662f\u5426\u6709\u5e8f\uff0c \u5f88\u9057\u61be\uff0c\u6ca1\u6709\uff01\u56e0\u6b64\u9700\u8981\u6392\u5e8f\uff0c\u4f46\u662f\u6ce8\u610f\u8fd9\u6837\u590d\u6742\u5ea6\u5c31\u53d8\u6210O(nlgn)\u4e86\uff0c\u6709\u6ca1\u6709\u66f4\u597d\u7684\u65b9\u6cd5\uff0chashtable!\u53ef\u4ee5\u4fdd\u6301\u590d\u6742\u5ea6\u5728O(n)\u53c8\u53ef\u4ee5\u8d77\u5230\u6392\u5e8f\u7684\u6548\u679c\u3002\u8fd9\u91cc\u6ce8\u610f\u5728\u5faa\u73af\u91cc\u9762\u7684\u5224\u65ad\u6761\u4ef6\uff0c\u9996\u5148\u770btarget - number[i]\u662f\u5426\u5728hashtable\u91cc\u9762\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u5c31\u8f93\u51fa\u7ed3\u679c\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8bb0\u5f55\u5f53\u524d\u7684\u6570\u8fdb\u5165hashtable\u91cc\u9762\u3002 \u590d\u6742\u5ea6\uff1a \u65f6\u95f4\u590d\u6742\u5ea6O(n),\u7a7a\u95f4\u590d\u6742\u5ea6O(1). class Solution { public: vector int twoSum(vector int numbers, int target) { vector int answer(2,0); unordered_map int, int record; for(int i = 0; i numbers.size(); ++i){ int x = numbers[i]; if(record.find(target - x) != record.end()){ answer[1] = i + 1; answer[0] = record[target - numbers[i]]; break; } record[numbers[i]] = i + 1; } return answer; } }; \u4f8b\u9898\uff1a 3Sum Closest \u5206\u6790\uff1a\u8fd8\u662f\u9996\u5148\u770b\u662f\u5426\u6570\u7ec4\u662f\u6709\u5e8f\u7684\uff0c\u5982\u679c\u4e0d\u662f\u6709\u5e8f\u7684\u5c31\u5f97\u6392\u5e8f\uff0c\u8fd9\u9053\u9898\u6d89\u53ca\u5230\u4e09\u4e2a\u5143\u7d20\uff08\u4e09\u4f53\u95ee\u9898\uff09\uff0c\u539f\u5219\u4e0a\u4e09\u4f53\u95ee\u9898\u5305\u542b\u4e86\u4e00\u5207\u4e09\u4e2a\u5143\u7d20\u53ca\u4ee5\u4e0a\u7684\u95ee\u9898\uff0c\u5982\u679c\u8bf4\u4e24\u4f53\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u6280\u5de7\uff08\u5982hashtable)\u89e3\u51b3\u7684\u8bdd\uff0c\u4e09\u4f53\u95ee\u9898\u5c31\u662f\u590d\u6742\u5ea6\u63d0\u9ad8\u4e86\u4e00\u4e2a\u53f0\u9636\uff0c\u4e00\u4e9b\u666e\u9002\u4e8e\u4e24\u4f53\u7684\u6280\u5de7\u5728\u4e09\u4f53\u95ee\u9898\u8fd9\u91cc\u884c\u4e0d\u901a\u4e86\u3002\u56e0\u6b64\u5728\u8fd9\u91cc\u9996\u5148\u8981\u5bf9\u6570\u7ec4\u6392\u5e8f\uff0c \u6b64\u9898\u6d89\u53ca\u5230\u4e09\u4e2a\u5143\u7d20\uff0c\u9996\u5148\u5934\u5c3e\u5404\u653e\u4e00\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u4e2d\u95f4\u4ece\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff0c\u5de6\u53f3\u5939\u903c\uff0c\u6211\u4eec\u7528\u4e00\u4e2agap\u6765\u8ba1\u7b97target\u548c\u73b0\u5728\u6240\u6709\u503c\u7684\u548c\u4e4b\u5dee\uff0c\u7531\u4e8e\u5df2\u7ecf\u6392\u597d\u5e8f\uff0c\u53ea\u8981\u6bd4\u8f83target\u548c\u73b0\u5728sum\u7684\u503c\uff0c\u5982\u679ctarget\u503c\u8f83\u5c0f\uff0c\u90a3\u4e48\u8bf4\u660emid\u7684\u503c\u8fc7\u5c0f\u56e0\u6b64\u5f80\u4e2d\u95f4\u9760\u62e2\uff0c\u53cd\u4e4bright\u7684\u503c\u8fc7\u5927\u56e0\u6b64\u5411\u4e2d\u95f4\u9760\u62e2\u3002\u5c31\u8fd9\u6837\u505a\u4e24\u91cd\u904d\u5386\u53ef\u4ee5\u8ba1\u7b97\u5230\u6700\u63a5\u8fd1target\u7684\u503c\uff0c\u56e0\u4e3a\u8fd9\u9053\u9898\u53ea\u8981\u627e\u6700\u63a5\u8fd1\u7684\u6570\u56e0\u6b64\u6ca1\u67093Sum\u90a3\u4e48\u9650\u5236\u6761\u4ef6\u591a\u3002 \u590d\u6742\u5ea6\uff1a \u65f6\u95f4\u590d\u6742\u5ea6O(n^2),\u7a7a\u95f4\u590d\u6742\u5ea6O(1). class Solution { public: int threeSumClosest(vector int num, int target) { int sum = 0; sort(num.begin(), num.end()); int min_gap = INT_MAX; for(auto start = num.begin(); start != prev(num.end(), 2); ++start){ auto mid = next(start); auto last = prev(num.end(), 1); while(mid last){ int sumup = *start + *mid + *last; int gap = abs(target -sumup); if(gap min_gap){ min_gap = gap; sum = sumup; } if(sumup target){ mid++; }else{ last--; } } } return sum; } }; \u4f8b\u9898\uff1a 3Sum \u5206\u6790\uff1a\u8fd9\u9053\u9898\u662f\u6807\u51c6\u7684\u6c42\u548c\u95ee\u9898\uff0c\u65b9\u6cd5\u4e0e\u524d\u9762\u7c7b\u4f3c\uff0c\u4f46\u662f\u8981\u6ce8\u610f\u91cd\u590d\u6570\u7684\u51fa\u73b0\u4e5f\u5c31\u662fwhile(b c)\u91cc\u9762\u4e0d\u65ad\u5939\u903c\u5982\u679c\u51fa\u73b0\u8fd1\u90bb\u7684\u5143\u7d20\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u9700\u8981\u4e00\u4e2awhile\u8bed\u53e5\u6765\u79fb\u52a8,\u8fd9\u6837\u5f97\u5230\u7684\u6700\u540e\u6570\u7ec4\u4e00\u5b9a\u6ca1\u6709\u91cd\u590d\u6570\u3002\u8fd8\u6709\u5c31\u662fa\u7684\u91cd\u590d\u60c5\u51b5\u4e5f\u9700\u8981\u8003\u8651\u3002 \u590d\u6742\u5ea6\uff1a\u65f6\u95f4\u590d\u6742\u5ea6O(n^2), \u7a7a\u95f4\u590d\u6742\u5ea6O(1). Solution { public: vector vector int threeSum(vector int num) { vector vector int result; if(num.size() 3) return result; sort(num.begin(), num.end()); const int target = 0; for(auto a = 0; a num.size()-2; ++a){ if( a 0 num[a] == num[a-1]) continue; auto b = a + 1; auto c = num.size() - 1; while(b c){ if(num[a] + num[b] + num[c] target){ do{b++;}while(b c num[b] == num[b-1]); }else if (num[a] + num[b] + num[c] target){ do{c--;}while(b c num[c] == num[c+1]); }else{ result.push_back({num[a], num[b],num[c]}); do{b++;} while(b c num[b] == num[b-1]); do{c--;} while(b c num[c] == num[c+1]); } } } return result; } }; \u4f8b\u9898\uff1a 4Sum \u5206\u6790\uff1a\u5982\u679c\u4f7f\u7528\u4e0a\u9762\u7c7b\u4f3c\u7684\u65b9\u6cd5\u590d\u6742\u5ea6\u8fbe\u5230\u4e86O(N^3),\u6709\u6ca1\u6709\u66f4\u7701\u65f6\u95f4\u7684\u65b9\u6cd5\u5462\uff1f\u60f3\u5230\u4e00\u5171\u662f\u56db\u4e2a\u6570\u4e4b\u548c\uff0c\u81ea\u7136\u60f3\u5230\u53ef\u4e0d\u53ef\u4ee5\u4e24\u4e24\u914d\u5bf9\uff0c\u8fd9\u6837\u628a\u95ee\u9898\u53ef\u4ee5\u7b80\u5316\u4e3a2Sum. \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 multimap \u6765\u50a8\u5b58\u4e24\u4e2a\u6570\u7684\u548c\uff0c\u9996\u5148\u8981\u5f04\u6e05\u695akey\u662f\u4ec0\u4e48\uff0c\u56e0\u4e3a\u4e0d\u540c\u7684\u4e24\u4e2a\u6570\u53ef\u80fd\u6709\u76f8\u540c\u7684\u548c\uff0c\u56e0\u6b64key\u4e3a\u4e24\u4e2a\u6570\u7684\u548c\uff0cvalue\u5219\u662fa pair of indexes\u8bb0\u5f55\u4e24\u4e2a\u6570\u5728\u6570\u7ec4\u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u904d\u5386multimap\u7684\u540c\u65f6\uff0c\u627e\u5230\u53e6\u4e00\u7ec4\u6570\u4f7f\u5f97\u4e24\u7ec4\u6570\u4e4b\u540e\u4e3atarget. \u590d\u6742\u5ea6\uff1a\u65f6\u95f4\u590d\u6742\u5ea6O(N^2), \u7a7a\u95f4\u590d\u6742\u5ea6O(N^2). class Solution { public: vector vector int fourSum(vector int num, int target) { vector vector int result; if (num.size() 4) return result; sort(num.begin(), num.end()); unordered_multimap int, pair int, int cache; for (int i = 0; i + 1 num.size(); ++i) for (int j = i + 1; j num.size(); ++j) cache.insert(make_pair(num[i] + num[j], make_pair(i, j))); for (auto i = cache.begin(); i != cache.end(); ++i) { int x = target - i- first; auto range = cache.equal_range(x); for (auto j = range.first; j != range.second; ++j) { auto a = i- second.first; auto b = i- second.second; auto c = j- second.first; auto d = j- second.second; if (a != c a != d b != c b != d) { vector int vec = { num[a], num[b], num[c], num[d] }; sort(vec.begin(), vec.end()); result.push_back(vec); } } } sort(result.begin(), result.end()); result.erase(unique(result.begin(), result.end()), result.end()); return result; } };","title":"\u6c42\u548c\u95ee\u9898"},{"location":"in-place/","text":"\u539f\u5730\u7b97\u6cd5 In computer science, an in-place algorithm is an algorithm which transforms input using no auxiliary data structure. However a small amount of extra storage space is allowed for auxiliary variables. The input is usually overwritten by the output as the algorithm executes. In-place algorithm updates input sequence only through replacement or swapping of elements. An algorithm which is not in-place is sometimes called not-in-place or out-of-place. \u50cf wiki \u91cc\u9762\u8bf4\u7684\uff0c\u539f\u5730\u7b97\u6cd5\u662f\u57fa\u672c\u4e0a\u4e0d\u9700\u8981\u989d\u5916\u8f85\u52a9\u7684\u6570\u636e\u7ed3\u6784,\u7136\u800c,\u5141\u8bb8\u5c11\u91cf\u989d\u5916\u7684\u8f85\u52a9\u53d8\u91cf\u6765\u8f6c\u6362\u6570\u636e\u7684\u7b97\u6cd5\u3002\u5728\u8ba1\u7b97\u590d\u6742\u6027\u7406\u8bba\u4e2d\uff0c\u539f\u5730\u7b97\u6cd5\u5305\u542b\u4f7f\u7528O(1)\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u6240\u6709\u7b97\u6cd5\uff0cDSPACE(1)\u7c7b\u578b\u3002 function reverse-in-place(a[0..n]) for i from 0 to floor(n/2) swap(a[i], a[n-i]) \u6570\u7ec4\u7ffb\u8f6c \u6bd4\u5982\u6211\u4eec\u5728 JS \u4e2d\uff0c\u5b9e\u73b0\u7ffb\u8f6c\u6570\u7ec4\uff0c\uff08array.prototype.reverse\uff09 \u9664\u5916\u3002[1,2,3] = [3,2,1] function reverseArray(arr) { var len = array.length; var middle = Math.floor(len / 2); for (var i = 0; i middle; i += 1) { var temp = array[i]; array[i] = array[n - 1 - i]; array[n - 1 - i] = temp; } } \u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u7528\u501f\u52a9\u53e6\u5916\u4e00\u4e2a\u4e00\u4e2a\u6570\u7ec4\u5012\u5e8f\u5faa\u73af\u4e86\u3002 \u5220\u9664\u6392\u5e8f\u540e\u6570\u7ec4\u7684\u91cd\u590d\u5143\u7d20 \u6bd4\u5982\u6211\u4eec\u7ed9\u51fa\u4e00\u7ec4\u6392\u597d\u540e\u7684\u6570\u7ec4\uff0c\u7136\u540e\u5220\u9664\u6389\u5176\u4e2d\u91cd\u590d\u7684\u5143\u7d20 [1,2,3,3,3,4,5,5,5,6,7] to [1,2,3,4,5,6,7] var removeDuplicates = function(nums) { var i = 0; // \u8fd9\u91cc\u6709\u95ee\u9898\uff0c\u9700\u8981\u770b for-of \u7684\u5faa\u73af // https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of for (let n of nums) { if (i==0 || n nums[i - 1]) { nums[i++] = n; } } return i; }; \u5224\u65ad\u56de\u6587 \u6700\u8fd1 20200202 \u6bd4\u8f83\u706b\uff0c\u8fd9\u662f\u6bd4\u8f83\u5e38\u89c1\u7684 \u56de\u6587 \u6570\u5b57\u3002\u7c7b\u4f3c\u5355\u8bcd\u6bd4\u5982 bob \u6216\u8005\u53e5\u5b50 Was it a car or a cat I saw? \u3002 'aba' = true 'accad' = false '20200202' = true \u6211\u4eec\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u56de\u6587\u7684\u65f6\u5019\u53ef\u4ee5\u7528\u5230\u3002 function isPalindromeStr(str) { var middle = Math.floor(str.length / 2); for (var i = 0; i middle; i++) if (str[i] !== str[str.length - i - 1]) { return false; } return true; } \u5bf9\u5e94\u4e0b\u9762\u4e09\u4e2a\u9898\u76ee In-place algorithm Palindrome Longest Palindromic Substring \u5176\u4ed6\u7684\u4f8b\u5b50\uff0c\u6392\u5e8f\u7b97\u6cd5\u4f1a\u539f\u5730\u91cd\u65b0\u6392\u653e\u9635\u5217\u5185\u5bb9\u6210\u4e3a\u6392\u5e8f\u8fc7\u7684\u987a\u5e8f\uff0c\u5305\u542b\uff1a \u5192\u6ce1\u6392\u5e8f \u9009\u62e9\u6392\u5e8f \u63d2\u5165\u6392\u5e8f \u5806\u6392\u5e8f \u5e0c\u5c14\u6392\u5e8f \u5feb\u901f\u6392\u5e8f\u901a\u5e38\u88ab\u63cf\u8ff0\u4e3a\u4e00\u4e2a\u539f\u5730\u7b97\u6cd5\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a\u5e76\u4e0d\u662f\u3002\u5927\u90e8\u4efd\u7684\u5b9e\u4f5c\u9700\u8981O(log n)\u7684\u7a7a\u95f4\u6765\u652f\u6301\u5b83\u7684 \u5206\u6cbb\u6cd5 \uff08divide-and-conquer\uff09\u9012\u56de\u3002\u5927\u90e8\u4efd\u9009\u62e9\u7b97\u6cd5\u4e5f\u662f\u539f\u5730\uff0c\u867d\u7136\u5728\u627e\u5230\u6700\u540e\u7ed3\u679c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6709\u67d0\u4e9b\u76f8\u5f53\u5730\u91cd\u65b0\u6392\u5217\u8f93\u5165\u9635\u5217\uff0c\u4f46\u5374\u662f\u56fa\u5b9a\u5927\u5c0f\u7684\u7ed3\u679c\u3002 \u5728\u8ba1\u7b97\u4e0a\u7684\u590d\u6742\u5ea6 \u5728 \u8ba1\u7b97\u590d\u6742\u6027\u7406\u8bba \u4e2d\uff0c\u539f\u5730\u7b97\u6cd5\u5305\u542b\u4f7f\u7528O(1) \u7a7a\u95f4\u590d\u6742\u5ea6 \u7684\u6240\u6709\u7b97\u6cd5\uff0cDSPACE(1)\u7c7b\u578b\u3002\u8fd9\u4e2a\u7c7b\u578b\u662f\u975e\u5e38\u6709\u9650\u7684\uff1b\u5b83\u4e0e\u6b63\u89c4\u8bed\u8a001\u76f8\u7b49\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u751a\u81f3\u4e0d\u5305\u542b\u4e0a\u9762\u6240\u5217\u7684\u4efb\u4f55\u8303\u4f8b\u3002 \u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0c\u6211\u4eec\u4e5f\u8003\u8651\u5728 L \u7684\u7b97\u6cd5\uff0c\u8fd9\u7c7b\u578b\u7684\u95ee\u9898\u9700\u8981O(log n)\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u6765\u6210\u4e3a\u539f\u5730\u3002\u867d\u7136\u8fd9\u4e2a\u4f3c\u4e4e\u4e0e\u6211\u4eec\u5148\u524d\u7684\u5b9a\u4e49\u77db\u76fe\uff0c\u4f46\u662f\u6211\u4eec\u5fc5\u987b\u8ba4\u4e3a\u5728\u62bd\u8c61\u7684\u4e16\u754c\uff0c\u8f93\u5165\u7684\u8d44\u6599\u53ef\u4ee5\u662f\u4efb\u610f\u5de8\u5927\u7684\u3002\u5728\u4e00\u90e8\u771f\u5b9e\u7684\u7535\u8111\uff0c\u6307\u6807\uff08pointer\uff09\u4ec5\u9700\u8981\u4e00\u4e2a\u5c0f\u7684\u56fa\u5b9a\u6570\u91cf\u7a7a\u95f4\uff0c\u56e0\u4e3a\u5b9e\u4f53\u5185\u5b58\u7684\u6570\u91cf\u662f\u56fa\u5b9a\u7684\uff0c\u4f46\u662f\u4e00\u822c\u4e0a\u4e00\u4e2a\u5927\u5c0f\u4e3an\u7684\u6570\u5217\u9700\u8981O(log n)\u4f4d\u5143\u6765\u4f5c\u4e3a\u5b83\u7684\u7d22\u5f15\uff08index\uff09\u3002 \u7ed3\u679c\u662f\u5426\u610f\u6307\u5feb\u901f\u6392\u5e8f\u662f\u539f\u5730\u7684\uff1f\u5176\u5b9e\u4e00\u70b9\u4e5f\u4e0d \u2014 \u6280\u672f\u4e0a\u6765\u8bf4\uff0c\u5b83\u9700\u8981O(log2 n)\u7a7a\u95f4\uff0c\u56e0\u4e3a\u5b83\u7684O(log n) \u5806\u6808\u6846\u67b6\uff08stack frames\uff09\u6bcf\u4e00\u4e2a\u90fd\u542b\u6709\u4e00\u4e2a\u56fa\u5b9a\u6570\u91cf\u7684\u6307\u6807\uff08\u6bcf\u4e00\u4e2a\u5927\u5c0f\u4e3aO(log n)\uff09\u3002 \u8fa8\u522b\u62e5\u6709 L \u7684\u539f\u5730\u7b97\u6cd5\u62e5\u6709\u67d0\u4e9b\u6709\u8da3\u7684\u542b\u610f\uff1b\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5b83\u610f\u6307\u5b58\u5728\u4e00\u4e2a\uff08\u76f8\u5f53\u5730\u590d\u6742\uff09\u539f\u5730\u7b97\u6cd5\uff0c\u51b3\u5b9a\u5728\u4e00\u4e2a \u65e0\u5411\u56fe \uff08undirected graph\uff09\u4e2d\u7684\u4efb\u4e24\u4e2a\u8282\u70b9\uff08nodes\uff09\u4e4b\u95f4\u662f\u5426\u5b58\u5728\u4e00\u6761\u8def\u5f84\uff08path\uff09\uff0c\u8fd9\u662f\u4e00\u4e2a\u9700\u8981O(n)\u4e2a\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u4f7f\u7528\u5178\u578b\u7684\u7b97\u6cd5\u50cf\u662f\u6df1\u5ea6\u4f18\u5148\u641c\u5bfb(depth-first search)\uff08\u6bcf\u4e2a\u8282\u70b9\u6709\u4e2a\u8d70\u8bbf\u7684\u4f4d\u5143\uff09\u7684\u95ee\u9898\u3002\u6709\u4e9b\u95ee\u9898\u50cf\u662f\u51b3\u5b9a\u4e00\u4e2a\u56fe\u5f62\u662f\u5426\u4e3a \u4e8c\u5206\u56fe \uff08bipartite graph\uff09\u6216\u6d4b\u8bd5\u4e24\u4e2a\u56fe\u5f62\u4f7f\u5426\u6709\u76f8\u540c\u6570\u91cf\u7684\u8fde\u7ed3\u5143\u4ef6\uff08 connected component \uff09\uff0c\u63a5\u7740\u9488\u5bf9\u8fd9\u4e9b\u95ee\u9898\u4ea7\u51fa\u539f\u5730\u7b97\u6cd5\u3002\u53c2\u8003SL\u6709\u66f4\u591a\u7684\u8d44\u8baf\u3002 \u968f\u610f\u7684\u89d2\u8272 \u5728\u5f88\u591a\u60c5\u51b5\uff0c\u501f\u7531\u4f7f\u7528 \u968f\u673a\u5316\u7b97\u6cd5 \uff08randomized algorithms\uff09\uff0c\u4e00\u4e2a\u7b97\u6cd5\u7684\u7a7a\u95f4\u9700\u6c42\u53ef\u4ee5\u88ab\u6781\u5ea6\u5730\u88c1\u51cf\u6389\u3002\u4e3e\u4e2a\u8303\u4f8b\uff0c\u6211\u4eec\u5e0c\u671b\u77e5\u9053\u4e00\u4e2a\u6709 n \u4e2a\u9876\u70b9\uff08vertices\uff09\u7684\u56fe\u5f62\u4e2d\u7684\u4e24\u4e2a\u9876\u70b9\u662f\u5426\u4f4d\u4e8e\u56fe\u4e2d\u540c\u4e00\u4e2a\u8fde\u63a5\u5143\u4ef6\uff08connected component\uff09\u3002\u6ca1\u6709\u5df2\u77e5\u7b80\u5355\u3001\u51b3\u5b9a\u6027\u7684\uff08deterministic\uff09\u3001\u539f\u5730\u7b97\u6cd5\u6765\u51b3\u5b9a\u8fd9\u4ef6\u4e8b\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u7b80\u5355\u5730\u7531\u4e00\u4e2a\u9876\u70b9\u5f00\u59cb\uff0c\u4e14\u6267\u884c\u5927\u7ea620n3\u6b65\u7684\u968f\u673a\u8d70\u8def\uff08random walk\uff09\uff0c\u90a3\u6211\u4eec\u4f1a\u5076\u9047\u5230\u5176\u4ed6\u9876\u70b9\u6765\u63d0\u4f9b\u5b83\u4e0d\u662f\u5728\u540c\u4e00\u4e2a\u5143\u4ef6\uff08component\uff09\u4e2d\u7684\u673a\u4f1a\u662f\u975e\u5e38\u5730\u9ad8\u3002\u7c7b\u4f3c\u5730\uff0c\u5bf9\u4e8e\u8d28\u6570\u6d4b\u8bd5\uff08primality test\uff09\u6709\u7b80\u5355\u7684\u968f\u673a\u5316\u539f\u5730\u7b97\u6cd5\u50cf\u662f\u7c73\u52d2-\u62c9\u5bbe\u68c0\u9a8c\uff0c\u4e5f\u6709\u7b80\u5355\u539f\u5730 \u968f\u673a\u5316 \u6574\u6570\u5206\u89e3 \u7b97\u6cd5\u50cf\u662fPollard's rho \u7b97\u6cd5\u3002\u53c2\u8003RL\u548cBPL\u6709\u5bf9\u8fd9\u4e2a\u73b0\u8c61\u66f4\u591a\u7684\u8ba8\u8bba\u3002 \u5728\u51fd\u6570\u7684\u7a0b\u5f0f\u8bbe\u8ba1 \u51fd\u6570 \u7a0b\u5f0f\u8bbe\u8ba1 \uff08functional programming\uff09\u8bed\u8a00\u7ecf\u5e38\u4e0d\u9f13\u52b1\u6216\u4e0d\u652f\u63f4\u4f1a\u8986\u76d6\u8d44\u6599\u7684\u539f\u5730\u7b97\u6cd5\uff0c\u56e0\u4e3a\u8fd9\u662f\u526f\u4f5c\u7528\u7684\u4e00\u79cd\u578b\u6001\uff1b\u53cd\u4e4b\uff0c\u4ed6\u4eec\u53ea\u5141\u8bb8\u5efa\u7acb\u65b0\u7684\u8d44\u6599\u3002\u7136\u800c\uff0c\u597d\u7684\u51fd\u6570\u8bed\u8a00 \u7f16\u8bd1\u5668 \uff08compiler\uff09\u5728\u5f53\u4e00\u4e2a\u4e0e\u4ee5\u5b58\u5728\u4e4b\u975e\u5e38\u76f8\u4f3c\u7684\u7269\u4ef6\u88ab\u5efa\u7acb\u65f6\uff0c\u90fd\u7ecf\u5e38\u4f1a\u8fa8\u8bc6\u51fa\u6765\uff0c\u7136\u540e\u65e7\u7684\u5c31\u4f1a\u88ab\u4e22\u5f03\u6389\uff0c\u800c\u4e14\u4f1a\u6700\u628a\u8fd9\u6700\u4f73\u5316\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\" \u5f15\u64ce\u76d6 \u4e4b\u4e0b\"\u8f6c\u6362\u3002 \u57fa\u672c\u4e0a\uff0c\u6709\u53ef\u80fd\u5c0f\u5fc3\u5730\u5efa\u6784\u539f\u5730\u7b97\u6cd5\u800c\u90e8\u4f1a\u66f4\u52a8\u8d44\u6599\uff08\u9664\u975e\u8d44\u6599\u5df2\u4e0d\u4f1a\u518d\u88ab\u4f7f\u7528\uff09\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u4e0a\u8fd9\u5374\u5f88\u5c11\u89c1\u5230\u3002\u53c2\u8003\u7eaf\u51fd\u6570\u6570\u636e\u7ed3\u6784\uff08purely functional data structure\uff09\u3002","title":"\u539f\u5730\u7b97\u6cd5"},{"location":"in-place/#_1","text":"In computer science, an in-place algorithm is an algorithm which transforms input using no auxiliary data structure. However a small amount of extra storage space is allowed for auxiliary variables. The input is usually overwritten by the output as the algorithm executes. In-place algorithm updates input sequence only through replacement or swapping of elements. An algorithm which is not in-place is sometimes called not-in-place or out-of-place. \u50cf wiki \u91cc\u9762\u8bf4\u7684\uff0c\u539f\u5730\u7b97\u6cd5\u662f\u57fa\u672c\u4e0a\u4e0d\u9700\u8981\u989d\u5916\u8f85\u52a9\u7684\u6570\u636e\u7ed3\u6784,\u7136\u800c,\u5141\u8bb8\u5c11\u91cf\u989d\u5916\u7684\u8f85\u52a9\u53d8\u91cf\u6765\u8f6c\u6362\u6570\u636e\u7684\u7b97\u6cd5\u3002\u5728\u8ba1\u7b97\u590d\u6742\u6027\u7406\u8bba\u4e2d\uff0c\u539f\u5730\u7b97\u6cd5\u5305\u542b\u4f7f\u7528O(1)\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u6240\u6709\u7b97\u6cd5\uff0cDSPACE(1)\u7c7b\u578b\u3002 function reverse-in-place(a[0..n]) for i from 0 to floor(n/2) swap(a[i], a[n-i])","title":"\u539f\u5730\u7b97\u6cd5"},{"location":"in-place/#_2","text":"\u6bd4\u5982\u6211\u4eec\u5728 JS \u4e2d\uff0c\u5b9e\u73b0\u7ffb\u8f6c\u6570\u7ec4\uff0c\uff08array.prototype.reverse\uff09 \u9664\u5916\u3002[1,2,3] = [3,2,1] function reverseArray(arr) { var len = array.length; var middle = Math.floor(len / 2); for (var i = 0; i middle; i += 1) { var temp = array[i]; array[i] = array[n - 1 - i]; array[n - 1 - i] = temp; } } \u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u7528\u501f\u52a9\u53e6\u5916\u4e00\u4e2a\u4e00\u4e2a\u6570\u7ec4\u5012\u5e8f\u5faa\u73af\u4e86\u3002","title":"\u6570\u7ec4\u7ffb\u8f6c"},{"location":"in-place/#_3","text":"\u6bd4\u5982\u6211\u4eec\u7ed9\u51fa\u4e00\u7ec4\u6392\u597d\u540e\u7684\u6570\u7ec4\uff0c\u7136\u540e\u5220\u9664\u6389\u5176\u4e2d\u91cd\u590d\u7684\u5143\u7d20 [1,2,3,3,3,4,5,5,5,6,7] to [1,2,3,4,5,6,7] var removeDuplicates = function(nums) { var i = 0; // \u8fd9\u91cc\u6709\u95ee\u9898\uff0c\u9700\u8981\u770b for-of \u7684\u5faa\u73af // https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of for (let n of nums) { if (i==0 || n nums[i - 1]) { nums[i++] = n; } } return i; };","title":"\u5220\u9664\u6392\u5e8f\u540e\u6570\u7ec4\u7684\u91cd\u590d\u5143\u7d20"},{"location":"in-place/#_4","text":"\u6700\u8fd1 20200202 \u6bd4\u8f83\u706b\uff0c\u8fd9\u662f\u6bd4\u8f83\u5e38\u89c1\u7684 \u56de\u6587 \u6570\u5b57\u3002\u7c7b\u4f3c\u5355\u8bcd\u6bd4\u5982 bob \u6216\u8005\u53e5\u5b50 Was it a car or a cat I saw? \u3002 'aba' = true 'accad' = false '20200202' = true \u6211\u4eec\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u56de\u6587\u7684\u65f6\u5019\u53ef\u4ee5\u7528\u5230\u3002 function isPalindromeStr(str) { var middle = Math.floor(str.length / 2); for (var i = 0; i middle; i++) if (str[i] !== str[str.length - i - 1]) { return false; } return true; } \u5bf9\u5e94\u4e0b\u9762\u4e09\u4e2a\u9898\u76ee In-place algorithm Palindrome Longest Palindromic Substring \u5176\u4ed6\u7684\u4f8b\u5b50\uff0c\u6392\u5e8f\u7b97\u6cd5\u4f1a\u539f\u5730\u91cd\u65b0\u6392\u653e\u9635\u5217\u5185\u5bb9\u6210\u4e3a\u6392\u5e8f\u8fc7\u7684\u987a\u5e8f\uff0c\u5305\u542b\uff1a \u5192\u6ce1\u6392\u5e8f \u9009\u62e9\u6392\u5e8f \u63d2\u5165\u6392\u5e8f \u5806\u6392\u5e8f \u5e0c\u5c14\u6392\u5e8f \u5feb\u901f\u6392\u5e8f\u901a\u5e38\u88ab\u63cf\u8ff0\u4e3a\u4e00\u4e2a\u539f\u5730\u7b97\u6cd5\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a\u5e76\u4e0d\u662f\u3002\u5927\u90e8\u4efd\u7684\u5b9e\u4f5c\u9700\u8981O(log n)\u7684\u7a7a\u95f4\u6765\u652f\u6301\u5b83\u7684 \u5206\u6cbb\u6cd5 \uff08divide-and-conquer\uff09\u9012\u56de\u3002\u5927\u90e8\u4efd\u9009\u62e9\u7b97\u6cd5\u4e5f\u662f\u539f\u5730\uff0c\u867d\u7136\u5728\u627e\u5230\u6700\u540e\u7ed3\u679c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6709\u67d0\u4e9b\u76f8\u5f53\u5730\u91cd\u65b0\u6392\u5217\u8f93\u5165\u9635\u5217\uff0c\u4f46\u5374\u662f\u56fa\u5b9a\u5927\u5c0f\u7684\u7ed3\u679c\u3002","title":"\u5224\u65ad\u56de\u6587"},{"location":"in-place/#_5","text":"\u5728 \u8ba1\u7b97\u590d\u6742\u6027\u7406\u8bba \u4e2d\uff0c\u539f\u5730\u7b97\u6cd5\u5305\u542b\u4f7f\u7528O(1) \u7a7a\u95f4\u590d\u6742\u5ea6 \u7684\u6240\u6709\u7b97\u6cd5\uff0cDSPACE(1)\u7c7b\u578b\u3002\u8fd9\u4e2a\u7c7b\u578b\u662f\u975e\u5e38\u6709\u9650\u7684\uff1b\u5b83\u4e0e\u6b63\u89c4\u8bed\u8a001\u76f8\u7b49\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u751a\u81f3\u4e0d\u5305\u542b\u4e0a\u9762\u6240\u5217\u7684\u4efb\u4f55\u8303\u4f8b\u3002 \u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0c\u6211\u4eec\u4e5f\u8003\u8651\u5728 L \u7684\u7b97\u6cd5\uff0c\u8fd9\u7c7b\u578b\u7684\u95ee\u9898\u9700\u8981O(log n)\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u6765\u6210\u4e3a\u539f\u5730\u3002\u867d\u7136\u8fd9\u4e2a\u4f3c\u4e4e\u4e0e\u6211\u4eec\u5148\u524d\u7684\u5b9a\u4e49\u77db\u76fe\uff0c\u4f46\u662f\u6211\u4eec\u5fc5\u987b\u8ba4\u4e3a\u5728\u62bd\u8c61\u7684\u4e16\u754c\uff0c\u8f93\u5165\u7684\u8d44\u6599\u53ef\u4ee5\u662f\u4efb\u610f\u5de8\u5927\u7684\u3002\u5728\u4e00\u90e8\u771f\u5b9e\u7684\u7535\u8111\uff0c\u6307\u6807\uff08pointer\uff09\u4ec5\u9700\u8981\u4e00\u4e2a\u5c0f\u7684\u56fa\u5b9a\u6570\u91cf\u7a7a\u95f4\uff0c\u56e0\u4e3a\u5b9e\u4f53\u5185\u5b58\u7684\u6570\u91cf\u662f\u56fa\u5b9a\u7684\uff0c\u4f46\u662f\u4e00\u822c\u4e0a\u4e00\u4e2a\u5927\u5c0f\u4e3an\u7684\u6570\u5217\u9700\u8981O(log n)\u4f4d\u5143\u6765\u4f5c\u4e3a\u5b83\u7684\u7d22\u5f15\uff08index\uff09\u3002 \u7ed3\u679c\u662f\u5426\u610f\u6307\u5feb\u901f\u6392\u5e8f\u662f\u539f\u5730\u7684\uff1f\u5176\u5b9e\u4e00\u70b9\u4e5f\u4e0d \u2014 \u6280\u672f\u4e0a\u6765\u8bf4\uff0c\u5b83\u9700\u8981O(log2 n)\u7a7a\u95f4\uff0c\u56e0\u4e3a\u5b83\u7684O(log n) \u5806\u6808\u6846\u67b6\uff08stack frames\uff09\u6bcf\u4e00\u4e2a\u90fd\u542b\u6709\u4e00\u4e2a\u56fa\u5b9a\u6570\u91cf\u7684\u6307\u6807\uff08\u6bcf\u4e00\u4e2a\u5927\u5c0f\u4e3aO(log n)\uff09\u3002 \u8fa8\u522b\u62e5\u6709 L \u7684\u539f\u5730\u7b97\u6cd5\u62e5\u6709\u67d0\u4e9b\u6709\u8da3\u7684\u542b\u610f\uff1b\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5b83\u610f\u6307\u5b58\u5728\u4e00\u4e2a\uff08\u76f8\u5f53\u5730\u590d\u6742\uff09\u539f\u5730\u7b97\u6cd5\uff0c\u51b3\u5b9a\u5728\u4e00\u4e2a \u65e0\u5411\u56fe \uff08undirected graph\uff09\u4e2d\u7684\u4efb\u4e24\u4e2a\u8282\u70b9\uff08nodes\uff09\u4e4b\u95f4\u662f\u5426\u5b58\u5728\u4e00\u6761\u8def\u5f84\uff08path\uff09\uff0c\u8fd9\u662f\u4e00\u4e2a\u9700\u8981O(n)\u4e2a\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u4f7f\u7528\u5178\u578b\u7684\u7b97\u6cd5\u50cf\u662f\u6df1\u5ea6\u4f18\u5148\u641c\u5bfb(depth-first search)\uff08\u6bcf\u4e2a\u8282\u70b9\u6709\u4e2a\u8d70\u8bbf\u7684\u4f4d\u5143\uff09\u7684\u95ee\u9898\u3002\u6709\u4e9b\u95ee\u9898\u50cf\u662f\u51b3\u5b9a\u4e00\u4e2a\u56fe\u5f62\u662f\u5426\u4e3a \u4e8c\u5206\u56fe \uff08bipartite graph\uff09\u6216\u6d4b\u8bd5\u4e24\u4e2a\u56fe\u5f62\u4f7f\u5426\u6709\u76f8\u540c\u6570\u91cf\u7684\u8fde\u7ed3\u5143\u4ef6\uff08 connected component \uff09\uff0c\u63a5\u7740\u9488\u5bf9\u8fd9\u4e9b\u95ee\u9898\u4ea7\u51fa\u539f\u5730\u7b97\u6cd5\u3002\u53c2\u8003SL\u6709\u66f4\u591a\u7684\u8d44\u8baf\u3002","title":"\u5728\u8ba1\u7b97\u4e0a\u7684\u590d\u6742\u5ea6"},{"location":"in-place/#_6","text":"\u5728\u5f88\u591a\u60c5\u51b5\uff0c\u501f\u7531\u4f7f\u7528 \u968f\u673a\u5316\u7b97\u6cd5 \uff08randomized algorithms\uff09\uff0c\u4e00\u4e2a\u7b97\u6cd5\u7684\u7a7a\u95f4\u9700\u6c42\u53ef\u4ee5\u88ab\u6781\u5ea6\u5730\u88c1\u51cf\u6389\u3002\u4e3e\u4e2a\u8303\u4f8b\uff0c\u6211\u4eec\u5e0c\u671b\u77e5\u9053\u4e00\u4e2a\u6709 n \u4e2a\u9876\u70b9\uff08vertices\uff09\u7684\u56fe\u5f62\u4e2d\u7684\u4e24\u4e2a\u9876\u70b9\u662f\u5426\u4f4d\u4e8e\u56fe\u4e2d\u540c\u4e00\u4e2a\u8fde\u63a5\u5143\u4ef6\uff08connected component\uff09\u3002\u6ca1\u6709\u5df2\u77e5\u7b80\u5355\u3001\u51b3\u5b9a\u6027\u7684\uff08deterministic\uff09\u3001\u539f\u5730\u7b97\u6cd5\u6765\u51b3\u5b9a\u8fd9\u4ef6\u4e8b\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u7b80\u5355\u5730\u7531\u4e00\u4e2a\u9876\u70b9\u5f00\u59cb\uff0c\u4e14\u6267\u884c\u5927\u7ea620n3\u6b65\u7684\u968f\u673a\u8d70\u8def\uff08random walk\uff09\uff0c\u90a3\u6211\u4eec\u4f1a\u5076\u9047\u5230\u5176\u4ed6\u9876\u70b9\u6765\u63d0\u4f9b\u5b83\u4e0d\u662f\u5728\u540c\u4e00\u4e2a\u5143\u4ef6\uff08component\uff09\u4e2d\u7684\u673a\u4f1a\u662f\u975e\u5e38\u5730\u9ad8\u3002\u7c7b\u4f3c\u5730\uff0c\u5bf9\u4e8e\u8d28\u6570\u6d4b\u8bd5\uff08primality test\uff09\u6709\u7b80\u5355\u7684\u968f\u673a\u5316\u539f\u5730\u7b97\u6cd5\u50cf\u662f\u7c73\u52d2-\u62c9\u5bbe\u68c0\u9a8c\uff0c\u4e5f\u6709\u7b80\u5355\u539f\u5730 \u968f\u673a\u5316 \u6574\u6570\u5206\u89e3 \u7b97\u6cd5\u50cf\u662fPollard's rho \u7b97\u6cd5\u3002\u53c2\u8003RL\u548cBPL\u6709\u5bf9\u8fd9\u4e2a\u73b0\u8c61\u66f4\u591a\u7684\u8ba8\u8bba\u3002","title":"\u968f\u610f\u7684\u89d2\u8272"},{"location":"in-place/#_7","text":"\u51fd\u6570 \u7a0b\u5f0f\u8bbe\u8ba1 \uff08functional programming\uff09\u8bed\u8a00\u7ecf\u5e38\u4e0d\u9f13\u52b1\u6216\u4e0d\u652f\u63f4\u4f1a\u8986\u76d6\u8d44\u6599\u7684\u539f\u5730\u7b97\u6cd5\uff0c\u56e0\u4e3a\u8fd9\u662f\u526f\u4f5c\u7528\u7684\u4e00\u79cd\u578b\u6001\uff1b\u53cd\u4e4b\uff0c\u4ed6\u4eec\u53ea\u5141\u8bb8\u5efa\u7acb\u65b0\u7684\u8d44\u6599\u3002\u7136\u800c\uff0c\u597d\u7684\u51fd\u6570\u8bed\u8a00 \u7f16\u8bd1\u5668 \uff08compiler\uff09\u5728\u5f53\u4e00\u4e2a\u4e0e\u4ee5\u5b58\u5728\u4e4b\u975e\u5e38\u76f8\u4f3c\u7684\u7269\u4ef6\u88ab\u5efa\u7acb\u65f6\uff0c\u90fd\u7ecf\u5e38\u4f1a\u8fa8\u8bc6\u51fa\u6765\uff0c\u7136\u540e\u65e7\u7684\u5c31\u4f1a\u88ab\u4e22\u5f03\u6389\uff0c\u800c\u4e14\u4f1a\u6700\u628a\u8fd9\u6700\u4f73\u5316\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\" \u5f15\u64ce\u76d6 \u4e4b\u4e0b\"\u8f6c\u6362\u3002 \u57fa\u672c\u4e0a\uff0c\u6709\u53ef\u80fd\u5c0f\u5fc3\u5730\u5efa\u6784\u539f\u5730\u7b97\u6cd5\u800c\u90e8\u4f1a\u66f4\u52a8\u8d44\u6599\uff08\u9664\u975e\u8d44\u6599\u5df2\u4e0d\u4f1a\u518d\u88ab\u4f7f\u7528\uff09\uff0c\u4f46\u662f\u5728\u5b9e\u9645\u4e0a\u8fd9\u5374\u5f88\u5c11\u89c1\u5230\u3002\u53c2\u8003\u7eaf\u51fd\u6570\u6570\u636e\u7ed3\u6784\uff08purely functional data structure\uff09\u3002","title":"\u5728\u51fd\u6570\u7684\u7a0b\u5f0f\u8bbe\u8ba1"},{"location":"part-two/","text":"\u4e8c\u5206\u641c\u7d22 \u641c\u7d22\u8fc7\u7a0b\u4ece\u6570\u7ec4\u7684\u4e2d\u95f4\u5143\u7d20\u5f00\u59cb\uff0c\u5982\u679c\u4e2d\u95f4\u5143\u7d20\u6b63\u597d\u662f\u8981\u67e5\u627e\u7684\u5143\u7d20\uff0c\u5219\u641c\u7d22\u8fc7\u7a0b\u7ed3\u675f\uff1b\u5982\u679c\u67d0\u4e00\u7279\u5b9a\u5143\u7d20\u5927\u4e8e\u6216\u8005\u5c0f\u4e8e\u4e2d\u95f4\u5143\u7d20\uff0c\u5219\u5728\u6570\u7ec4\u5927\u4e8e\u6216\u5c0f\u4e8e\u4e2d\u95f4\u5143\u7d20\u7684\u90a3\u4e00\u534a\u4e2d\u67e5\u627e\uff0c\u800c\u4e14\u8ddf\u5f00\u59cb\u4e00\u6837\u4ece\u4e2d\u95f4\u5143\u7d20\u5f00\u59cb\u6bd4\u8f83\u3002\u5982\u679c\u5728\u67d0\u4e00\u6b65\u9aa4\u6570\u7ec4\u4e3a\u7a7a\uff0c\u5219\u4ee3\u8868\u627e\u4e0d\u5230\u3002\u8fd9\u79cd\u641c\u7d22\u7b97\u6cd5\u6bcf\u4e00\u6b21\u6bd4\u8f83\u90fd\u4f7f\u641c\u7d22\u8303\u56f4\u7f29\u5c0f\u4e00\u534a\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6298\u534a\u641c\u7d22\u6bcf\u6b21\u628a\u641c\u7d22\u533a\u57df\u51cf\u5c11\u4e00\u534a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u867d\u4ee5\u9012\u5f52\u5f62\u5f0f\u5b9a\u4e49\uff0c\u4f46\u662f \u5c3e\u9012\u5f52 \uff0c\u53ef\u6539\u5199\u4e3a\u5faa\u73af\u3002 \u4e8c\u5206\u67e5\u627e\u6709\u4e24\u79cd\u5b9e\u73b0\uff1awhile \u5faa\u73af\u548c\u9012\u5f52\u51fd\u6570\u8c03\u7528\uff08\u4e0d\u540c\u8bed\u8a00\u5b9e\u73b0\uff09 \u5f53while\u6ee1\u8db3\u6761\u4ef6\u65f6\uff0c\u8fd4\u56de\uff1b\u5982\u679c\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u6539\u53d8\u5f00\u59cb\u548c\u7ed3\u675f\u503c\uff0c\u7ee7\u7eed\u5faa\u73af \u9012\u5f52\uff1a\u5f53\u6ee1\u8db3\u6761\u4ef6\u65f6\uff0c\u8fd4\u56deindex\uff1b\u4e0d\u6ee1\u8db3\u6761\u4ef6\u65f6\uff0c\u66f4\u6539\u8f93\u5165\u53c2\u6570\u9012\u5f52\u8c03\u7528 \u6ce8\u610f\u4e8b\u9879\uff1a\u6bcf\u6b21\u5faa\u73af\u8fb9\u754c\u4e0d\u80fd\u9057\u6f0f\uff1b\u9700\u8981\u5904\u7406\u641c\u7d22\u7ed3\u679c\u4e0d\u5b58\u5728\u65f6\u7684\u60c5\u51b5\uff08\u4e0d\u4f1a\u51fa\u73b0\u6b7b\u5faa\u73af\uff09 C \u9012\u5f52 int binary_search(const int arr[], int start, int end, int khey) { if (start end) return -1; int mid = start + (end - start) / 2; if (arr[mid] khey) return binary_search(arr, start, mid - 1, khey); else if (arr[mid] khey) return binary_search(arr, mid + 1, end, khey); else return mid; } javascript \u9012\u5f52 Array.prototype.binary_search = function(low, high, khey) { if (low high) { return -1; } var mid = parseInt((high + low) / 2); if (this[mid] khey) { return this.binary_search(low, mid - 1, khey); } else if (this[mid] khey) { return this.binary_search(mid + 1, high, khey); } return mid; } Python3 \u7248\u672c \u9012\u5f52 def binary_search(arr,start,end,hkey): if start end: return -1 mid = start + (end - start) / 2 if arr[mid] hkey: return binary_search(arr, start, mid - 1, hkey) if arr[mid] hkey: return binary_search(arr, mid + 1, end, hkey) return mid Python3 \u7248\u672c while \u5faa\u73af def binary_search(arr, start, end, hkey): while start = end: mid = start + (end - start) if arr[mid] hkey: start = mid + 1 elif arr[mid] hkey: end = mid - 1 else: return mid \u5b9e\u9645\u6848\u4f8b \u4e8c\u5206\u6cd5\u641c\u7d22\u6709\u5e8f\u6570\u7ec4 function binSearch(oldArr, data) { // \u5982\u679c\u4f20\u5165\u65e0\u5e8f\u6570\u7ec4\uff0c\u9996\u5148\u6392\u5e8f let arr = qSort(oldArr); // \u8bbe\u7f6e\u521d\u59cb\u4e0a\u4e0b\u8fb9\u754c let upperBound = arr.length - 1, lowerBound = 0; // \u5f00\u59cb\u5faa\u73af\uff08\u4e8c\u5206\uff09 while (lowerBound = upperBound) { var mid = Math.floor((upperBound + lowerBound) / 2); if(arr[mid] data) { lowerBound = mid + 1; } else if(arr[mid] data) { upperBound = mid - 1; } else { return mid; } } // \u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1 return -1; } var test = [1,2,3,4,5,6]; console.log(binSearch(test,2)); //\u4f4d\u7f6e 1 \u4e8c\u5206\u6cd5\u5b9e\u73b0\u5feb\u901f\u6392\u5e8f function qSort(list) { if (list.length == 0) { return []; } //\u521b\u5efa\u4e24\u4e2a\u6570\u7ec4\uff0c\u4e00\u4e2a\u7528\u6765\u5b58\u653e\u6bd4\u57fa\u51c6\u5c0f\u7684\u5143\u7d20\uff0c\u53e6\u4e00\u4e2a\u5b58\u653e\u6bd4\u57fa\u51c6\u503c\u5927\u7684\u5143\u7d20 var left = []; var right = []; //\u57fa\u51c6\u503c\u53d6\u81ea\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 var pivot = list[0]; //\u904d\u5386\u6570\u7ec4\uff0c\u6839\u636e\u5b83\u4eec\u4e0e\u57fa\u51c6\u503c\u7684\u5173\u7cfb\u653e\u5230\u5408\u9002\u7684\u6570\u7ec4\u4e2d for(var i = 1; i list.length; i++) { if (list[i] pivot) { left.push(list[i]); } else { right.push(list[i]); } } //\u7136\u540e\u5bf9\u4e8e\u8f83\u5c0f\u7684\u6570\u7ec4\u548c\u8f83\u5927\u7684\u6570\u7ec4\u5206\u522b\u9012\u5f52\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570 return qSort(left).concat(pivot,qSort(right)); } var test = [4,3,5,1,2]; console.log(qSort(test)); //[1,2,3,4,5] \u63d2\u5165\u6392\u5e8f\uff0c\u9009\u62e9\u6392\u5e8f\uff0c\u5feb\u901f\u6392\u5e8f\uff0c\u5e0c\u5c14\u6392\u5e8f\u53c2\u8003\u4e0b\u9762\u94fe\u63a5 https://blog.csdn.net/charlene0824/article/details/51387165","title":"\u4e8c\u5206\u7b97\u6cd5"},{"location":"part-two/#_1","text":"\u641c\u7d22\u8fc7\u7a0b\u4ece\u6570\u7ec4\u7684\u4e2d\u95f4\u5143\u7d20\u5f00\u59cb\uff0c\u5982\u679c\u4e2d\u95f4\u5143\u7d20\u6b63\u597d\u662f\u8981\u67e5\u627e\u7684\u5143\u7d20\uff0c\u5219\u641c\u7d22\u8fc7\u7a0b\u7ed3\u675f\uff1b\u5982\u679c\u67d0\u4e00\u7279\u5b9a\u5143\u7d20\u5927\u4e8e\u6216\u8005\u5c0f\u4e8e\u4e2d\u95f4\u5143\u7d20\uff0c\u5219\u5728\u6570\u7ec4\u5927\u4e8e\u6216\u5c0f\u4e8e\u4e2d\u95f4\u5143\u7d20\u7684\u90a3\u4e00\u534a\u4e2d\u67e5\u627e\uff0c\u800c\u4e14\u8ddf\u5f00\u59cb\u4e00\u6837\u4ece\u4e2d\u95f4\u5143\u7d20\u5f00\u59cb\u6bd4\u8f83\u3002\u5982\u679c\u5728\u67d0\u4e00\u6b65\u9aa4\u6570\u7ec4\u4e3a\u7a7a\uff0c\u5219\u4ee3\u8868\u627e\u4e0d\u5230\u3002\u8fd9\u79cd\u641c\u7d22\u7b97\u6cd5\u6bcf\u4e00\u6b21\u6bd4\u8f83\u90fd\u4f7f\u641c\u7d22\u8303\u56f4\u7f29\u5c0f\u4e00\u534a\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u6298\u534a\u641c\u7d22\u6bcf\u6b21\u628a\u641c\u7d22\u533a\u57df\u51cf\u5c11\u4e00\u534a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \u7a7a\u95f4\u590d\u6742\u5ea6\uff1a\u867d\u4ee5\u9012\u5f52\u5f62\u5f0f\u5b9a\u4e49\uff0c\u4f46\u662f \u5c3e\u9012\u5f52 \uff0c\u53ef\u6539\u5199\u4e3a\u5faa\u73af\u3002 \u4e8c\u5206\u67e5\u627e\u6709\u4e24\u79cd\u5b9e\u73b0\uff1awhile \u5faa\u73af\u548c\u9012\u5f52\u51fd\u6570\u8c03\u7528\uff08\u4e0d\u540c\u8bed\u8a00\u5b9e\u73b0\uff09 \u5f53while\u6ee1\u8db3\u6761\u4ef6\u65f6\uff0c\u8fd4\u56de\uff1b\u5982\u679c\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u6539\u53d8\u5f00\u59cb\u548c\u7ed3\u675f\u503c\uff0c\u7ee7\u7eed\u5faa\u73af \u9012\u5f52\uff1a\u5f53\u6ee1\u8db3\u6761\u4ef6\u65f6\uff0c\u8fd4\u56deindex\uff1b\u4e0d\u6ee1\u8db3\u6761\u4ef6\u65f6\uff0c\u66f4\u6539\u8f93\u5165\u53c2\u6570\u9012\u5f52\u8c03\u7528 \u6ce8\u610f\u4e8b\u9879\uff1a\u6bcf\u6b21\u5faa\u73af\u8fb9\u754c\u4e0d\u80fd\u9057\u6f0f\uff1b\u9700\u8981\u5904\u7406\u641c\u7d22\u7ed3\u679c\u4e0d\u5b58\u5728\u65f6\u7684\u60c5\u51b5\uff08\u4e0d\u4f1a\u51fa\u73b0\u6b7b\u5faa\u73af\uff09","title":"\u4e8c\u5206\u641c\u7d22"},{"location":"part-two/#c","text":"int binary_search(const int arr[], int start, int end, int khey) { if (start end) return -1; int mid = start + (end - start) / 2; if (arr[mid] khey) return binary_search(arr, start, mid - 1, khey); else if (arr[mid] khey) return binary_search(arr, mid + 1, end, khey); else return mid; }","title":"C \u9012\u5f52"},{"location":"part-two/#javascript","text":"Array.prototype.binary_search = function(low, high, khey) { if (low high) { return -1; } var mid = parseInt((high + low) / 2); if (this[mid] khey) { return this.binary_search(low, mid - 1, khey); } else if (this[mid] khey) { return this.binary_search(mid + 1, high, khey); } return mid; }","title":"javascript \u9012\u5f52"},{"location":"part-two/#python3","text":"def binary_search(arr,start,end,hkey): if start end: return -1 mid = start + (end - start) / 2 if arr[mid] hkey: return binary_search(arr, start, mid - 1, hkey) if arr[mid] hkey: return binary_search(arr, mid + 1, end, hkey) return mid","title":"Python3 \u7248\u672c \u9012\u5f52"},{"location":"part-two/#python3-while","text":"def binary_search(arr, start, end, hkey): while start = end: mid = start + (end - start) if arr[mid] hkey: start = mid + 1 elif arr[mid] hkey: end = mid - 1 else: return mid","title":"Python3 \u7248\u672c while \u5faa\u73af"},{"location":"part-two/#_2","text":"","title":"\u5b9e\u9645\u6848\u4f8b"},{"location":"part-two/#_3","text":"function binSearch(oldArr, data) { // \u5982\u679c\u4f20\u5165\u65e0\u5e8f\u6570\u7ec4\uff0c\u9996\u5148\u6392\u5e8f let arr = qSort(oldArr); // \u8bbe\u7f6e\u521d\u59cb\u4e0a\u4e0b\u8fb9\u754c let upperBound = arr.length - 1, lowerBound = 0; // \u5f00\u59cb\u5faa\u73af\uff08\u4e8c\u5206\uff09 while (lowerBound = upperBound) { var mid = Math.floor((upperBound + lowerBound) / 2); if(arr[mid] data) { lowerBound = mid + 1; } else if(arr[mid] data) { upperBound = mid - 1; } else { return mid; } } // \u6ca1\u6709\u627e\u5230\uff0c\u8fd4\u56de -1 return -1; } var test = [1,2,3,4,5,6]; console.log(binSearch(test,2)); //\u4f4d\u7f6e 1","title":"\u4e8c\u5206\u6cd5\u641c\u7d22\u6709\u5e8f\u6570\u7ec4"},{"location":"part-two/#_4","text":"function qSort(list) { if (list.length == 0) { return []; } //\u521b\u5efa\u4e24\u4e2a\u6570\u7ec4\uff0c\u4e00\u4e2a\u7528\u6765\u5b58\u653e\u6bd4\u57fa\u51c6\u5c0f\u7684\u5143\u7d20\uff0c\u53e6\u4e00\u4e2a\u5b58\u653e\u6bd4\u57fa\u51c6\u503c\u5927\u7684\u5143\u7d20 var left = []; var right = []; //\u57fa\u51c6\u503c\u53d6\u81ea\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 var pivot = list[0]; //\u904d\u5386\u6570\u7ec4\uff0c\u6839\u636e\u5b83\u4eec\u4e0e\u57fa\u51c6\u503c\u7684\u5173\u7cfb\u653e\u5230\u5408\u9002\u7684\u6570\u7ec4\u4e2d for(var i = 1; i list.length; i++) { if (list[i] pivot) { left.push(list[i]); } else { right.push(list[i]); } } //\u7136\u540e\u5bf9\u4e8e\u8f83\u5c0f\u7684\u6570\u7ec4\u548c\u8f83\u5927\u7684\u6570\u7ec4\u5206\u522b\u9012\u5f52\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570 return qSort(left).concat(pivot,qSort(right)); } var test = [4,3,5,1,2]; console.log(qSort(test)); //[1,2,3,4,5] \u63d2\u5165\u6392\u5e8f\uff0c\u9009\u62e9\u6392\u5e8f\uff0c\u5feb\u901f\u6392\u5e8f\uff0c\u5e0c\u5c14\u6392\u5e8f\u53c2\u8003\u4e0b\u9762\u94fe\u63a5 https://blog.csdn.net/charlene0824/article/details/51387165","title":"\u4e8c\u5206\u6cd5\u5b9e\u73b0\u5feb\u901f\u6392\u5e8f"},{"location":"process-and-thread/","text":"\u8fdb\u7a0b\u548c\u7ebf\u7a0b \u6982\u5ff5 \u8fdb\u7a0b\uff08Process\uff09\u548c\u7ebf\u7a0b\uff08Thread\uff09 \u662f\u64cd\u4f5c\u7cfb\u7edf\u5904\u7406\u4efb\u52a1\u7684\u4e00\u4e2a\u5355\u4f4d\u3002\u8fdb\u7a0b\u7c7b\u4f3c\u4e8e\u4efb\u52a1\u7ba1\u7406\u5668\u4e2d\u7684\u7a0b\u5e8f\uff0c\u4f8b\u5982 QQ.exe \u548c chrome.exe\u3002\u4e00\u4e2a\u8fdb\u7a0b\u5305\u542b\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u7ebf\u7a0b\uff0c\u4f8b\u5982 word.exe \u7a0b\u5e8f\u53ef\u4ee5\u540c\u65f6\u5b8c\u6210\u5f88\u591a\u4efb\u52a1\uff0c\u7f16\u8f91\u3001\u4fdd\u5b58\u3001\u8bed\u53e5\u68c0\u67e5\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u5b50\u4efb\u52a1\u5c31\u662f\u4e00\u4e2a\u7ebf\u7a0b\u3002 \u591a\u8fdb\u7a0b\u591a\u7ebf\u7a0b \uff1a\u4e00\u4e2aCPU\u53ef\u4ee5\u5b8c\u6210\u4e00\u4e2a\u8ba1\u7b97\uff0c\u591a\u6838CPU\u5c31\u53ef\u4ee5\u540c\u65f6\u5b8c\u6210\u591a\u4e2a\u8ba1\u7b97\u3002\u5b9e\u9645\u4e0a\uff0c\u4e0d\u540c\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7684\u4efb\u52a1\u5728CPU\u4e0a\u5f88\u5feb\u7684\u5207\u6362\uff0c\u6240\u4ee5\u663e\u793a\u4e3a\u591a\u8fdb\u7a0b\u591a\u7ebf\u7a0b\u540c\u65f6\u5904\u7406\u3002\u7ed9\u5355\u4e2a\u8fdb\u7a0b\u5206\u914d\u591a\u5c11\u8d44\u6e90\u548c\u65f6\u95f4\u4e0d\u662f\u7a0b\u5e8f\u51b3\u5b9a\u7684\uff0c\u662f\u64cd\u4f5c\u7cfb\u7edf\u51b3\u5b9a\u7684\u3002\u901a\u5e38\u6709\u4e09\u79cd\u6267\u884c\u4efb\u52a1\u7684\u6a21\u5f0f\uff1a\u591a\u7ebf\u7a0b\u3001\u591a\u8fdb\u7a0b\u3001\u591a\u7ebf\u7a0b\u8fdb\u7a0b\uff0c\u901a\u5e38\u4f7f\u7528\u524d\u4e24\u79cd\u3002\u591a\u4efb\u52a1\u7684\u590d\u6742\u5ea6\u8fdc\u8fdc\u9ad8\u5ea6\u5355\u4efb\u52a1\u3002 \u524d\u7aef\u4f7f\u7528 JS \u901a\u5e38\u53ef\u4ee5\u7406\u89e3\u4e3a\u5355\u7ebf\u7a0b\uff08\u524d\u7aef\u4e0d\u8003\u8651\u5e95\u5c42\u8fdb\u7a0b\u95ee\u9898\uff09\u3002\u4e0d\u540c\u7684\u4efb\u52a1\u653e\u5728\u4e3b\u7ebf\u7a0b\u4e0a\u4f9d\u6b21\u6267\u884c\uff08\u811a\u672c\u8bed\u8a00\u7684\u7279\u5f81\uff09\uff0c\u540c\u65f6\u53ef\u4ee5\u5c06\u56de\u8c03\u51fd\u6570\u6216\u8005\u4e8b\u4ef6\u76d1\u542c\u653e\u5728\u4efb\u52a1\u5e8f\u5217\u4e2d\u5904\u7406\u3002\u5f53\u4e3b\u7ebf\u7a0b\u4efb\u52a1\u6267\u884c\u5b8c\u540e\uff0cJS \u5f15\u64ce\u4f1a\u5904\u7406\u4efb\u52a1\u5e8f\u5217\u7684\u5176\u4ed6\u4efb\u52a1\u3002 \u670d\u52a1\u5668\u4f7f\u7528 \u5982\u679c\u670d\u52a1\u5668\u5355\u8fdb\u7a0b\u5355\u7ebf\u7a0b\uff0c\u90a3\u4e48\u9047\u5230\u9ad8\u5e76\u53d1\u7684\u60c5\u51b5\u5c31\u4e0d\u80fd\u5f88\u597d\u7684\u5904\u7406\uff0c\u6240\u4ee5\u4f7f\u7528\u591a\u8fdb\u7a0b\u3001\u591a\u7ebf\u7a0b\u3001IO\u591a\u8def\u590d\u7528\u7b49\u89e3\u51b3\u3002\u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\uff08\u5185\u5b58\uff09\u7684\u6700\u5c0f\u5355\u4f4d\uff0c\u7ebf\u7a0b\u662f\u7a0b\u5e8f\u6267\u884c\u7684\u6700\u5c0f\u5355\u4f4d\u3002 \u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7684\u533a\u522b\uff08\u9762\u8bd5\u9898\uff09 \u7ebf\u7a0b\u662f\u6700\u5c0f\u7684\u6267\u884c\u5355\u5143\uff0c\u8fdb\u7a0b\u81f3\u5c11\u7531\u4e00\u4e2a\u7ebf\u7a0b\u7ec4\u6210\u3002 \u6bcf\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b\u9700\u8981\u5f00\u8f9f\u5355\u72ec\u7684\u8d44\u6e90\uff0c\u5efa\u7acb\u6570\u636e\u8868\u7ef4\u62a4\u4ee3\u7801\u5806\u6808\uff0c\u64cd\u4f5c\u76f8\u5f53\u6602\u8d35\u3002\u4e0d\u540c\u7ebf\u7a0b\u95f4\u53ef\u4ee5\u5171\u4eab\u8d44\u6e90\u3002\u6240\u4ee5CPU\u5728\u7ebf\u7a0b\u95f4\u5207\u6362\u7684\u5f00\u9500\u66f4\u5c0f\uff0c\u7ebf\u7a0b\u4e4b\u95f4\u6570\u636e\u4ea4\u6362\u66f4\u65b9\u4fbf\u3002 \u7ebf\u7a0b\u53ef\u4ee5\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u6216\u8005\u9759\u6001\u53d8\u91cf\u505a\u6570\u636e\u4ea4\u6362\uff0c\u8fdb\u7a0b\u9700\u8981\u7528\u6570\u636e\u901a\u4fe1\u7684\u65b9\u5f0f\uff08IPC\uff09\u8fdb\u884c\u3002 \u591a\u7ebf\u7a0b\u7a0b\u5e8f\u4e2d\u53ea\u8981\u4e00\u4e2a\u7ebf\u7a0b\u6b7b\u6389\u6574\u4e2a\u8fdb\u7a0b\u5c31\u4f1a\u6b7b\u6389\uff08\u5171\u540c\u5185\u5b58\uff09\uff0c\u591a\u8fdb\u7a0b\u7a0b\u5e8f\u4e2d\u4e00\u4e2a\u8fdb\u7a0b\u6b7b\u6389\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u3002 fork is expensive. Memory is copied from the parent to the child, all descriptors are duplicated in the child, and so on. Current implementations use a technique called copy-on-write, which avoids a copy of the parent\u2019s data space to the child until the child needs its own copy. But, regardless of this optimization, fork is expensive. IPC is required to pass information between the parent and child after the fork. Passing information from the parent to the child before the fork is easy, since the child starts with a copy of the parent\u2019s data space and with a copy of all the parent\u2019s descriptors. But, returning information from the child to the parent takes more work. Threads help with both problems. Threads are sometimes called lightweight processes since a thread is \u201clighter weight\u201d than a process. That is, thread creation can be 10\u2013100 times faster than process creation. All threads within a process share the same global memory. This makes the sharing of information easy between the threads, but along with this simplicity comes the problem \u6458\u81ea\u300aUnix\u7f51\u7edc\u7f16\u7a0b\u300b \u53c2\u8003\u94fe\u63a5 https://www.liaoxuefeng.com/wiki/1016959663602400/1017627212385376 https://www.cnblogs.com/zhehan54/p/6130030.html","title":"License"},{"location":"process-and-thread/#_1","text":"","title":"\u8fdb\u7a0b\u548c\u7ebf\u7a0b"},{"location":"process-and-thread/#_2","text":"\u8fdb\u7a0b\uff08Process\uff09\u548c\u7ebf\u7a0b\uff08Thread\uff09 \u662f\u64cd\u4f5c\u7cfb\u7edf\u5904\u7406\u4efb\u52a1\u7684\u4e00\u4e2a\u5355\u4f4d\u3002\u8fdb\u7a0b\u7c7b\u4f3c\u4e8e\u4efb\u52a1\u7ba1\u7406\u5668\u4e2d\u7684\u7a0b\u5e8f\uff0c\u4f8b\u5982 QQ.exe \u548c chrome.exe\u3002\u4e00\u4e2a\u8fdb\u7a0b\u5305\u542b\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u7ebf\u7a0b\uff0c\u4f8b\u5982 word.exe \u7a0b\u5e8f\u53ef\u4ee5\u540c\u65f6\u5b8c\u6210\u5f88\u591a\u4efb\u52a1\uff0c\u7f16\u8f91\u3001\u4fdd\u5b58\u3001\u8bed\u53e5\u68c0\u67e5\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u5b50\u4efb\u52a1\u5c31\u662f\u4e00\u4e2a\u7ebf\u7a0b\u3002 \u591a\u8fdb\u7a0b\u591a\u7ebf\u7a0b \uff1a\u4e00\u4e2aCPU\u53ef\u4ee5\u5b8c\u6210\u4e00\u4e2a\u8ba1\u7b97\uff0c\u591a\u6838CPU\u5c31\u53ef\u4ee5\u540c\u65f6\u5b8c\u6210\u591a\u4e2a\u8ba1\u7b97\u3002\u5b9e\u9645\u4e0a\uff0c\u4e0d\u540c\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7684\u4efb\u52a1\u5728CPU\u4e0a\u5f88\u5feb\u7684\u5207\u6362\uff0c\u6240\u4ee5\u663e\u793a\u4e3a\u591a\u8fdb\u7a0b\u591a\u7ebf\u7a0b\u540c\u65f6\u5904\u7406\u3002\u7ed9\u5355\u4e2a\u8fdb\u7a0b\u5206\u914d\u591a\u5c11\u8d44\u6e90\u548c\u65f6\u95f4\u4e0d\u662f\u7a0b\u5e8f\u51b3\u5b9a\u7684\uff0c\u662f\u64cd\u4f5c\u7cfb\u7edf\u51b3\u5b9a\u7684\u3002\u901a\u5e38\u6709\u4e09\u79cd\u6267\u884c\u4efb\u52a1\u7684\u6a21\u5f0f\uff1a\u591a\u7ebf\u7a0b\u3001\u591a\u8fdb\u7a0b\u3001\u591a\u7ebf\u7a0b\u8fdb\u7a0b\uff0c\u901a\u5e38\u4f7f\u7528\u524d\u4e24\u79cd\u3002\u591a\u4efb\u52a1\u7684\u590d\u6742\u5ea6\u8fdc\u8fdc\u9ad8\u5ea6\u5355\u4efb\u52a1\u3002","title":"\u6982\u5ff5"},{"location":"process-and-thread/#_3","text":"JS \u901a\u5e38\u53ef\u4ee5\u7406\u89e3\u4e3a\u5355\u7ebf\u7a0b\uff08\u524d\u7aef\u4e0d\u8003\u8651\u5e95\u5c42\u8fdb\u7a0b\u95ee\u9898\uff09\u3002\u4e0d\u540c\u7684\u4efb\u52a1\u653e\u5728\u4e3b\u7ebf\u7a0b\u4e0a\u4f9d\u6b21\u6267\u884c\uff08\u811a\u672c\u8bed\u8a00\u7684\u7279\u5f81\uff09\uff0c\u540c\u65f6\u53ef\u4ee5\u5c06\u56de\u8c03\u51fd\u6570\u6216\u8005\u4e8b\u4ef6\u76d1\u542c\u653e\u5728\u4efb\u52a1\u5e8f\u5217\u4e2d\u5904\u7406\u3002\u5f53\u4e3b\u7ebf\u7a0b\u4efb\u52a1\u6267\u884c\u5b8c\u540e\uff0cJS \u5f15\u64ce\u4f1a\u5904\u7406\u4efb\u52a1\u5e8f\u5217\u7684\u5176\u4ed6\u4efb\u52a1\u3002","title":"\u524d\u7aef\u4f7f\u7528"},{"location":"process-and-thread/#_4","text":"\u5982\u679c\u670d\u52a1\u5668\u5355\u8fdb\u7a0b\u5355\u7ebf\u7a0b\uff0c\u90a3\u4e48\u9047\u5230\u9ad8\u5e76\u53d1\u7684\u60c5\u51b5\u5c31\u4e0d\u80fd\u5f88\u597d\u7684\u5904\u7406\uff0c\u6240\u4ee5\u4f7f\u7528\u591a\u8fdb\u7a0b\u3001\u591a\u7ebf\u7a0b\u3001IO\u591a\u8def\u590d\u7528\u7b49\u89e3\u51b3\u3002\u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\uff08\u5185\u5b58\uff09\u7684\u6700\u5c0f\u5355\u4f4d\uff0c\u7ebf\u7a0b\u662f\u7a0b\u5e8f\u6267\u884c\u7684\u6700\u5c0f\u5355\u4f4d\u3002","title":"\u670d\u52a1\u5668\u4f7f\u7528"},{"location":"process-and-thread/#_5","text":"\u7ebf\u7a0b\u662f\u6700\u5c0f\u7684\u6267\u884c\u5355\u5143\uff0c\u8fdb\u7a0b\u81f3\u5c11\u7531\u4e00\u4e2a\u7ebf\u7a0b\u7ec4\u6210\u3002 \u6bcf\u542f\u52a8\u4e00\u4e2a\u8fdb\u7a0b\u9700\u8981\u5f00\u8f9f\u5355\u72ec\u7684\u8d44\u6e90\uff0c\u5efa\u7acb\u6570\u636e\u8868\u7ef4\u62a4\u4ee3\u7801\u5806\u6808\uff0c\u64cd\u4f5c\u76f8\u5f53\u6602\u8d35\u3002\u4e0d\u540c\u7ebf\u7a0b\u95f4\u53ef\u4ee5\u5171\u4eab\u8d44\u6e90\u3002\u6240\u4ee5CPU\u5728\u7ebf\u7a0b\u95f4\u5207\u6362\u7684\u5f00\u9500\u66f4\u5c0f\uff0c\u7ebf\u7a0b\u4e4b\u95f4\u6570\u636e\u4ea4\u6362\u66f4\u65b9\u4fbf\u3002 \u7ebf\u7a0b\u53ef\u4ee5\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u6216\u8005\u9759\u6001\u53d8\u91cf\u505a\u6570\u636e\u4ea4\u6362\uff0c\u8fdb\u7a0b\u9700\u8981\u7528\u6570\u636e\u901a\u4fe1\u7684\u65b9\u5f0f\uff08IPC\uff09\u8fdb\u884c\u3002 \u591a\u7ebf\u7a0b\u7a0b\u5e8f\u4e2d\u53ea\u8981\u4e00\u4e2a\u7ebf\u7a0b\u6b7b\u6389\u6574\u4e2a\u8fdb\u7a0b\u5c31\u4f1a\u6b7b\u6389\uff08\u5171\u540c\u5185\u5b58\uff09\uff0c\u591a\u8fdb\u7a0b\u7a0b\u5e8f\u4e2d\u4e00\u4e2a\u8fdb\u7a0b\u6b7b\u6389\u4e0d\u4f1a\u5f71\u54cd\u5176\u4ed6\u3002 fork is expensive. Memory is copied from the parent to the child, all descriptors are duplicated in the child, and so on. Current implementations use a technique called copy-on-write, which avoids a copy of the parent\u2019s data space to the child until the child needs its own copy. But, regardless of this optimization, fork is expensive. IPC is required to pass information between the parent and child after the fork. Passing information from the parent to the child before the fork is easy, since the child starts with a copy of the parent\u2019s data space and with a copy of all the parent\u2019s descriptors. But, returning information from the child to the parent takes more work. Threads help with both problems. Threads are sometimes called lightweight processes since a thread is \u201clighter weight\u201d than a process. That is, thread creation can be 10\u2013100 times faster than process creation. All threads within a process share the same global memory. This makes the sharing of information easy between the threads, but along with this simplicity comes the problem \u6458\u81ea\u300aUnix\u7f51\u7edc\u7f16\u7a0b\u300b \u53c2\u8003\u94fe\u63a5 https://www.liaoxuefeng.com/wiki/1016959663602400/1017627212385376 https://www.cnblogs.com/zhehan54/p/6130030.html","title":"\u8fdb\u7a0b\u548c\u7ebf\u7a0b\u7684\u533a\u522b\uff08\u9762\u8bd5\u9898\uff09"},{"location":"uuid/","text":"UUID\u5e93\u4ecb\u7ecd\u548c\u4f7f\u7528 UUID\u4ecb\u7ecd UUID\u662fUniversally Unique Identifier\u7684\u7f29\u5199\uff0c\u5b83\u662f\u5728\u4e00\u5b9a\u7684\u8303\u56f4\u5185\u552f\u4e00\u7684\u673a\u5668\u751f\u6210\u7684\u6807\u8bc6\u7b26\uff0c\u4f7f\u7528 RFC\u89c4\u8303 \u3002 \u7ed3\u6784 UUID \u662f\u4e00\u4e2a128bit\u7684\u6570\u5b57\uff0c\u4e5f\u53ef\u4ee5\u8868\u73b0\u4e3a32\u4e2a16\u8fdb\u5236\u7684\u5b57\u7b26\uff0c\u4e2d\u95f4\u7528\u201d-\u201d\u5206\u5272 3F2504E0-4F89-11D3-9A0C-0305E82C3301 \u5176\u4e2d\u7684\u5b57\u6bcd\u662f16\u8fdb\u5236\u8868\u793a\uff0c\u5927\u5c0f\u5199\u65e0\u5173\u3002 - \u65f6\u95f4\u6233\uff0bUUID\u7248\u672c\u53f7\uff0c\u5206\u4e09\u6bb5\u536016\u4e2a\u5b57\u7b26(60bit+4bit)\uff0c - Clock Sequence\u53f7\u4e0e\u4fdd\u7559\u5b57\u6bb5\uff0c\u53604\u4e2a\u5b57\u7b26(13bit\uff0b3bit)\uff0c - \u8282\u70b9\u6807\u8bc6\u536012\u4e2a\u5b57\u7b26(48bit)\uff0c \u7279\u70b9 \u7531\u7b97\u6cd5\u673a\u5668\u751f\u6210 \uff1a\u89c4\u8303\u5b9a\u4e49\u4e86\u5305\u62ec\u7f51\u5361MAC\u5730\u5740\u3001\u65f6\u95f4\u6233\u3001\u540d\u5b57\u7a7a\u95f4\uff08Namespace\uff09\u3001\u968f\u673a\u6216\u4f2a\u968f\u673a\u6570\u3001\u65f6\u5e8f\u7b49\u5143\u7d20\uff0c\u4ee5\u53ca\u4ece\u8fd9\u4e9b\u5143\u7d20\u751f\u6210UUID\u7684\u7b97\u6cd5\u3002UUID\u7684\u590d\u6742\u7279\u6027\u5728\u4fdd\u8bc1\u4e86\u5176\u552f\u4e00\u6027\u7684\u540c\u65f6\uff0c\u610f\u5473\u7740\u53ea\u80fd\u7531\u8ba1\u7b97\u673a\u751f\u6210\u3002 \u975e\u4eba\u5de5\u6307\u5b9a\uff0c\u975e\u4eba\u5de5\u8bc6\u522b \uff1aUUID\u662f\u4e0d\u80fd\u4eba\u5de5\u6307\u5b9a\u7684\uff0cUUID\u7684\u590d\u6742\u6027\u51b3\u5b9a\u4e86\u201c\u4e00\u822c\u4eba\u201c\u4e0d\u80fd\u76f4\u63a5\u4ece\u4e00\u4e2aUUID\u77e5\u9053\u54ea\u4e2a\u5bf9\u8c61\u548c\u5b83\u5173\u8054\u3002 \u91cd\u590d\u7684\u53ef\u80fd\u6027\u6781\u5c0f \uff1aUUID\u7684\u751f\u6210\u89c4\u8303\u5b9a\u4e49\u7684\u7b97\u6cd5\u4e3b\u8981\u76ee\u7684\u5c31\u662f\u8981\u4fdd\u8bc1\u5176\u552f\u4e00\u6027\u3002\u4f46\u8fd9\u4e2a\u552f\u4e00\u6027\u662f\u6709\u9650\u7684\uff0c\u53ea\u5728\u7279\u5b9a\u7684\u8303\u56f4\u5185\u624d\u80fd\u5f97\u5230\u4fdd\u8bc1\uff0c\u8fd9\u548cUUID\u7684\u7c7b\u578b\u6709\u5173\uff08\u53c2\u89c1UUID\u7684\u7248\u672c\uff09\u3002 UUID.js \u5e93\u4f7f\u7528 \u6982\u8981 !-- HTML5 -- script src= src/uuid.js /script script var uuid = UUID.generate(); /script // Node.js let UUID = require( uuidjs ); let uuid = UUID.generate(); // TypeScript import UUID from 'uuidjs'; let str: string = UUID.generate(); let obj: UUID = UUID.genV4(); # Command-line npx uuidjs \u7279\u70b9 \u652f\u6301\u7248\u672c1\uff08\u57fa\u4e8e\u65f6\u95f4\u7684UUID\uff09\u7248\u672c4\uff08\u57fa\u4e8e\u968f\u673a\u6570\u7684UUID\uff09 \u5e76\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9762\u5411\u5bf9\u8c61\u7684\u754c\u9762\uff0c\u53ef\u4ee5\u751f\u6210\u591a\u79cd\u683c\u5f0f\u7684UUID \u4f7f\u7528\u5bc6\u7801\u5b89\u5168\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668(\u5982\u679c\u53ef\u7528)\uff0c\u5426\u5219\u4f7f\u7528Math.randow()\u751f\u6210\u968f\u673a\u6570 \u9644\u52a0\u989d\u5916\u7684\u968f\u673a\u503c\u6765\u8865\u507f JS \u7684\u65f6\u95f4\u6233\u5206\u8fa8\u7387\u4f4e\u4e8e\u7248\u672c1 uuid\u6240\u9700\u7684\u65f6\u95f4\u6233 \u5305\u542b\u5f88\u591a\u6d4b\u8bd5\u6848\u4f8b\uff08\u5305\u62ec\u683c\u5f0f\u68c0\u67e5\u548c\u7edf\u8ba1\u6d4b\u8bd5\uff09\u786e\u4fdd\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801 \u517c\u5bb9\u6027\uff1a\u652f\u6301\u65e9\u671f\u6d4f\u89c8\u5668\u548c\u73b0\u4ee3\u6d4f\u89c8\u5668\uff0c\u540c\u6837\u652f\u6301\u670d\u52a1\u5668\u73af\u5883\uff0c\u4e0eES3\u7248\u672c\u53ef\u4ee5\u517c\u5bb9\u3002 \u5b89\u88c5 \u76f4\u63a5\u4e0b\u8f7d uuid.js \u6587\u4ef6\u6216\u8005\u4f7f\u7528 npm install uuidjs \u8fdb\u884c\u5b89\u88c5\uff1b \u5728HTML\u4e2d\u76f4\u63a5\u5f15\u5165 src/uuid.js . script src= src/uuid.js /script \u5728 JS \u6587\u4ef6\uff08ES6\uff09\u53ef\u4ee5\u5f15\u5165 uuidjs . const UUID = require( uuidjs ); \u4f7f\u7528 UUID.generate() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u7248\u672c4\u7684\u5341\u516d\u8fdb\u5236\u7684\u5b57\u7b26\u4e32 console.log(UUID.generate()); // fa84cf42-ffdf-4975-b42b-31ab5fb983eb UUID.genV4() , UUID.genV1() , \u548c UUID.parse() \u8fd4\u56de\u4e00\u4e2a UUID \u5bf9\u8c61\uff0c\u5177\u6709\u591a\u79cd\u5b57\u6bb5\uff08fields\uff09\u548c\u65b9\u6cd5 // Create a version 4 (random number-based) UUID object(\u521b\u5efa\u7248\u672c4\u7684UUID\u5bf9\u8c61) var objV4 = UUID.genV4(); // Create a version 1 (time-based) UUID object(\u521b\u5efa\u7248\u672c1\u7684UUID\u5bf9\u8c61) var objV1 = UUID.genV1(); // Create a UUID object from a hexadecimal string (\u4ece\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u4e2d\u521b\u5efa\u4e00\u4e2aUUID\u5bf9\u8c61) var uuid = UUID.parse( a0e0f130-8c21-11df-92d9-95795a3bcd40 ); // Get string representations of a UUID object console.log(uuid.toString()); // a0e0f130-8c21-11df-92d9-95795a3bcd40 console.log(uuid.hexString); // a0e0f130-8c21-11df-92d9-95795a3bcd40 console.log(uuid.hexNoDelim); // a0e0f1308c2111df92d995795a3bcd40 console.log(uuid.bitString); // 101000001110000 ... 1100110101000000 console.log(uuid.urn); // urn:uuid:a0e0f130-8c21-11df-92d9-95795a3bcd40 // Compare UUID objects console.log(objV4.equals(objV1)); // false // Get UUID version numbers console.log(objV4.version); // 4 console.log(objV1.version); // 1 // Get internal field values in 3 different forms via 2 different accessors console.log(uuid.intFields.timeLow); // 2699096368 console.log(uuid.bitFields.timeMid); // 1000110000100001 console.log(uuid.hexFields.timeHiAndVersion); // 11df console.log(uuid.intFields.clockSeqHiAndReserved); // 146 console.log(uuid.bitFields.clockSeqLow); // 11011001 console.log(uuid.hexFields.node); // 95795a3bcd40 console.log(uuid.intFields[0]); // 2699096368 console.log(uuid.bitFields[1]); // 1000110000100001 console.log(uuid.hexFields[2]); // 11df console.log(uuid.intFields[3]); // 146 console.log(uuid.bitFields[4]); // 11011001 console.log(uuid.hexFields[5]); // 95795a3bcd40 UUID.js \u652f\u6301\u6240\u8c13\u7684 noConflict \u6a21\u5f0f\u6765\u5904\u7406\u540d\u79f0\u7a7a\u95f4\u51b2\u7a81\u3002 // Avoid namespace conflicts with other libraries var arbitraryVarName = UUID; UUID = UUID.overwrittenUUID; // Restore the original value console.log(arbitraryVarName.generate()); // cb9a0283-a44c-4e7a-a5b0-9cd2876e952b","title":"Release Notes"},{"location":"uuid/#uuid","text":"","title":"UUID\u5e93\u4ecb\u7ecd\u548c\u4f7f\u7528"},{"location":"uuid/#uuid_1","text":"UUID\u662fUniversally Unique Identifier\u7684\u7f29\u5199\uff0c\u5b83\u662f\u5728\u4e00\u5b9a\u7684\u8303\u56f4\u5185\u552f\u4e00\u7684\u673a\u5668\u751f\u6210\u7684\u6807\u8bc6\u7b26\uff0c\u4f7f\u7528 RFC\u89c4\u8303 \u3002","title":"UUID\u4ecb\u7ecd"},{"location":"uuid/#_1","text":"UUID \u662f\u4e00\u4e2a128bit\u7684\u6570\u5b57\uff0c\u4e5f\u53ef\u4ee5\u8868\u73b0\u4e3a32\u4e2a16\u8fdb\u5236\u7684\u5b57\u7b26\uff0c\u4e2d\u95f4\u7528\u201d-\u201d\u5206\u5272 3F2504E0-4F89-11D3-9A0C-0305E82C3301 \u5176\u4e2d\u7684\u5b57\u6bcd\u662f16\u8fdb\u5236\u8868\u793a\uff0c\u5927\u5c0f\u5199\u65e0\u5173\u3002 - \u65f6\u95f4\u6233\uff0bUUID\u7248\u672c\u53f7\uff0c\u5206\u4e09\u6bb5\u536016\u4e2a\u5b57\u7b26(60bit+4bit)\uff0c - Clock Sequence\u53f7\u4e0e\u4fdd\u7559\u5b57\u6bb5\uff0c\u53604\u4e2a\u5b57\u7b26(13bit\uff0b3bit)\uff0c - \u8282\u70b9\u6807\u8bc6\u536012\u4e2a\u5b57\u7b26(48bit)\uff0c","title":"\u7ed3\u6784"},{"location":"uuid/#_2","text":"\u7531\u7b97\u6cd5\u673a\u5668\u751f\u6210 \uff1a\u89c4\u8303\u5b9a\u4e49\u4e86\u5305\u62ec\u7f51\u5361MAC\u5730\u5740\u3001\u65f6\u95f4\u6233\u3001\u540d\u5b57\u7a7a\u95f4\uff08Namespace\uff09\u3001\u968f\u673a\u6216\u4f2a\u968f\u673a\u6570\u3001\u65f6\u5e8f\u7b49\u5143\u7d20\uff0c\u4ee5\u53ca\u4ece\u8fd9\u4e9b\u5143\u7d20\u751f\u6210UUID\u7684\u7b97\u6cd5\u3002UUID\u7684\u590d\u6742\u7279\u6027\u5728\u4fdd\u8bc1\u4e86\u5176\u552f\u4e00\u6027\u7684\u540c\u65f6\uff0c\u610f\u5473\u7740\u53ea\u80fd\u7531\u8ba1\u7b97\u673a\u751f\u6210\u3002 \u975e\u4eba\u5de5\u6307\u5b9a\uff0c\u975e\u4eba\u5de5\u8bc6\u522b \uff1aUUID\u662f\u4e0d\u80fd\u4eba\u5de5\u6307\u5b9a\u7684\uff0cUUID\u7684\u590d\u6742\u6027\u51b3\u5b9a\u4e86\u201c\u4e00\u822c\u4eba\u201c\u4e0d\u80fd\u76f4\u63a5\u4ece\u4e00\u4e2aUUID\u77e5\u9053\u54ea\u4e2a\u5bf9\u8c61\u548c\u5b83\u5173\u8054\u3002 \u91cd\u590d\u7684\u53ef\u80fd\u6027\u6781\u5c0f \uff1aUUID\u7684\u751f\u6210\u89c4\u8303\u5b9a\u4e49\u7684\u7b97\u6cd5\u4e3b\u8981\u76ee\u7684\u5c31\u662f\u8981\u4fdd\u8bc1\u5176\u552f\u4e00\u6027\u3002\u4f46\u8fd9\u4e2a\u552f\u4e00\u6027\u662f\u6709\u9650\u7684\uff0c\u53ea\u5728\u7279\u5b9a\u7684\u8303\u56f4\u5185\u624d\u80fd\u5f97\u5230\u4fdd\u8bc1\uff0c\u8fd9\u548cUUID\u7684\u7c7b\u578b\u6709\u5173\uff08\u53c2\u89c1UUID\u7684\u7248\u672c\uff09\u3002","title":"\u7279\u70b9"},{"location":"uuid/#uuidjs","text":"","title":"UUID.js \u5e93\u4f7f\u7528"},{"location":"uuid/#_3","text":"!-- HTML5 -- script src= src/uuid.js /script script var uuid = UUID.generate(); /script // Node.js let UUID = require( uuidjs ); let uuid = UUID.generate(); // TypeScript import UUID from 'uuidjs'; let str: string = UUID.generate(); let obj: UUID = UUID.genV4(); # Command-line npx uuidjs","title":"\u6982\u8981"},{"location":"uuid/#_4","text":"\u652f\u6301\u7248\u672c1\uff08\u57fa\u4e8e\u65f6\u95f4\u7684UUID\uff09\u7248\u672c4\uff08\u57fa\u4e8e\u968f\u673a\u6570\u7684UUID\uff09 \u5e76\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9762\u5411\u5bf9\u8c61\u7684\u754c\u9762\uff0c\u53ef\u4ee5\u751f\u6210\u591a\u79cd\u683c\u5f0f\u7684UUID \u4f7f\u7528\u5bc6\u7801\u5b89\u5168\u7684\u4f2a\u968f\u673a\u6570\u751f\u6210\u5668(\u5982\u679c\u53ef\u7528)\uff0c\u5426\u5219\u4f7f\u7528Math.randow()\u751f\u6210\u968f\u673a\u6570 \u9644\u52a0\u989d\u5916\u7684\u968f\u673a\u503c\u6765\u8865\u507f JS \u7684\u65f6\u95f4\u6233\u5206\u8fa8\u7387\u4f4e\u4e8e\u7248\u672c1 uuid\u6240\u9700\u7684\u65f6\u95f4\u6233 \u5305\u542b\u5f88\u591a\u6d4b\u8bd5\u6848\u4f8b\uff08\u5305\u62ec\u683c\u5f0f\u68c0\u67e5\u548c\u7edf\u8ba1\u6d4b\u8bd5\uff09\u786e\u4fdd\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801 \u517c\u5bb9\u6027\uff1a\u652f\u6301\u65e9\u671f\u6d4f\u89c8\u5668\u548c\u73b0\u4ee3\u6d4f\u89c8\u5668\uff0c\u540c\u6837\u652f\u6301\u670d\u52a1\u5668\u73af\u5883\uff0c\u4e0eES3\u7248\u672c\u53ef\u4ee5\u517c\u5bb9\u3002","title":"\u7279\u70b9"},{"location":"uuid/#_5","text":"\u76f4\u63a5\u4e0b\u8f7d uuid.js \u6587\u4ef6\u6216\u8005\u4f7f\u7528 npm install uuidjs \u8fdb\u884c\u5b89\u88c5\uff1b \u5728HTML\u4e2d\u76f4\u63a5\u5f15\u5165 src/uuid.js . script src= src/uuid.js /script \u5728 JS \u6587\u4ef6\uff08ES6\uff09\u53ef\u4ee5\u5f15\u5165 uuidjs . const UUID = require( uuidjs );","title":"\u5b89\u88c5"},{"location":"uuid/#_6","text":"UUID.generate() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u7248\u672c4\u7684\u5341\u516d\u8fdb\u5236\u7684\u5b57\u7b26\u4e32 console.log(UUID.generate()); // fa84cf42-ffdf-4975-b42b-31ab5fb983eb UUID.genV4() , UUID.genV1() , \u548c UUID.parse() \u8fd4\u56de\u4e00\u4e2a UUID \u5bf9\u8c61\uff0c\u5177\u6709\u591a\u79cd\u5b57\u6bb5\uff08fields\uff09\u548c\u65b9\u6cd5 // Create a version 4 (random number-based) UUID object(\u521b\u5efa\u7248\u672c4\u7684UUID\u5bf9\u8c61) var objV4 = UUID.genV4(); // Create a version 1 (time-based) UUID object(\u521b\u5efa\u7248\u672c1\u7684UUID\u5bf9\u8c61) var objV1 = UUID.genV1(); // Create a UUID object from a hexadecimal string (\u4ece\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u4e2d\u521b\u5efa\u4e00\u4e2aUUID\u5bf9\u8c61) var uuid = UUID.parse( a0e0f130-8c21-11df-92d9-95795a3bcd40 ); // Get string representations of a UUID object console.log(uuid.toString()); // a0e0f130-8c21-11df-92d9-95795a3bcd40 console.log(uuid.hexString); // a0e0f130-8c21-11df-92d9-95795a3bcd40 console.log(uuid.hexNoDelim); // a0e0f1308c2111df92d995795a3bcd40 console.log(uuid.bitString); // 101000001110000 ... 1100110101000000 console.log(uuid.urn); // urn:uuid:a0e0f130-8c21-11df-92d9-95795a3bcd40 // Compare UUID objects console.log(objV4.equals(objV1)); // false // Get UUID version numbers console.log(objV4.version); // 4 console.log(objV1.version); // 1 // Get internal field values in 3 different forms via 2 different accessors console.log(uuid.intFields.timeLow); // 2699096368 console.log(uuid.bitFields.timeMid); // 1000110000100001 console.log(uuid.hexFields.timeHiAndVersion); // 11df console.log(uuid.intFields.clockSeqHiAndReserved); // 146 console.log(uuid.bitFields.clockSeqLow); // 11011001 console.log(uuid.hexFields.node); // 95795a3bcd40 console.log(uuid.intFields[0]); // 2699096368 console.log(uuid.bitFields[1]); // 1000110000100001 console.log(uuid.hexFields[2]); // 11df console.log(uuid.intFields[3]); // 146 console.log(uuid.bitFields[4]); // 11011001 console.log(uuid.hexFields[5]); // 95795a3bcd40 UUID.js \u652f\u6301\u6240\u8c13\u7684 noConflict \u6a21\u5f0f\u6765\u5904\u7406\u540d\u79f0\u7a7a\u95f4\u51b2\u7a81\u3002 // Avoid namespace conflicts with other libraries var arbitraryVarName = UUID; UUID = UUID.overwrittenUUID; // Restore the original value console.log(arbitraryVarName.generate()); // cb9a0283-a44c-4e7a-a5b0-9cd2876e952b","title":"\u4f7f\u7528"}]}